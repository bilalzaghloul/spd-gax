<solutionDefinition version="2.0.0" xmlns="http://genesyslab.com/gax/asd" xmlns:os="http://genesyslab.com/gax/asd/os" xmlns:cfg="http://genesyslab.com/gax/asd/cfg" xmlns:fileio="http://genesyslab.com/gax/asd/fileio" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://genesyslab.com/gax/asd asd.xsd http://genesyslab.com/gax/asd/os os.xsd http://genesyslab.com/gax/asd/cfg cfg.xsd http://genesyslab.com/gax/asd/fileio fileio.xsd">
	<!-- version 6.0.9 2015-08-01 -->
	<deploymentkey>MediaRouting</deploymentkey>
	<name>MediaRouting</name>
	<version>6.0.9</version>
	<description>Installation of Genesys Framework and ManagementLayer. Components are all release 8 minimum.</description>
	<summary>Genesys platform installation Voice</summary>
	<profile name="install">
		<dialog step="Tenant selection and System information">
			<input name="TENANT" title="Tenant Name" type="selectOne" default="Resources" required="true">
				<description>Please select the tenant</description>
				<objectselect>
					<filter value="CfgTenant" name="type"/>
				</objectselect>
			</input>
			<input name="DATA_MODEL" title="Binary Version (32-bit or 64-bit)" type="selectOne" default="64" required="true">
				<description>This parameter defines the 32-bit or the 64-bit version of the binary to be deployed</description>
				<selection>
					<option name="32" value="32"/>
					<option name="64" value="64"/>
				</selection>
			</input>
			<input name="SKIP_INSTALL_PKG" title="Skip IP re-installation if application already installed for the tenant" type="selectOne" default="true" required="true">
				<description>This parameter specifies whether to force reinstallation of the IP if the package already exists on the machine for the tenant</description>
				<selection>
					<option name="false" value="false"/>
					<option name="true" value="true"/>
				</selection>
			</input>
		</dialog>
		<dialog step="Destination Folder">
			<input name="WIN_INSTALL_BASE_PATH_WIN" title="Windows Install Base Path" type="string" default="E:\SPD\GCTI\" required="true">
				<description>Windows Installation Base Path</description>
			</input>
			<input name="WIN_LOG_BASE_PATH_WIN" title="Windows Log Base Path" type="string" default="E:\SPD\Logs\" required="true">
				<description>Windows Installation Base Path</description>
			</input>
			<input name="LINUX_INSTALL_BASE_PATH_WIN" title="Linux Install Base Path" type="string" default="/home/genesys/GCTI/" required="true">
				<description>Linux Installation Base Path</description>
			</input>
			<input name="LINUX_LOG_BASE_PATH_WIN" title="Linux Log Base Path" type="string" default="/home/genesys/Logs/" required="true">
				<description>Linux Installation Base Path</description>
			</input>
		</dialog>
		<dialog step="Options selection">
			<input name="HA" title="High Availability?" type="selectOne" default="false" required="true">
				<description>Do you want to install the High Availability option ?</description>
				<selection>
					<option name="false" value="false"/>
					<option name="true" value="true"/>
				</selection>
			</input>
			<input name="ENABLE_JAVA" title="Enable Java for Stat Server?" type="selectOne" default="false" required="true">
				<description>StatServer use java statistics?</description>
				<selection>
					<option name="false" value="false"/>
					<option name="true" value="true"/>
				</selection>
			</input>
			<input name="SCS_AUTOSTART" title="SCS will control application startup" type="selectOne" default="false" required="true">
				<description>Client Side used for connection to Genesys Configuration Server</description>
				<selection>
					<option name="false" value="false"/>
					<option name="true" value="true"/>
				</selection>
			</input>
			<input name="APP_AUTORESTART" title="Application auto restart" type="selectOne" default="CFGFalse" required="true">
				<description>Application auto restart</description>
				<selection>
					<option name="false" value="CFGFalse"/>
					<option name="true" value="CFGTrue"/>
				</selection>
			</input>
			<input name="Logging" title="Log Custom Settings?" type="selectOne" default="false" required="true">
				<description>Do you want to setup your log settings ?</description>
				<selection>
					<option name="false" value="false"/>
					<option name="true" value="true"/>
				</selection>
			</input>
			<input name="ADDP" title="ADDP Custom Settings?" type="selectOne" default="false" required="true">
				<description>Do you want to setup your log settings ?</description>
				<selection>
					<option name="false" value="false"/>
					<option name="true" value="true"/>
				</selection>
			</input>
			<input name="CLIENT_SIDE" title="Client Side used for connection to Genesys Configuration Server" type="selectOne" default="false" required="true">
				<description>Client Side used for connection to Genesys Configuration Server</description>
				<selection>
					<option name="false" value="false"/>
					<option name="true" value="true"/>
				</selection>
			</input>
		</dialog>
		<dialog step="Component Selection">
			<input name="MESSSRV" title="Usage of Message Server?" type="selectOne" default="false" required="true">
				<description>Do you want to install Message Server component?</description>
				<selection>
					<option name="Connect to Existing Message Server" value="false"/>
					<option name="Require new Message Server" value="true"/>
				</selection>
			</input>
			<input name="PROXYCS" title="Connection to Configuration Server/Configuration Server Proxy?" type="selectOne" default="exiconf" required="true">
				<description>Do you want to configure application in High Availability mode?</description>
				<selection>
					<option name="Connect to Configuration Server" value="exiconf"/>
					<option name="Connect to Existing Configuration Server Proxy" value="exicsp"/>
					<option name="Require new Configuration Server Proxy" value="newcsp"/>
				</selection>
			</input>
			<input name="InteractionWorkspace" title="Usage of Interaction Workspace?" type="selectOne" default="false" required="true">
				<description>Do you want to install Interaction Workspace component?</description>
				<selection>
					<option name="Use Existing Interaction Workspace" value="false"/>
					<option name="Require new Interaction Workspace" value="true"/>
				</selection>
			</input>
			<input name="GVPRS" title="Required GVP Reporting Server" type="selectOne" default="false" required="true">
				<description>Do you want to install GVP Reporting Server?</description>
				<selection>
					<option name="false" value="false"/>
					<option name="true" value="true"/>
				</selection>
			</input>
			<input name="Licensing" title="Required License Manager(flexlm)" type="selectOne" default="false" required="true">
				<description>Do you want to install Licensing Manager ?</description>
				<selection>
					<option name="false" value="false"/>
					<option name="true" value="true"/>
				</selection>
			</input>
		</dialog>
		<dialog step="Application selection">
			<input name="GAX_APPNAME" title="GAX application name" type="selectOne" default="GAX" required="true">
				<description>Please select your GAX Application</description>
				<objectselect>
					<filter value="CfgApplication" name="type"/>
					<filter name="subtype" value="CFGGenesysAdministratorServer"/>
				</objectselect>
			</input>
			<if cond="HA == 'true'">
				<input name="GAX_BK_APPNAME" title="GAX backup application name" type="selectOne" default="GAX_BK" required="true">
					<description>Please select your GAX Backup Application</description>
					<objectselect>
						<filter value="CfgApplication" name="type"/>
						<filter name="subtype" value="CFGGenesysAdministratorServer"/>
					</objectselect>
				</input>
			</if>
			<input name="SCS_APPNAME" title="SCS application name that will monitor Media Routing Hosts" type="selectOne" default="SCS" required="true">
				<description>Please select your SCS Application</description>
				<objectselect>
					<filter value="CfgApplication" name="type"/>
					<filter name="subtype" value="CFGSCS"/>
				</objectselect>
			</input>
		</dialog>
		<dialog step="Configuration Server(Proxy) Configuration">
			<input name="CFGSERV_APPNAME" title="Configuration Server Application Name" type="selectOne" default="confserv" required="true">
				<description>Please select the Configuration Server application name</description>
				<objectselect>
					<filter value="CfgApplication" name="type"/>
					<filter name="subtype" value="CFGConfigServer"/>				
				</objectselect>
			</input>
			<if cond="PROXYCS == 'exicsp'">
				<input name="CSPROXY_APPNAME" title="Configuration Server Proxy Application Name" type="selectOne" default="CSProxy" required="true">
					<description>Please select the Configuration Server Proxy application name</description>
					<objectselect>
						<filter value="CfgApplication" name="type"/>
						<filter name="subtype" value="CFGConfigServer"/>				
					</objectselect>
				</input>
			</if>
			<if cond="PROXYCS == 'newcsp'">
				<input name="CSPROXY_HOST" title="Configuration Server Proxy Host" type="selectOne" default="W2008-PS" required="true">
					<description>Please select the host where the Configuration Server Proxy application will be installed</description>
					<objectselect>
						<filter value="CfgHost" name="type"/>
					</objectselect>
				</input>
				<input name="CSPROXY_APPNAME" title="Configuration Server Proxy Application Name" type="string" default="CSProxy_Media" required="true">
					<description>Please insert the Configuration Server Proxy application name</description>
				</input>
			<input name="CSPROXY_TEMPLATE" title="Configuration Server Proxy Template" type="selectOne" default="" required="true">
					<description>Please select the Configuration Server Proxy Template</description>
					<objectselect>
						<filter value="CfgAppPrototype" name="type"/>
						<filter name="subtype" value="CFGConfigServer"/>				
					</objectselect>
				</input>
				<input name="CSPROXY_PORT" title="Port of your Configuration Server Proxy" type="integer" default="2040" required="true">
					<description>Port</description>
				</input>
				<if cond="HA == 'true'">
					<input name="CSPROXY_BK_HOST" title="Configuration Server Proxy Backup Host" type="selectOne" default="W2008-PS-BK" required="true">
						<description>Please select the host where the Configuration Server Proxy Backup application will be installed</description>
						<objectselect>
							<filter value="CfgHost" name="type"/>
						</objectselect>
					</input>
					<input name="CSPROXY_BK_APPNAME" title="Configuration Server Proxy Backup Application Name" type="string" default="CSProxy_Media_BK" required="true">
						<description>Please insert the Configuration Server Proxy Backup application name</description>
					</input>
					<input name="CSPROXY_BK_PORT" title="Port of your Configuration Server Proxy Backup" type="integer" default="2040" required="true">
						<description>Port</description>
					</input>
				</if>
				<input name="PROXY_WRITABLE" title="CSProxy with Write permission ?" type="selectOne" default="false" required="false">
					<description>Do you want to enable Write permission to Configuration Server Proxy ?</description>
					<selection>
						<option name="false" value="false"/>
						<option name="true" value="true"/>
					</selection>
				</input>
			</if>
		</dialog>
		<dialog step="Licenses Configuration">
			<input name="LICENSE_NUMBER" title="Number of licensed contact center positions" type="integer" default="100" required="true">
				<description>Enter the number of agent positions</description>
			</input>
			<input name="LICENSE_HOST" title="License host" default="W2008-PS" type="selectOne" required="true">
				<description>Please select the host where your License Manager is installed</description>
				<objectselect>
					<filter value="CfgHost" name="type"/>
				</objectselect>
			</input>
			<input name="LICENSE_PORT" title="License port" type="integer" default="7260" required="true">
				<description>Enter the port used by your license manager</description>
			</input>
			<if cond="Licensing == 'true'">
				<input name="LICENSE_APPNAME" title="License Application Name" type="string" default="FLEXlm1" required="true">
					<description>Please insert the License Manager application name</description>
				</input>
			</if>
			<if cond="HA == 'true'">
				<input name="LICENSE_BK_HOST" title="Backup License host" default="W2008-PS-BK" type="selectOne" required="true">
					<description>Please select the host where your License Manager backup is installed</description>
					<objectselect>
						<filter value="CfgHost" name="type"/>
					</objectselect>
				</input>
				<input name="LICENSE_BK_PORT" title="Backup License port" type="integer" default="7260" required="true">
					<description>Enter the port used by your backup License Manager</description>
				</input>
				<if cond="Licensing == 'true'">
					<input name="LICENSE_BK_APPNAME" title="License Application Backup Name" type="string" default="FLEXlm2" required="true">
						<description>Please insert the License Manager Backup application name</description>
					</input>
				</if>
			</if>
		</dialog>
		<dialog step="Message Server Configuration">
			<if cond="MESSSRV == 'false'">
				<input name="MESS_SERV_APPNAME" title="Message Server Application Name" type="selectOne" default="MessageServer" required="true">
					<description>Please select the Message Server application name</description>
					<objectselect>
						<filter value="CfgApplication" name="type"/>
						<filter name="subtype" value="CFGMessageServer"/>				
					</objectselect>
				</input>
			</if>
			<if cond="MESSSRV == 'true'">
				<input name="MESS_SERV_HOST" title="Message Server Host" type="selectOne" default="W2008-PS" required="true">
					<description>Please select the host where the Message Server application will be installed</description>
					<objectselect>
						<filter value="CfgHost" name="type"/>
					</objectselect>
				</input>
				<input name="MESS_SERV_APPNAME" title="Message Server Application Name" type="string" default="MessageServer_Media" required="true">
					<description>Please insert the Message Server application name</description>
				</input>
				<input name="MESS_SERV_TEMPLATE" title="Message Server Template" type="selectOne" default="" required="true">
					<description>Please select the Message Server Template</description>
					<objectselect>
						<filter value="CfgAppPrototype" name="type"/>
						<filter name="subtype" value="CFGMessageServer"/>
					</objectselect>
				</input>
				<input name="MESS_SERV_PORT" title="Port of your Message Server" type="integer" default="3820" required="true">
					<description>Port</description>
				</input>
				<if cond="HA == 'true'">
					<input name="MESS_SERV_BK_HOST" title="Message Server Backup Host" type="selectOne" required="true" default="W2008-PS-BK">
						<description>Please select the host where the Message Server Backup application will be installed</description>
						<objectselect>
							<filter value="CfgHost" name="type"/>
						</objectselect>
					</input>
					<input name="MESS_SERV_BK_APPNAME" title="Message Server Backup Application Name" type="string" default="MessageServer_Media_BCK" required="true">
						<description>Please insert the Message Server Backup application name</description>
					</input>
					<input name="MESS_SERV_BK_PORT" title="Port of your Message Server Backup" type="integer" default="3820" required="true">
						<description>Port</description>
					</input>
				</if>
				<input name="DAP_LOG_APPNAME" title="DAP Application Name(LOG)" type="selectOne" default="DAP_LOG_Media" required="true">
					<description>Please select the DAP application name</description>
					<objectselect>
						<filter value="CfgApplication" name="type"/>
					</objectselect>
				</input>
				<input name="db_storage_value" title="Store Messages" type="selectOne" default="true" required="true">
					<description>Do you want to store the messages in the Log Database ?</description>
					<selection>
						<option name="false" value="false"/>
						<option name="true" value="true"/>
					</selection>
				</input>
			</if>
		</dialog>
		<dialog step="SIP Server Configuration">
			<input name="SIP_SWITCH" title="SIP Server Switch Name" type="string" default="SIP" required="true">
				<description>Please insert the SIP Server switch name</description>
			</input>
			<input name="SIP_SERV_HOST" title="SIP Server Host" type="selectOne" default="W2008-PS" required="true">
				<description>Please select the host where the SIP Server application will be installed</description>
				<objectselect>
					<filter value="CfgHost" name="type"/>
				</objectselect>
			</input>
			<input name="SIP_SERV_APPNAME" title="SIP Server Application Name" type="string" default="SIPServer" required="true">
				<description>Please insert the SIP Server application name</description>
			</input>
			<input name="SIP_SERV_TEMPLATE" title="SIP Server Template" type="selectOne" default="" required="true">
				<description>Please select the SIP Server Template</description>
				<objectselect>
					<filter value="CfgAppPrototype" name="type"/>
					<filter name="subtype" value="CFGTServer"/>
				</objectselect>
			</input>
			<input name="SIP_SERV_PORT" title="Port of your SIP Server" type="integer" default="3000" required="true">
				<description>Port</description>
			</input>
			<input name="SIP_PORT" title="SIP Signalling Port" type="integer" default="5060" required="true">
				<description>Port</description>
			</input>
			<if cond="HA == 'true'">
				<input name="SIP_SERV_BK_HOST" title="SIP Server Backup Host" type="selectOne" default="W2008-PS-BK" required="true">
					<description>Please select the host where the SIP Server Backup application will be installed</description>
					<objectselect>
						<filter value="CfgHost" name="type"/>
					</objectselect>
				</input>
				<input name="SIP_SERV_BK_APPNAME" title="SIP Server Backup Application Name" type="string" default="SIPServer_BCK" required="true">
					<description>Please insert the SIP Server Backup application name</description>
				</input>
				<input name="SIP_SERV_BK_PORT" title="Port of your SIP ServerBackup" type="integer" default="3000" required="true">
					<description>Port</description>
				</input>
				<input name="SIP_VIRTUAL_IP" title="SIPServer Virtual IP" type="string" default="" required="true">
					<description>Virtual IP address of SIPServer pair</description>
				</input>
			</if>
		</dialog>
		<dialog step="SIP Server Settings">
			<if cond="HA == 'false'">
				<input name="SIP_THREAD" title="SIP Server will run in Multi Thread Mode?" type="selectOne" default="0" required="true">
					<description>Configure SIP Server Multithread mode</description>
					<selection>
						<option name="Single Thread Mode" value="0"/>
						<option name="Multi Thread Mode" value="3"/>
						<option name="Multi Thread Mode(required for IMS integration)" value="4"/>
					</selection>
				</input>
			</if>
			<if cond="HA == 'true'">
				<input name="SIP_THREAD" title="SIP Server will run in Multi Thread Mode?" type="selectOne" default="0" required="true">
					<description>Configure SIP Server Multithread mode</description>
					<selection>
						<option name="Single Thread Mode" value="0"/>
						<option name="Multi Thread Mode" value="3"/>
						<option name="Multi Thread Mode(required for IMS integration)" value="4"/>
					</selection>
				</input>
				<input name="SIP_NIC_ENABLED" title="Enable SIP NIC status monitoring" type="selectOne" default="false" required="true">
					<description>Do you want to Enable SIP NIC status monitoring?</description>
					<selection>
						<option name="false" value="false"/>
						<option name="true" value="true"/>
					</selection>
				</input>
				<input name="SIPP_NIC_IP" title="Primary SIP Server Dedicated IP Address" type="string" default="" required="false">
					<description>Primary SIP Server Dedicated IP Address</description>
				</input>
				<input name="SIPB_NIC_IP" title="Backup SIP Server Dedicated IP Address" type="string" default="" required="false">
					<description>Backup SIP Server Dedicated IP Address</description>
				</input>
				<input name="TLIB_NIC_ENABLED" title="Enable T-Lib NIC status monitoring" type="selectOne" default="false" required="true">
					<description>Do you want to Enable T-Lib NIC status monitoring?</description>
					<selection>
						<option name="false" value="false"/>
						<option name="true" value="true"/>
					</selection>
				</input>
				<input name="SIPP_SCRIPT_UP" title="Primary SIP Server Script Name VIP_UP" type="string" default="SIP_SERVER_PRIMARY_VIP_UP" required="false">
					<description>Primary SIP Server Dedicated IP Address</description>
				</input>
				<input name="SIPP_SCRIPT_DOWN" title="Primary SIP Server Script Name VIP_DOWN" type="string" default="SIP_SERVER_PRIMARY_VIP_DOWN" required="false">
					<description>Primary SIP Server Dedicated IP Address</description>
				</input>
				<input name="SIPB_SCRIPT_UP" title="Backup SIP Server Script Name VIP_UP" type="string" default="SIP_SERVER_BACKUP_VIP_UP" required="false">
					<description>Backup SIP Server Dedicated IP Address</description>
				</input>
				<input name="SIPB_SCRIPT_DOWN" title="Backup SIP Server Script Name VIP_DOWN" type="string" default="SIP_SERVER_BACKUP_VIP_DOWN" required="false">
					<description>Backup SIP Server Dedicated IP Address</description>
				</input>
			</if>
		</dialog>
		<dialog step="SIP Server DN Configuration">
			<input name="MSML_NAME" title="MSML DN Name" type="string" default="msml" required="false">
				<description>Please insert the msml voip service name</description>
			</input>
		</dialog>
		<dialog step="Interaction Workspace Configuration">
			<if cond="InteractionWorkspace == 'false'">
				<input name="IWS_APPNAME" title="Interaction Workspace Application Name" type="selectOne" default="iWS" required="true">
					<description>Please select your Interaction Workspace Application Name</description>
					<objectselect>
						<filter value="CfgApplication" name="type"/>
					</objectselect>
				</input>
			</if>
			<if cond="InteractionWorkspace == 'true'">
				<input name="IWS_APPNAME" title="Interaction Workspace Application Name" type="string" default="iWS" required="true">
					<description>Please specify the Interaction Workspace application name</description>
				</input>
				<input name="IWS_TEMPLATE" title="Interaction Workspace Template" type="selectOne" default="" required="true">
					<description>Please select the Interaction Workspace Template</description>
					<objectselect>
						<filter value="CfgAppPrototype" name="type"/>
					</objectselect>
				</input>
			</if>
		</dialog>
		<dialog step="Stat Server Configuration">
			<input name="ROUTING_STATSERV_HOST" title="Routing Stat Server Host" type="selectOne" default="W2008-PS" required="true">
				<description>Please select the host where the Routing Stat Server application will be installed</description>
				<objectselect>
					<filter value="CfgHost" name="type"/>
				</objectselect>
			</input>
			<input name="ROUTING_STATSERV_APPNAME" title="Routing Stat Server Application Name" type="string" default="URS_StatServer" required="true">
				<description>Please insert the Routing Stat Server application name</description>
			</input>
			<input name="ROUTING_STATSERV_TEMPLATE" title="Stat Server Template" type="selectOne" default="" required="true">
				<description>Please select the Stat Server Template</description>
				<objectselect>
					<filter value="CfgAppPrototype" name="type"/>
					<filter name="subtype" value="CFGStatServer"/>				
				</objectselect>
			</input>
			<input name="ROUTING_STATSERV_PORT" title="Port of your Routing Stat Server" type="integer" default="4500" required="true">
				<description>Port</description>
			</input>
			<if cond="HA == 'true'">
				<input name="ROUTING_STATSERV_BK_HOST" title="Routing Stat Server Backup Host" type="selectOne" default="W2008-PS-BK" required="true">
					<description>Please select the host where the Routing Stat Server Backup application will be installed</description>
					<objectselect>
						<filter value="CfgHost" name="type"/>
					</objectselect>
				</input>
				<input name="ROUTING_STATSERV_BK_APPNAME" title="Routing Stat Server Backup Application Name" type="string" default="URS_StatServer_BK" required="true">
					<description>Please insert the Routing Stat Server Backup application name</description>
				</input>
				<input name="ROUTING_STATSERV_BK_PORT" title="Port of your Routing Stat Server Backup" type="integer" default="4500" required="true">
					<description>Port</description>
				</input>
			</if>
		</dialog>
		<dialog step="Stat Server Java Configuration">
			<if cond="ENABLE_JAVA == 'false'">
				<input name="JAVA_CONFIRM" title="Stat Server will not not use java extension. Press next to continue" type="boolean" default="true" required="false" readonly="true">
					<description>Stat Server will not not use java extension.</description>
				</input>			
			</if>
			<if cond="ENABLE_JAVA == 'true'">
				<input name="PATH_JVM" title="JVM path for Stat Extension" type="string" default="" required="true">
					<description>Please enter the Java installation path on the host machines (JVM_PATH) for Stat Server</description>
				</input>
				<input name="JAVA_ESERVICES" title="Enable eServices Java Stats?" type="selectOne" default="false" required="true">
					<description>StatServer use eServices java statistics?</description>
					<selection>
						<option name="false" value="false"/>
						<option name="true" value="true"/>
					</selection>
				</input>
				<input name="JAVA_IWD" title="Enable iWD Java Stats?" type="selectOne" default="false" required="true">
					<description>StatServer use iWD java statistics?</description>
					<selection>
						<option name="false" value="false"/>
						<option name="true" value="true"/>
					</selection>
				</input>
				<input name="JAVA_OCS" title="Enable Outbound Java Stats?" type="selectOne" default="false" required="true">
					<description>StatServer use Outbound java statistics?</description>
					<selection>
						<option name="false" value="false"/>
						<option name="true" value="true"/>
					</selection>
				</input>
				<input name="JAVA_VCB" title="Enable Voice Callback Java Stats?" type="selectOne" default="false" required="true">
					<description>StatServer use Voice Callback java statistics?</description>
					<selection>
						<option name="false" value="false"/>
						<option name="true" value="true"/>
					</selection>
				</input>
			</if>
		</dialog>
		<dialog step="URS Configuration">
			<input name="URS_HOST" title="URS Host" type="selectOne" default="W2008-PS" required="true">
				<description>Please select the host where the primary application will be installed</description>
				<objectselect>
					<filter value="CfgHost" name="type"/>
				</objectselect>
			</input>
			<input name="URS_APPNAME" title="URS Application Name" type="string" default="URServer" required="true">
				<description>Please insert the URS application name</description>
			</input>
			<input name="URS_TEMPLATE" title="URServer Template" type="selectOne" default="" required="true">
				<description>Please select the URServer Template</description>
				<objectselect>
					<filter value="CfgAppPrototype" name="type"/>
					<filter name="subtype" value="CFGRouterServer"/>				
				</objectselect>
			</input>
			<input name="URS_PORT" title="Port of your URS" type="integer" default="4600" required="true">
				<description>Port</description>
			</input>
			<if cond="HA == 'true'">
				<input name="URS_BK_HOST" title="URS Backup Host" type="selectOne" default="W2008-PS-BK" required="true">
					<description>Please select the host where the Backup applications will be installed</description>
					<objectselect>
						<filter value="CfgHost" name="type"/>
					</objectselect>
				</input>
				<input name="URS_BK_APPNAME" title="URS Backup Application Name" type="string" default="URServer_BK" required="true">
					<description>Please insert the URS Backup application name</description>
				</input>
				<input name="URS_BK_PORT" title="Port of your URS Backup" type="integer" default="4600" required="true">
					<description>Port</description>
				</input>
			</if>
		</dialog>
		<dialog step="ORS Configuration">
			<input name="ORS_HOST" title="ORS host" type="selectOne" default="W2008-PS" required="true">
				<description>Please select the host where the primary application will be installed</description>
				<objectselect>
					<filter value="CfgHost" name="type"/>
				</objectselect>
			</input>
			<input name="ORS_APPNAME" title="ORS Application Name" type="string" default="ORServer" required="true">
				<description>Please insert the ORS application name</description>
			</input>
			<input name="ORS_TEMPLATE" title="Orchestration Server Template" type="selectOne" default="" required="true">
				<description>Please select the Orchestration Server Template</description>
				<objectselect>
					<filter value="CfgAppPrototype" name="type"/>
					<filter name="subtype" value="CFGOrchestrationServer"/>				
				</objectselect>
			</input>
			<input name="ORS_PORT" title="Port of your ORS" type="integer" default="4620" required="true">
				<description>Port</description>
			</input>
			<if cond="HA == 'true'">
				<input name="ORS_BK_HOST" title="ORS Backup Host" type="selectOne" default="W2008-PS-BK" required="true">
					<description>Please select the host where the Backup application will be installed</description>
					<objectselect>
						<filter value="CfgHost" name="type"/>
					</objectselect>
				</input>
				<input name="ORS_BK_APPNAME" title="ORS Backup Application Name" type="string" default="ORServer_BK" required="true">
					<description>Please insert the ORS Backup application name</description>
				</input>
				<input name="ORS_BK_PORT" title="Port of your ORS Backup" type="integer" default="4620" required="true">
					<description>Port</description>
				</input>
			</if>
			<input name="ORS_RESTful" title="Enable ORS RESTful Interface?" type="selectOne" default="false" required="true">
				<description>Enable ORS RESTful Interface?</description>
				<selection>
					<option name="false" value="false"/>
					<option name="true" value="true"/>
				</selection>
			</input>
			<input name="ORS_TRANSACTION_NAME" title="ORS Transaction List Object Name" type="string" default="ORS" required="false">
				<description>Name of transaction list for ORS clustering</description>
			</input>
			<input name="ORS_CLUSTER_NAME" title="ORS Cluster name" type="string" default="ORS Cluster" required="true">
				<description>Enter the name of your ORS cluster</description>
			</input>
			<input name="CASSANDRA_PORT" title="Cassandra port" type="integer" default="9160" required="true">
				<description>Enter the port used by your Cassandra server</description>
			</input>
			<input name="ORS_WEB_PORT" title="ORS Web Interface port" type="integer" default="9165" required="true">
				<description>Enter the port used by your Cassandra server</description>
			</input>
		</dialog>
		<dialog step="MCP Configuration">
			<input name="MCP_HOST" title="MCP host" type="selectOne" default="W2008-PS" required="true">
				<description>Please select the host where the 1st MCP application will be installed</description>
				<objectselect>
					<filter value="CfgHost" name="type"/>
				</objectselect>
			</input>
			<input name="MCP_APPNAME" title="MCP Application Name" type="string" default="MCP_1" required="true">
				<description>Please insert the MCP application name</description>
			</input>
			<input name="MCP_TEMPLATE" title="MCP Server Template" type="selectOne" default="" required="true">
				<description>Please select the MCP Server Template</description>
				<objectselect>
					<filter value="CfgAppPrototype" name="type"/>
					<filter name="subtype" value="CFGGVPMCP"/>				
				</objectselect>
			</input>
			<input name="MCP_PORT" title="Port of your MCP" type="integer" default="4400" required="true">
				<description>Port</description>
			</input>
			<if cond="HA == 'true'">
				<input name="MCP_BK_HOST" title="Second MCP Host" type="selectOne" default="W2008-PS-BK" required="true">
					<description>Please select the host where the 2nd MCP application will be installed</description>
					<objectselect>
						<filter value="CfgHost" name="type"/>
					</objectselect>
				</input>
				<input name="MCP_BK_APPNAME" title="Second MCP Application Name" type="string" default="MCP_2" required="true">
					<description>Please insert the MCP Backup application name</description>
				</input>
				<input name="MCP_BK_PORT" title="Port of your second MCP" type="integer" default="4400" required="true">
					<description>Port</description>
				</input>
			</if>
			<input name="MCP_VOICE_XML" title="Voice XML" type="selectOne" default="Enable" required="true">
				<description>Enable/Disable Voice XML</description>
				<selection>
					<option name="Enable" value="Enable"/>
					<option name="Disable" value="Disable"/>
				</selection>
			</input>
			<input name="MCP_INSTALL_MODE" title="Install mode" type="selectOne" default="alaw" required="true">
				<description>Codecs: </description>
				<selection>
					<option name="ALAW" value="alaw"/>
					<option name="MULAW" value="mulaw"/>
				</selection>
			</input>
			<input name="MCP_GAX_ARM" title="Usage of GAX ARM?" type="selectOne" default="false" required="true">
				<description>Usage of GAX ARM?</description>
				<selection>
					<option name="false" value="false"/>
					<option name="true" value="true"/>
				</selection>
			</input>
		</dialog>
		<dialog step="MCP Settings">
			<if cond="MCP_GAX_ARM == 'true'">
				<input name="HOST_GAX" title="IIS webserver host for GAX ARM audio files" type="selectOne" default="W2008-PS" required="true">
					<description>Host where the IIS directory for GAX is configured (WAS for ARM)</description>
					<objectselect>
						<filter value="CfgHost" name="type"/>
					</objectselect>
				</input>
			</if>
			<input name="MCP_NIC_ENABLED" title="Dedicated SIP NIC" type="selectOne" default="false" required="true">
				<description>Do you have dedicated SIP NIC?</description>
				<selection>
					<option name="false" value="false"/>
					<option name="true" value="true"/>
				</selection>
			</input>
			<input name="MCP_SIP_IP" title="MCP Primary SIP Dedicated IP Address" type="string" default="" required="false">
				<description>MCP Primary SIP Server Dedicated IP Address</description>
			</input>
			<if cond="HA == 'true'">
				<input name="MCP_BK_SIP_IP" title="MCP Backup SIP Dedicated IP Address" type="string" default="" required="false">
					<description>MCP Backup SIP Server Dedicated IP Address</description>
				</input>
			</if>
			<input name="MCP_SIP" title="MCP SIP Port" type="integer" default="5080" required="true">
				<description>MCP SIP Port</description>
			</input>
			<input name="MCP_PORTS" title="MCP Port Capacity" type="integer" default="100" required="true">
				<description>Number of MCP Ports</description>
			</input>
		</dialog>
		<dialog step="RM Configuration">
			<input name="RESMAN_HOST" title="Resource Manager host" type="selectOne" default="W2008-PS" required="true">
				<description>Please select the host where the Primary Resource Manager will be installed</description>
				<objectselect>
					<filter value="CfgHost" name="type"/>
				</objectselect>
			</input>
			<input name="RESMAN_APPNAME" title="Resource Manager Application Name" type="string" default="RM_1" required="true">
				<description>Please insert the Resource Manager application name</description>
			</input>
			<input name="RESMAN_TEMPLATE" title="Resource Manager Server Template" type="selectOne" default="" required="true">
				<description>Please select the Resource Manager Server Template</description>
				<objectselect>
					<filter value="CfgAppPrototype" name="type"/>
					<filter name="subtype" value="CFGGVPResourceMgr"/>				
				</objectselect>
			</input>
			<input name="RESMAN_PORT" title="Port of your Resource Manager" type="integer" default="4410" required="true">
				<description>Port</description>
			</input>
			<if cond="HA == 'true'">
				<input name="RESMAN_BK_HOST" title="Resource Manager Backup Host" type="selectOne" default="W2008-PS-BK" required="true">
					<description>Please select the host where the Backup Resource Manager will be installed</description>
					<objectselect>
						<filter value="CfgHost" name="type"/>
					</objectselect>
				</input>
				<input name="RESMAN_BK_APPNAME" title="Resource Manager Backup Application Name" type="string" default="RM_2" required="true">
					<description>Please insert the Resource Manager application name</description>
				</input>
				<input name="RESMAN_BK_PORT" title="Port of your Resource Manager Backup" type="integer" default="4410" required="true">
					<description>Port</description>
				</input>
			</if>
		</dialog>
		<dialog step="Resource Manager Settings">
			<input name="RM_NIC_ENABLED" title="Dedicated SIP NIC" type="selectOne" default="false" required="true">
				<description>Do you have dedicated SIP NIC?</description>
				<selection>
					<option name="false" value="false"/>
					<option name="true" value="true"/>
				</selection>
			</input>
			<input name="RM_SIP_IP" title="RM Primary SIP Dedicated IP Address" type="string" default="" required="false">
				<description>RM Primary SIP Dedicated IP Address</description>
			</input>
			<if cond="HA == 'true'">
				<input name="RM_BK_SIP_IP" title="RM Backup SIP Dedicated IP Address" type="string" default="" required="false">
					<description>RM Backup SIP Dedicated IP Address</description>
				</input>
			</if>
			<input name="RM_PROXY_SIP" title="RM Proxy SIP Port" type="integer" default="5070" required="false">
				<description>RM Proxy SIP Port</description>
			</input>
			<input name="RM_REGIS_SIP" title="RM Registrar SIP Port" type="integer" default="5072" required="false">
				<description>RM Registrar SIP Port</description>
			</input>
			<input name="RM_MONIT_SIP" title="RM Monitor SIP Port" type="integer" default="5074" required="false">
				<description>RM Monitor SIP Port</description>
			</input>
			<input name="RM_SUBSC_SIP" title="RM Subscription SIP Port" type="integer" default="5076" required="false">
				<description>RM Subscription SIP Port</description>
			</input>
		</dialog>
		<dialog step="GVP Reporting Server Settings">
			<if cond="GVPRS == 'false'">
				<input name="GVPRS_CONFIRM" title="GVP Reporting Server not required. Press Next." type="boolean" default="true" required="false" readonly="true">
					<description>GVP Reporting Server not required.</description>
				</input>
			</if>
			<if cond="GVPRS == 'true'">
				<input name="RS_HOST" title="GVP Reporting Server host" type="selectOne" default="W2008-PS" required="true">
					<description>Please select the host where the Primary GVP Reporting Server will be installed</description>
					<objectselect>
						<filter value="CfgHost" name="type"/>
					</objectselect>
				</input>
				<input name="RS_APPNAME" title="GVP Reporting Server Application Name" type="string" default="RS_1" required="true">
					<description>Please insert the GVP Reporting Server application name</description>
				</input>
				<input name="RS_TEMPLATE" title="GVP Reporting Server Template" type="selectOne" default="" required="true">
					<description>Please select the GVP Reporting Server Template</description>
					<objectselect>
						<filter value="CfgAppPrototype" name="type"/>
						<filter name="subtype" value="CFGGVPReportingSever"/>				
					</objectselect>
				</input>
				<input name="RS_PORT" title="Port of your Reporting Server" type="integer" default="4420" required="true">
					<description>Port</description>
				</input>
				<input name="RSAMQ_PORT" title="Port of your Reporting Server(Active MQ)" type="integer" default="61616" required="true">
					<description>Port</description>
				</input>
				<input name="RSWEB_PORT" title="Port of your Reporting Server(WEB)" type="integer" default="9080" required="true">
					<description>Port</description>
				</input>
				<if cond="HA == 'true'">
					<input name="RS_BK_HOST" title="GVP Reporting Server Backup Host" type="selectOne" default="W2008-PS-BK" required="true">
						<description>Please select the host where the Backup GVP Reporting Server will be installed</description>
						<objectselect>
							<filter value="CfgHost" name="type"/>
						</objectselect>
					</input>
					<input name="RS_BK_APPNAME" title="GVP Reporting Server Backup Application Name" type="string" default="RS_2" required="true">
						<description>Please insert the GVP Reporting Server application name</description>
					</input>
					<input name="RS_BK_PORT" title="Port of your GVP Reporting Server Backup" type="integer" default="4420" required="true">
						<description>Port</description>
					</input>
					<input name="RSAMQ_BK_PORT" title="Port of your Backup Reporting Server(Active MQ)" type="integer" default="61616" required="true">
						<description>Port</description>
					</input>
					<input name="RSWEB_BK_PORT" title="Port of your Backup Reporting Server(WEB)" type="integer" default="9080" required="true">
						<description>Port</description>
					</input>
				</if>
				<input name="JRE_HOME" title="JRE Home" type="string" default="" required="true">
					<description>Please enter the Java path for Reporting Server</description>
				</input>
				<input name="RSDB" title="Reporting Server store in database?" type="selectOne" default="false" required="true">
					<description>Reporting Server store in database?</description>
					<selection>
						<option name="false" value="false"/>
						<option name="true" value="true"/>
					</selection>
				</input>
				<input name="GAX_PLUGIN" title="GAX Plugin installation required" type="selectOne" default="true" required="true">
					<description>GAX Plugin installation required</description>
					<selection>
						<option name="false" value="false"/>
						<option name="true" value="true"/>
					</selection>
				</input>
				<input name="LRMGR" title="Licensing Reporting Manager is Installed?" type="selectOne" default="false" required="true">
					<description>Do you want to complete the Licensing Reporting Manager installation?</description>
					<selection>
						<option name="false" value="false"/>
						<option name="true" value="true"/>
					</selection>
				</input>
			</if>
		</dialog>
		<dialog step="Database Informations">
			<if cond="GVPRS == 'false'">
				<input name="GVPRS_CONFIRM" title="GVP Reporting Server not required. Press Next." type="boolean" default="true" required="false" readonly="true">
					<description>GVP Reporting Server not required.</description>
				</input>
			</if>
			<if cond="GVPRS == 'true'">
				<if cond="RSDB == 'false'">
					<input name="RSNODB_CONFIRM" title="Reporting Server operates without database" type="boolean" default="true" required="false" readonly="true">
						<description>Reporting Server operates without database</description>
					</input>
				</if>
				<if cond="RSDB == 'true'">
					<input name="ENGINE" title="DataBase Engine" type="selectOne" default="MSSQL" required="true">
						<description>Default Database type for the whole deployment</description>
						<selection>
							<option name="oracle" value="Oracle"/>
							<option name="oracle enterprise" value="Oracle_Enterprise"/>
							<option name="mssql" value="MSSQL"/>
							<option name="mssql enterprise" value="MSSQL_Enterprise"/>
						</selection>
					</input>
					<input name="ENGINE_PORT" title="DataBase Engine Port (Default 1521 Oracle, 1433 MSSQL)" type="selectOne" default="default" required="true">
						<description>Default Database type for the whole deployment</description>
						<selection>
							<option name="default" value="default"/>
							<option name="custom" value="custom"/>
						</selection>
					</input>
					<input name="ENGINE_HOST" title="DataBase Engine Host in Configuration" type="selectOne" default="true" required="true">
						<description>Default Database type for the whole deployment</description>
						<selection>
							<option name="false" value="false"/>
							<option name="true" value="true"/>
						</selection>
					</input>
				</if>
			</if>
		</dialog>
		<dialog step="GVP Reporting Server Database Credential">
			<if cond="GVPRS == 'false'">
				<input name="GVPRS_CONFIRM" title="GVP Reporting Server not required. Press Next." type="boolean" default="true" required="false" readonly="true">
					<description>GVP Reporting Server not required.</description>
				</input>
			</if>
			<if cond="GVPRS == 'true'">
				<if cond="RSDB == 'false'">
					<input name="RSNODB_CONFIRM" title="Reporting Server operates without database" type="boolean" default="true" required="false" readonly="true">
						<description>Reporting Server operates without database</description>
					</input>
				</if>
				<if cond="RSDB == 'true'">
					<if cond="ENGINE_HOST == 'true'">			
						<input name="RSDB_SERVER" title="Database Server Name(RS)" type="selectOne" default="W2008-PS" required="true">
							<description>Name of DBMS where LOG Databases is stored</description>
							<objectselect>
								<filter value="CfgHost" name="type"/>
							</objectselect>
						</input>
					</if>
					<if cond="ENGINE_HOST == 'false'">
						<input name="RSDB_SERVER" title="Database Server Name(RS)" type="string" default="W2008-PS" required="true">
							<description>Name of DBMS where LOG Databases is stored</description>
						</input>
					</if>
					<if cond="ENGINE_PORT == 'custom'">
						<input name="RSDB_PORT" title="Database Server Port(RS)" type="integer" default="" required="true">
							<description>DBMS Port</description>
						</input>
					</if>
					<input name="RSDB_NAME" title="Database Name (Oracle SID)" type="string" default="RSDB" required="true">
						<description>Name of your Log Database</description>
					</input>
					<input name="RSDB_USER" title="DataBase User Name" type="string" default="rsadmin" required="true">
						<description>Database User Name</description>
					</input>
					<input name="RSDB_PWD" title="DataBase User Password" type="password" default="rsadmin" required="true">
						<description>Database User password</description>
					</input>
				</if>
			</if>
		</dialog>
		<dialog step="GVP Reporting Server LRM">
			<if cond="GVPRS == 'false'">
				<input name="GVPRS_CONFIRM" title="GVP Reporting Server not required. Press Next." type="boolean" default="true" required="false" readonly="true">
					<description>GVP Reporting Server not required.</description>
				</input>
			</if>
			<if cond="GVPRS == 'true'">
				<if cond="LRMGR == 'false'">
					<input name="GVPRS_CONFIRM" title="License Reporting Manage not present. Press Next." type="boolean" default="true" required="false" readonly="true">
						<description>License Reporting Manager not required.</description>
					</input>
				</if>
				<if cond="LRMGR == 'true'">
					<input name="LRM_APPNAME" title="LRM application name" type="selectOne" default="LRM" required="true">
						<description>Please select your LRM Application</description>
						<objectselect>
							<filter value="CfgApplication" name="type"/>
						</objectselect>
					</input>
				</if>
			</if>
		</dialog>
		<dialog step="Log Settings">
			<if cond="Logging == 'false'">
				<input name="LOGGING_CONFIRM" title="Log Setting will not configured (standard setting will be used)" type="boolean" default="true" required="false" readonly="true">
					<description>Log Setting will not configured (standard setting will be used). Go back to the first dialog page to change.</description>
				</input>
			</if>
			<if cond="Logging == 'true'">
				<input name="SEG_FILE" title="Segmentation File, file size limit(es. 10000 or 10 MB or 10 hr)" type="integer" default="10000" required="true">
					<description>Please select the log expiration setting</description>
				</input>
				<input name="EXP_FILE" title="Expiration File, number of file(es. 10, max 1000), number of day (es. 3 day, max 10 day)" type="integer" default="10" required="true">
					<description>Please select the log expiration setting</description>
				</input>
				<input name="LOG_LEVEL" title="Set log output level (all, standard, interaction, debug, trace, none" type="selectOne" default="all" required="true">
					<description>Please insert Logging Level</description>
					<selection>
						<option name="all" value="all"/>
						<option name="debug" value="debug"/>
						<option name="interaction" value="interaction"/>
						<option name="standard" value="standard"/>
						<option name="trace" value="trace"/>
						<option name="none" value="none"/>
					</selection>
				</input>
				<input name="NETWORK_LOG_LEVEL" title="Set log output level stored in database" type="selectOne" default="standard" required="true">
					<description>Please insert Network Logging Level</description>
					<selection>
						<option name="interaction" value="interaction"/>
						<option name="standard" value="standard"/>
						<option name="trace" value="trace"/>
					</selection>
				</input>
			</if>
		</dialog>
		<dialog step="ADDP Settings">
			<if cond="ADDP == 'false'">
				<input name="ADDP_CONFIRM" title="Addp setting will not configured (standard setting will be used)" type="boolean" default="true" required="false" readonly="true">
					<description>Addp Setting will not configured (standard setting will be used). Go back to the first dialog page to change.</description>
				</input>
			</if>
			<if cond="ADDP == 'true'">
				<input name="ADDP_PROTO" title="Select ADDP Protocol" type="selectOne" default="addp" required="true">
					<description>Please insert ADDP Protocol</description>
					<selection>
						<option name="addp" value="addp"/>
						<option name="simple" value="simple"/>
					</selection>
				</input>
				<input name="ADDP_LOCAL" title="ADDP Local Timeout" type="integer" default="60" required="true">
					<description>Please insert local timeout value</description>
				</input>
				<input name="ADDP_REMOTE" title="ADDP Remote Timeout" type="integer" default="90" required="true">
					<description>Please insert remote timeout value</description>
				</input>
				<input name="ADDP_TRACE" title="Set ADDP Trace Mode" type="selectOne" default="CFGTMNone" required="true">
					<description>Please insert ADDP Trace Level</description>
					<selection>
						<option name="Trace Is Turned Off" value="CFGTMNone"/>
						<option name="Trace On Both Sides" value="CFGTMBoth"/>
						<option name="Trace On Client Sides" value="CFGTMLocal"/>
						<option name="Trace On Server Sides" value="CFGTMRemote"/>
					</selection>
				</input>
				<input name="ADDP_HOST_LOCAL" title="Host ADDP Local Timeout" type="integer" default="0" required="true">
					<description>Please insert local timeout valuefor Host management</description>
				</input>
				<input name="ADDP_HOST_REMOTE" title="Host ADDP Remote Timeout" type="integer" default="9" required="true">
					<description>Please insert remote timeout value for Host management</description>
				</input>
			</if>
		</dialog>
		<execution>
			<!--pre-installation steps : check ALL hosts GDA before the installation -->
			<os:verifyGDA host="${SIP_SERV_HOST.name}"/>
			<os:verifyGDA host="${ROUTING_STATSERV_HOST.name}"/>
			<os:verifyGDA host="${URS_HOST.name}"/>
			<os:verifyGDA host="${ORS_HOST.name}"/>
			<os:verifyGDA host="${MCP_HOST.name}"/>
			<os:verifyGDA host="${RESMAN_HOST.name}"/>

			<if cond="PROXYCS == 'newcsp'">	
				<os:verifyGDA host="${CSPROXY_HOST.name}"/>
			</if>
			<if cond="Licensing == 'true'">	
				<os:verifyGDA host="${LICENSE_HOST.name}"/>
			</if>
			<if cond="MESSSRV == 'true'">	
				<os:verifyGDA host="${MESS_SERV_HOST.name}"/>	
			</if>
			<if cond="GVPRS == 'true'">	
				<os:verifyGDA host="${RS_HOST.name}"/>
			</if>

			<if cond="HA == 'true'">	
				<os:verifyGDA host="${SIP_SERV_BK_HOST.name}"/>
				<os:verifyGDA host="${ROUTING_STATSERV_BK_HOST.name}"/>
				<os:verifyGDA host="${URS_BK_HOST.name}"/>
				<os:verifyGDA host="${ORS_BK_HOST.name}"/>
				<os:verifyGDA host="${MCP_BK_HOST.name}"/>
				<os:verifyGDA host="${RESMAN_BK_HOST.name}"/>

				<if cond="PROXYCS == 'newcsp'">	
					<os:verifyGDA host="${CSPROXY_BK_HOST.name}"/>
				</if>
				<if cond="Licensing == 'true'">	
					<os:verifyGDA host="${LICENSE_BK_HOST.name}"/>
				</if>
				<if cond="MESSSRV == 'true'">	
					<os:verifyGDA host="${MESS_SERV_BK_HOST.name}"/>
				</if>
				<if cond="GVPRS == 'true'">	
					<os:verifyGDA host="${RS_BK_HOST.name}"/>
				</if>
			</if>
			<!--pre-installation steps : check ALL hosts GDA before the installation END -->
			<!-- utility functions -->
			<script>
				function searchAndReplaceIPAddress (needle, haystack, replaceWith)
				{
					var match = /-host ([0-9]{1,3}\.){3}[0-9]{1,3}/; 
					log('match= '  + match );

					if (match.exec(haystack) != null) {
						return haystack.replace(match, replaceWith);
					}
					return haystack;
				}
			</script>

			<!-- Variables initialization -->
			<script>
				var JAVA_PATH;
				var PROCESS_NAME = '';
				var OSTYPE = '';
				
				var ENV_TENANT_DBID = 1;
				ENV_TENANT_DBID = ENV_TENANT_DBID.toString();	
				
				var INSTALL_BASE_PATH, FILE_SEPARATOR, LOGS_BASE_PATH, REPORTING_PATH ;
				var INSTALL_BASE_PATH_WIN = 'E:\\SPD\\GCTI\\';
				var LOGS_BASE_PATH_WIN = 'E:\\SPD\\Logs\\';
				var INSTALL_BASE_PATH_WIN = WIN_INSTALL_BASE_PATH_WIN;
				var LOGS_BASE_PATH_WIN = WIN_LOG_BASE_PATH_WIN;
				var FILE_SEPARATOR_WIN = '\\';
				var FILE_SEPARATOR_LINUX = '/';
				var INSTALL_BASE_PATH_LINUX = '/home/genesys/GCTI/'; 
				var LOGS_BASE_PATH_LINUX = '/home/genesys/Logs/';
				var INSTALL_BASE_PATH_LINUX = LINUX_INSTALL_BASE_PATH_WIN; 
				var LOGS_BASE_PATH_LINUX = LINUX_LOG_BASE_PATH_WIN;

				var CMD_STRING = '';
				var CMD_STRING_HA = '';				
				var CMD_STRING_LOG = '';
				var COMMAND_LINE_ARGS = '';

				var PR_VIP_UP = '';
				var PR_VIP_DOWN = ''; 
				var BK_VIP_UP = '';
				var BK_VIP_DOWN = ''; 

				var LICENSE_USE = 'Required';
				var LICENSE_TYPE = 'LicenseManager';

				var GAX_SERV = GAX_APPNAME.name;
				log('GAX_SERV = '  + GAX_SERV);

				var SCS = SCS_APPNAME.name;
				log('SCS = '  + SCS);

				var HOSTARRAY = new Array(SIP_SERV_HOST,ROUTING_STATSERV_HOST,URS_HOST,ORS_HOST,MCP_HOST,RESMAN_HOST);
		
				var EXT_AUTH = 'NONE';
				var RUN_TIME = 'Proxy';

				var SIP_SERV = SIP_SERV_APPNAME;
				var SIP_SERV_APPPORT = SIP_SERV_PORT;
				var SIP_SERV_TPL = SIP_SERV_TEMPLATE;
				var SIP_SERV_APPPORT = SIP_SERV_APPPORT.toString();
				var SIP_SERV_MANPORT= parseInt(SIP_SERV_APPPORT,10)+2 ;
				var SIP_SERV_HAPORT= parseInt(SIP_SERV_APPPORT,10)+1 ;
				var SIP_SERV_APPPORT = SIP_SERV_APPPORT.toString() ;
				var SIP_SERV_MANPORT = SIP_SERV_MANPORT.toString();				
				var SIP_SERV_HAPORT = SIP_SERV_HAPORT.toString();				

				var ROUTING_STATSERV = ROUTING_STATSERV_APPNAME;
				var ROUTING_STATSERV_TPL = ROUTING_STATSERV_TEMPLATE;
				var ROUTING_STATSERV_APPPORT = ROUTING_STATSERV_PORT;
				var ROUTING_STATSERV_MANPORT= parseInt(ROUTING_STATSERV_APPPORT,10)+2 ;
				var ROUTING_STATSERV_APPPORT = ROUTING_STATSERV_APPPORT.toString() ;
				var ROUTING_STATSERV_MANPORT = ROUTING_STATSERV_MANPORT.toString();				
				var ROUTING_STATSERV_TRANS_PORT = parseInt(ROUTING_STATSERV_APPPORT,10)+6 ;
				var ROUTING_STATSERV_TRANS_PORT = ROUTING_STATSERV_TRANS_PORT.toString();
				
				var URS = URS_APPNAME;
				var URS_TPL = URS_TEMPLATE;				
				var URS_APPPORT = URS_PORT;
				var URS_HTTPPORT= parseInt(URS_APPPORT,10)+1 ;
				var URS_MANPORT= parseInt(URS_APPPORT,10)+2 ;
				var URS_APPPORT = URS_APPPORT.toString() ;
				var URS_HTTPPORT = URS_HTTPPORT.toString() ;
				var URS_MANPORT = URS_MANPORT.toString();
				var URS_TRANS_PORT = parseInt(URS_APPPORT,10)+6;					
				var URS_TRANS_PORT = URS_TRANS_PORT.toString(); 
				
				var ORS = ORS_APPNAME;
				var ORS_TPL = ORS_TEMPLATE;				
				var ORS_APPPORT = ORS_PORT ;
				var ORS_MANPORT= parseInt(ORS_APPPORT,10)+2 ;
				var ORS_APPPORT = ORS_APPPORT.toString() ;
				var ORS_MANPORT = ORS_MANPORT.toString();				
				var ORS_TRANS_PORT = parseInt(ORS_APPPORT,10)+6;					
				var ORS_TRANS_PORT = ORS_TRANS_PORT.toString();
				
				var MCP = MCP_APPNAME;
				var MCP_TPL = MCP_TEMPLATE;				
				var MCP_APPPORT = MCP_PORT;
				var MCP_MANPORT= parseInt(MCP_APPPORT,10)+2 ;
				var MCP_APPPORT = MCP_APPPORT.toString() ;
				var MCP_MANPORT = MCP_MANPORT.toString();				
				var MCP_TRANS_PORT = parseInt(MCP_APPPORT,10)+6;					
				var MCP_TRANS_PORT = MCP_TRANS_PORT.toString();

				var MCP_HTTP_PROXY = 'NotSelected';
				var MCP_HTTP_PROXY_HOST = 'localhost';
				var MCP_HTTP_PROXY_PORT = '3128';
				var	MCP_SEC_1 = 'IPCommon';
				var	MCP_SEC_1_OPT_1 = 'InstallMode';
				var	MCP_SEC_2 = 'IPConfiguration';
				
				var RESMAN = RESMAN_APPNAME;
				var RESMAN_TPL = RESMAN_TEMPLATE;
				var RESMAN_APPPORT = RESMAN_PORT;
				var RESMAN_MANPORT= parseInt(RESMAN_APPPORT,10)+2 ;
				var RESMAN_APPPORT = RESMAN_APPPORT.toString() ;
				var RESMAN_MANPORT = RESMAN_MANPORT.toString();				
				var RESMAN_TRANS_PORT = parseInt(RESMAN_APPPORT,10)+6;					
				var RESMAN_TRANS_PORT = RESMAN_TRANS_PORT.toString();

			</script>
			<if cond="InteractionWorkspace == 'false'">
				<script>
					var IWS = IWS_APPNAME;
				</script>
			</if>
			<if cond="InteractionWorkspace == 'true'">
				<script>
					var IWS = IWS_APPNAME;
					var IWS_TPL = IWS_TEMPLATE;
				</script>
			</if>
			
			<if cond="GVPRS == 'true'">	
				<script>
					var RS = RS_APPNAME;
					var RS_TPL = RS_TEMPLATE;
					var RS_APPPORT = RS_PORT;
					var RS_MANPORT= parseInt(RS_APPPORT,10)+2 ;
					var RS_APPPORT = RS_APPPORT.toString() ;
					var RS_MANPORT = RS_MANPORT.toString();				
					var RS_TRANS_PORT = parseInt(RS_APPPORT,10)+6;					
					var RS_TRANS_PORT = RS_TRANS_PORT.toString();

					var	RS_SEC_1 = 'IPConfiguration';
					var	RS_SEC_1_OPT_1 = 'WebSrvcPort';

					HOSTARRAY[HOSTARRAY.length] = RS_HOST;
				</script>
				<if cond="RSDB == 'true'">
					<if cond="ENGINE_PORT == 'default'">
						<script>
							if(( ENGINE.toString() == 'Oracle') || ( ENGINE.toString() == 'Oracle_Enterprise')){
								RSDB_PORT = '1521';
							} else {
								RSDB_PORT = '1433';
							}
						</script>
					</if>
					<if cond="ENGINE_HOST == 'true'">
						<script>
							var DB_SERVER = RSDB_SERVER.name;
						</script>
					</if>
					<if cond="ENGINE_HOST == 'false'">
						<script>
							var DB_SERVER = RSDB_SERVER;
						</script>
					</if>
					<script>
						var RS_ENGINE = ENGINE;
						var RS_DBNAME = RSDB_NAME;
						var RS_DBHOST =DB_SERVER;
						var RS_DBPORT =RSDB_PORT;
						var RS_DBUSER =RSDB_USER;
						var RS_DBUSERPWD =RSDB_PWD;
					</script>
				</if>
				<if cond="RSDB == 'false'">
					<script>
						var RS_ENGINE ='No_database';
						var RS_DBNAME ='';
						var RS_DBHOST ='';
						var RS_DBPORT ='0';
						var RS_DBUSER ='';
						var RS_DBUSERPWD ='';
					</script>
				</if>
			</if>

			<if cond="HA == 'true'">
				<script>
					var	GAX_BK_SERV = GAX_BK_APPNAME.name;
					log('GAX_BK_SERV = '  + GAX_BK_SERV);

					var CFGSERV_BK_DBID = CFGSERV_APPNAME.backupserverdbid;
					
					var HOSTARRAY_BK = new Array(SIP_SERV_BK_HOST,ROUTING_STATSERV_BK_HOST,URS_BK_HOST,ORS_BK_HOST,MCP_BK_HOST,RESMAN_BK_HOST);

					var SIP_SERVER_PR_VIP_UP = SIPP_SCRIPT_UP;
					var SIP_SERVER_PR_VIP_DOWN = SIPP_SCRIPT_DOWN;
					var SIP_SERVER_BK_VIP_UP = SIPB_SCRIPT_UP;
					var SIP_SERVER_BK_VIP_DOWN = SIPB_SCRIPT_DOWN;
					
					var SIP_SERV_BK = SIP_SERV_BK_APPNAME;
					var SIP_SERV_BK_APPPORT = SIP_SERV_BK_PORT;
					var SIP_SERV_BK_MANPORT= parseInt(SIP_SERV_BK_APPPORT,10)+2 ;
					var SIP_SERV_BK_HAPORT= parseInt(SIP_SERV_BK_APPPORT,10)+1 ;
					var SIP_SERV_BK_APPPORT = SIP_SERV_BK_APPPORT.toString() ;
					var SIP_SERV_BK_MANPORT = SIP_SERV_BK_MANPORT.toString();				
					var SIP_SERV_BK_HAPORT= SIP_SERV_BK_HAPORT.toString() ;
					
					var ROUTING_STATSERV_BK = ROUTING_STATSERV_BK_APPNAME;
					var ROUTING_STATSERV_BK_APPPORT = ROUTING_STATSERV_BK_PORT;
					var ROUTING_STATSERV_BK_MANPORT= parseInt(ROUTING_STATSERV_BK_APPPORT,10)+2 ;
					var ROUTING_STATSERV_BK_APPPORT = ROUTING_STATSERV_BK_APPPORT.toString() ;
					var ROUTING_STATSERV_BK_MANPORT = ROUTING_STATSERV_BK_MANPORT.toString();				
					var ROUTING_STATSERV_BK_TRANS_PORT = parseInt(ROUTING_STATSERV_BK_APPPORT,10)+6 ;
					var ROUTING_STATSERV_BK_TRANS_PORT = ROUTING_STATSERV_BK_TRANS_PORT.toString();

					var URS_BK = URS_BK_APPNAME;
					var URS_BK_APPPORT = URS_BK_PORT;
					var URS_BK_HTTPPORT= parseInt(URS_BK_APPPORT,10)+1 ;
					var URS_BK_MANPORT= parseInt(URS_BK_APPPORT,10)+2 ;
					var URS_BK_APPPORT = URS_BK_APPPORT.toString() ;
					var URS_BK_HTTPPORT = URS_BK_HTTPPORT.toString() ;
					var URS_BK_MANPORT = URS_BK_MANPORT.toString();
					var URS_BK_TRANS_PORT = parseInt(URS_BK_APPPORT,10)+6;					
					var URS_BK_TRANS_PORT = URS_BK_TRANS_PORT.toString();
					
					var ORS_BK = ORS_BK_APPNAME;
					var ORS_BK_APPPORT = ORS_BK_PORT ;
					var ORS_BK_MANPORT= parseInt(ORS_BK_APPPORT,10)+2 ;
					var ORS_BK_APPPORT = ORS_BK_APPPORT.toString() ;
					var ORS_BK_MANPORT = ORS_BK_MANPORT.toString();				
					var ORS_BK_TRANS_PORT = parseInt(ORS_BK_APPPORT,10)+6;					
					var ORS_BK_TRANS_PORT = ORS_BK_TRANS_PORT.toString();

					var MCP_BK = MCP_BK_APPNAME;
					var MCP_BK_APPPORT = MCP_BK_PORT;
					var MCP_BK_MANPORT= parseInt(MCP_BK_APPPORT,10)+2 ;
					var MCP_BK_APPPORT = MCP_BK_APPPORT.toString() ;
					var MCP_BK_MANPORT = MCP_BK_MANPORT.toString();				
					var MCP_BK_TRANS_PORT = parseInt(MCP_BK_APPPORT,10)+6;					
					var MCP_BK_TRANS_PORT = MCP_BK_TRANS_PORT.toString();

					var RESMAN_BK = RESMAN_BK_APPNAME;
					var RESMAN_BK_APPPORT = RESMAN_BK_PORT;
					var RESMAN_BK_MANPORT= parseInt(RESMAN_BK_APPPORT,10)+2 ;
					var RESMAN_BK_APPPORT = RESMAN_BK_APPPORT.toString() ;
					var RESMAN_BK_MANPORT = RESMAN_BK_MANPORT.toString();				
					var RESMAN_BK_TRANS_PORT = parseInt(RESMAN_BK_APPPORT,10)+6;					
					var RESMAN_BK_TRANS_PORT = RESMAN_TRANS_PORT.toString();

					var RESMAN_HAPORT = '9801';
				</script>
				<if cond="GVPRS == 'true'">	
					<script>
						var RS_BK = RS_BK_APPNAME;
						var RS_BK_APPPORT = RS_BK_PORT;
						var RS_BK_MANPORT= parseInt(RS_BK_APPPORT,10)+2 ;
						var RS_BK_APPPORT = RS_BK_APPPORT.toString() ;
						var RS_BK_MANPORT = RS_BK_MANPORT.toString();				
						var RS_BK_TRANS_PORT = parseInt(RS_BK_APPPORT,10)+6;					
						var RS_BK_TRANS_PORT = RS_TRANS_PORT.toString();

						HOSTARRAY_BK[HOSTARRAY_BK.length] = RS_BK_HOST;
					</script>
				</if>
			</if>
			<if cond="MCP_NIC_ENABLED == 'false'">
				<script>
					var MCP_TRANSPORT = MCP_HOST.ipaddress + ':' + MCP_SIP;
					var MCP_TRANSPORT_TLS = MCP_HOST.ipaddress + ':0';
				</script>
				<if cond="HA == 'true'">	
					<script>
						var MCP_BK_TRANSPORT = MCP_BK_HOST.ipaddress + ':' + MCP_SIP;
						var MCP_BK_TRANSPORT_TLS = MCP_HOST.ipaddress + ':0';
					</script>
				</if>
			</if>
			<if cond="MCP_NIC_ENABLED == 'true'">
				<script>
					var MCP_TRANSPORT = MCP_SIP_IP + ':' + MCP_SIP;
					var MCP_TRANSPORT_TLS = MCP_SIP_IP + ':0';
				</script>
				<if cond="HA == 'true'">	
					<script>
						var MCP_BK_TRANSPORT = MCP_BK_SIP_IP + ':' + MCP_SIP;
						var MCP_BK_TRANSPORT_TLS = MCP_BK_SIP_IP + ':0';
					</script>
				</if>
			</if>

			<if cond="RM_NIC_ENABLED == 'false'">
				<script>
					var RMP_TRANSPORT = RESMAN_HOST.ipaddress + ':' + RM_PROXY_SIP;
					var RMR_TRANSPORT = RESMAN_HOST.ipaddress + ':' + RM_REGIS_SIP;
					var RMM_TRANSPORT = RESMAN_HOST.ipaddress + ':' + RM_MONIT_SIP;
					var RMS_TRANSPORT = RESMAN_HOST.ipaddress + ':' + RM_SUBSC_SIP;
					var RM_ROUTEIP = RESMAN_HOST.ipaddress;
				</script>
				<if cond="HA == 'true'">	
					<script>
						var RMP_BK_TRANSPORT = RESMAN_BK_HOST.ipaddress + ':' + RM_PROXY_SIP;
						var RMR_BK_TRANSPORT = RESMAN_BK_HOST.ipaddress + ':' + RM_REGIS_SIP;
						var RMM_BK_TRANSPORT = RESMAN_BK_HOST.ipaddress + ':' + RM_MONIT_SIP;
						var RMS_BK_TRANSPORT = RESMAN_BK_HOST.ipaddress + ':' + RM_SUBSC_SIP;
						var RM_BK_ROUTEIP = RESMAN_BK_HOST.ipaddress;
					</script>
				</if>
			</if>
			<if cond="RM_NIC_ENABLED == 'true'">
				<script>
					var RMP_TRANSPORT = RM_SIP_IP + ':' + RM_PROXY_SIP;
					var RMR_TRANSPORT = RM_SIP_IP + ':' + RM_REGIS_SIP;
					var RMM_TRANSPORT = RM_SIP_IP + ':' + RM_MONIT_SIP;
					var RMS_TRANSPORT = RM_SIP_IP + ':' + RM_SUBSC_SIP;
					var RM_ROUTEIP = RM_SIP_IP;
				</script>
				<if cond="HA == 'true'">	
					<script>
						var RMP_BK_TRANSPORT = RM_BK_SIP_IP + ':' + RM_PROXY_SIP;
						var RMR_BK_TRANSPORT = RM_BK_SIP_IP + ':' + RM_REGIS_SIP;
						var RMM_BK_TRANSPORT = RM_BK_SIP_IP + ':' + RM_MONIT_SIP;
						var RMS_BK_TRANSPORT = RM_BK_SIP_IP + ':' + RM_SUBSC_SIP;
						var RM_BK_ROUTEIP = RM_BK_SIP_IP;
					</script>
				</if>
			</if>

			<script>
				var MCP_STATICROUTELIST	= RM_ROUTEIP;				
				var MCPROUTESET = '&lt;sip:' + RMP_TRANSPORT + ';lr>';
			</script>

			<if cond="HA == 'true'">	
				<script>
					var MCP_STATICROUTELIST	= RM_ROUTEIP + ',' + RM_BK_ROUTEIP;				
					var MCP_BK_ROUTESET = '&lt;sip:' + RMP_BK_TRANSPORT + ';lr>';
					var MCP_BK_STATICROUTELIST = RM_ROUTEIP + ',' + RM_BK_ROUTEIP;
				</script>
			</if>
				
			<if cond="Licensing == 'true'">	
				<script>
					var LICENSE_1 = LICENSE_APPNAME;
					var LICENSE_PRIM = LICENSE_PORT + '@' + LICENSE_HOST.name;
					var LICENSE_STRING = LICENSE_PRIM;
				</script>
				<if cond="HA == 'true'">
					<script>
						var LICENSE_2 = LICENSE_BK_APPNAME;
						var LICENSE_BACK = LICENSE_BK_PORT + '@' + LICENSE_BK_HOST.name;					
						if (/CFGWin/.test(LICENSE_HOST.ostype)) {
							LICENSE_STRING = LICENSE_PRIM + ';' + LICENSE_BACK;
						} else {
							LICENSE_STRING = LICENSE_PRIM + ':' + LICENSE_BACK;
						}
					</script>
				</if>
			</if>

			<if cond="Licensing == 'false'">	
				<script>
					var LICENSE_PRIM = LICENSE_PORT + '@' + LICENSE_HOST.name;
					var LICENSE_STRING = LICENSE_PRIM;
				</script>
				<if cond="HA == 'true'">
					<script>
						var LICENSE_BACK = LICENSE_BK_PORT + '@' + LICENSE_BK_HOST.name;					
						if (/CFGWin/.test(LICENSE_HOST.ostype)) {
							LICENSE_STRING = LICENSE_PRIM + ';' + LICENSE_BACK;
						} else {
							LICENSE_STRING = LICENSE_PRIM + ':' + LICENSE_BACK;
						}
					</script>
				</if>
			</if>

			<if cond="PROXYCS == 'newcsp'">	
				<script>
					log('CSPROXY TRUE '  + CSPROXY_APPNAME.NAME );
					var CSPROXY = CSPROXY_APPNAME;
					var CSPROXY_TPL = CSPROXY_TEMPLATE;
					var CSPROXY_APPPORT = CSPROXY_PORT;
					var CSPROXY_MANPORT= parseInt(CSPROXY_APPPORT,10)+1;
					var CSPROXY_APPPORT = CSPROXY_APPPORT.toString() ;
					var CSPROXY_MANPORT = CSPROXY_MANPORT.toString();
				</script>
				<if cond="HA == 'true'">
					<script>
						log('CSPROXY HA TRUE '  + CSPROXY_BK_APPNAME.NAME );
						var CSPROXY_BK = CSPROXY_BK_APPNAME;
						var CSPROXY_BK_APPPORT = CSPROXY_BK_PORT;
						var CSPROXY_BK_MANPORT= parseInt(CSPROXY_BK_APPPORT,10)+1;
						var CSPROXY_BK_APPPORT = CSPROXY_BK_APPPORT.toString() ;
						var CSPROXY_BK_MANPORT = CSPROXY_BK_MANPORT.toString();
					</script>
				</if>	
			</if>
			<if cond="PROXYCS == 'exicsp'">	
				<script>
					log('CSPROXY TRUE '  + CSPROXY_APPNAME.NAME );
					var CSPROXY = CSPROXY_APPNAME;
				</script>
			</if>
			<if cond="MESSSRV == 'true'">
				<script>
					var MESS_SERV = MESS_SERV_APPNAME;
					var MESS_SERV_TPL = MESS_SERV_TEMPLATE;
					var MESS_SERV_APPPORT = MESS_SERV_PORT;
					var MESS_SERV_APPPORT = MESS_SERV_APPPORT.toString() ;
					var DAP_LOG= DAP_LOG_APPNAME;			
				</script>
			<if cond="HA == 'true'">
				<script>
					var MESS_SERV_BK = MESS_SERV_BK_APPNAME;
					var MESS_SERV_BK_APPPORT = MESS_SERV_BK_PORT;
					var MESS_SERV_BK_APPPORT = MESS_SERV_BK_APPPORT.toString() ;
				</script>
			</if>	
			</if>
			<if cond="MESSSRV == 'false'">
				<script>
					var MESS_SERV = MESS_SERV_APPNAME;
				</script>
			</if>	

			<if cond="CLIENT_SIDE == 'false'">
				<script>
					var ROUTING_STATSERV_TRANS_PORT = '' ;
					var ROUTING_STATSERV_TRANS_HOST = '' ;
					var URS_TRANS_PORT = '';					
					var URS_TRANS_HOST = '';					
					var MCP_TRANS_PORT = '' ;
					var MCP_TRANS_HOST = '' ;
					var RESMAN_TRANS_PORT = '' ;
					var RESMAN_TRANS_HOST = '' ;					
				</script>
				<if cond="GVPRS == 'true'">	
					<script>
						var RS_TRANS_PORT = '' ;
						var RS_TRANS_HOST = '' ;					
					</script>
				</if>
				<if cond="HA == 'true'">
					<script>
						var ROUTING_STATSERV_BK_TRANS_PORT = '' ;
						var ROUTING_STATSERV_BK_TRANS_HOST = '' ;
						var URS_BK_TRANS_PORT = '';					
						var URS_BK_TRANS_HOST = '';					
						var MCP_BK_TRANS_PORT = '' ;
						var MCP_BK_TRANS_HOST = '' ;
						var RESMAN_BK_TRANS_PORT = '' ;
						var RESMAN_BK_TRANS_HOST = '' ;					
					</script>
					<if cond="GVPRS == 'true'">	
						<script>
							var RS_BK_TRANS_PORT = '' ;
							var RS_BK_TRANS_HOST = '' ;					
						</script>
					</if>
				</if>	
				<if cond="ORS_RESTful == 'false'">
					<if cond="CLIENT_SIDE == 'false'">
						<script>
							var ORS_TRANS_PORT = '' ;
							var ORS_TRANS_HOST = '' ;
						</script>
						<if cond="HA == 'true'">
							<script>
								var ORS_BK_TRANS_PORT = '' ;
								var ORS_BK_TRANS_HOST = '' ;
							</script>
						</if>	
					</if>
				</if>
			</if>

			<if cond="ENABLE_JAVA == 'false'">
				<script>
					var JVM_PATH = '';
					var ESERVICES_JAVA = 'false';
					var OUTBOUND_JAVA = 'false';
					var VOICECB_JAVA = 'false';
					var IWD_JAVA = 'false';
				</script>
			</if>	
			<if cond="ENABLE_JAVA == 'true'">
				<script>
					var JVM_PATH = PATH_JVM;
					var ESERVICES_JAVA = JAVA_ESERVICES;
					var OUTBOUND_JAVA = JAVA_OCS;
					var VOICECB_JAVA = JAVA_VCB;
					var IWD_JAVA = JAVA_IWD;
				</script>
			</if>	
			<if cond="ADDP == 'false'">
				<script>
					var ADDP_PROTOCOL = 'addp' ;
					var ADDP_LOCAL_TIME = '30';
					var ADDP_REMOTE_TIME = '60';
					var ADDP_TRACE_LEVEL = 'CFGTMBoth';
					var ADDP_HOST_REMOTE_TIME = '0';
					var ADDP_HOST_LOCAL_TIME = '9';
				</script>
			</if>
			<if cond="ADDP == 'true'">
				<script>
					var ADDP_PROTOCOL = ADDP_PROTO;
					var ADDP_LOCAL_TIME = ADDP_LOCAL;
					var ADDP_LOCAL_TIME = ADDP_LOCAL_TIME.toString();
					var ADDP_REMOTE_TIME = ADDP_REMOTE;
					var ADDP_REMOTE_TIME = ADDP_REMOTE_TIME.toString();
					var ADDP_TRACE_LEVEL = ADDP_TRACE;
					var ADDP_HOST_REMOTE_TIME = ADDP_HOST_REMOTE;
					var ADDP_HOST_REMOTE_TIME = ADDP_HOST_REMOTE_TIME.toString();
					var ADDP_HOST_LOCAL_TIME = ADDP_HOST_LOCAL;
					var ADDP_HOST_LOCAL_TIME = ADDP_HOST_LOCAL_TIME.toString();
				</script>
			</if>
			<if cond="Logging == 'true'">
				<script>
					var LOGGING_BASE_PATH = '';
					var SEGMENT_FILE = SEG_FILE; 
					var EXPIRE_FILE = EXP_FILE;
					var LOGGING_LEVEL = LOG_LEVEL;
					var NETWORK_LEVEL = NETWORK_LOG_LEVEL;
					var NETWORK_VALUE = 'network';
				</script>
			</if>
			<if cond="Logging == 'false'">
				<script>
					var LOGGING_BASE_PATH = ''; 
					var SEGMENT_FILE = '10000';
					var EXPIRE_FILE = '10';
					var LOGGING_LEVEL = 'all';
					var NETWORK_LEVEL = 'standard';
					var NETWORK_VALUE = 'network';
				</script>
			</if>

			<cfg:readObject name="CONFSERV_HOST" result="CONFSERV_HOST" type="CfgHost">
				<query name="dbid" value="${CFGSERV_APPNAME.hostdbid}" />
			</cfg:readObject>
			<script>
				log('CFGSERV HOSTDBID= '  + CFGSERV_APPNAME.hostdbid );
				var CFGSERV = CFGSERV_APPNAME;
				var CFGSERV_APPPORT = CFGSERV_APPNAME.port;
				log('CFGSERV = '  + CFGSERV.name + ' ; CFGSERV_APPPORT = '  + CFGSERV_APPPORT);
				var CFGSERV_HOST = CONFSERV_HOST.name;
				log('CFGSERV_HOST = '  + CONFSERV_HOST.name);
				var SearchString = ' -host ' + CONFSERV_HOST.ipaddress;
				var ReplaceString = ' -host ' + CONFSERV_HOST.name;
			</script>

			<if cond="CFGSERV_BK_DBID != '0'">	
				<cfg:readObject name="CONFSERV_BK" result="CONFSERV_BK" type="CfgApplication">
					<query name="dbid" value="${CFGSERV_BK_DBID}" />
				</cfg:readObject>
				<cfg:readObject name="CONFSERV_BK_HOST" result="CONFSERV_BK_HOST" type="CfgHost">
					<query name="dbid" value="${CONFSERV_BK.hostdbid}" />
				</cfg:readObject>
				<script>
					log('CFGSERV BK HOSTDBID= '  + CONFSERV_BK.hostdbid );
					var CFGSERV_BK = CONFSERV_BK;
					var CFGSERV_BK_APPPORT = CONFSERV_BK.port;
					log('CFGSERV_BK = '  + CFGSERV_BK.name + ' ; CFGSERV_BK_APPPORT = '  + CFGSERV_BK_APPPORT);
					var CFGSERV_BK_HOST = CONFSERV_BK_HOST.name;
					log('CFGSERV_BK_HOST = '  + CONFSERV_BK_HOST.name);
				</script>
			</if>
			<if cond="CFGSERV_BK_DBID == '0'">	
				<script>
					log('CFGSERV BK Not Configured');
					var CFGSERV_BK_APPPORT = '';
					var CFGSERV_BK_HOST = '';
				</script>
			</if>

			<!-- Add Create applications subfolders  -->
			<cfg:readObject name="Applications" type="CfgFolder" result="APP_FOLDER"/>
			<cfg:updateObject createonupdate="true" name="GVP" type="CfgFolder" subtype="CFGApplication">
				<query name="name" value="GVP"/>
				<parameter name="folderid" value="${APP_FOLDER.dbid}"/>
				<parameter name="ownerdbid" value="${ENV_TENANT_DBID}"/>
				<parameter name="ownertype" value="CFGTenant"/>
				<parameter name="folderclass" value="CFGFCDefault"/>
			</cfg:updateObject>
			<cfg:updateObject createonupdate="true" name="Routing" type="CfgFolder" subtype="CFGApplication">
				<query name="name" value="Routing"/>
				<parameter name="folderid" value="${APP_FOLDER.dbid}"/>
				<parameter name="ownerdbid" value="${ENV_TENANT_DBID}"/>
				<parameter name="ownertype" value="CFGTenant"/>
				<parameter name="folderclass" value="CFGFCDefault"/>
			</cfg:updateObject>
			<cfg:updateObject createonupdate="true" name="Media" type="CfgFolder" subtype="CFGApplication">
				<query name="name" value="Media"/>
				<parameter name="folderid" value="${APP_FOLDER.dbid}"/>
				<parameter name="ownerdbid" value="${ENV_TENANT_DBID}"/>
				<parameter name="ownertype" value="CFGTenant"/>
				<parameter name="folderclass" value="CFGFCDefault"/>
			</cfg:updateObject>
			<cfg:readObject name="ManagementFramework" type="CfgFolder" result="MFW_FOLDER"/>
			<cfg:readObject name="Media" type="CfgFolder" result="SIP_FOLDER"/>
			<cfg:readObject name="Routing" type="CfgFolder" result="ROUTING_FOLDER"/>
			<cfg:readObject name="GVP" type="CfgFolder" result="GVP_FOLDER"/>
			
			<!-- ## Configuration Server Proxy ## -->
			<if cond="PROXYCS == 'newcsp'">
				<cfg:readObject name="${CSPROXY_HOST.name}" type="CfgHost" result="CSPROXY_HOST"/>
				<script>
					log('CSPROXY_HOST.ostype = '  + CSPROXY_HOST.ostype + ' ; CSPROXY_HOST.name = '  + CSPROXY_HOST.name);
					if (/CFGWin/.test(CSPROXY_HOST.ostype)) {
						log('Activating Windows OS demo');
						INSTALL_BASE_PATH = INSTALL_BASE_PATH_WIN ;
						FILE_SEPARATOR = FILE_SEPARATOR_WIN ;
						LOGS_BASE_PATH = LOGS_BASE_PATH_WIN ;
						CMD_STRING = "md " + INSTALL_BASE_PATH;
						log('Command String = '  + CMD_STRING);
						CMD_STRING_LOG = "md " + LOGS_BASE_PATH + "ConfigServer" + FILE_SEPARATOR;
						log('Command String = '  + CMD_STRING_LOG);
					} else {
						log('Activating Linux OS demo');
						INSTALL_BASE_PATH = INSTALL_BASE_PATH_LINUX ;
						FILE_SEPARATOR = FILE_SEPARATOR_LINUX ;
						LOGS_BASE_PATH = LOGS_BASE_PATH_LINUX ;
						CMD_STRING = "mkdir -p " + INSTALL_BASE_PATH;
						log('Command String = '  + CMD_STRING);
						CMD_STRING_LOG = "mkdir -p " + LOGS_BASE_PATH + "ConfigServer" + FILE_SEPARATOR;
						log('Command String = '  + CMD_STRING_LOG);
					}
				</script>
				<os:execShellCmd host="${CSPROXY_HOST.name}" cmd="${CMD_STRING}" ignoreretvalue="true" result="ResultVar"/>
				<notice msg="${ResultVar}"/>
				<os:execShellCmd host="${CSPROXY_HOST.name}" cmd="${CMD_STRING_LOG}" ignoreretvalue="true" result="ResultVar"/>
				<notice msg="${ResultVar}"/>
				<os:installPackage appName="${CSPROXY}" host="${CSPROXY_HOST.name}" folder="${MFW_FOLDER.name}" longName="Singletenant Configuration Server" version="8" tenantdbid="${TENANT.dbid}" overrideTemplate="${CSPROXY_TPL}" skipIfInstalled="${SKIP_INSTALL_PKG}" debug="true" appPort="${CSPROXY_APPPORT}">
					<list name="silentInstall">
						<property section="IPCommon" key="InstallPath" value="${INSTALL_BASE_PATH}ConfigServer${FILE_SEPARATOR}${CSPROXY}"/>
						<property section="IPCommon" key="DataModel" value="${DATA_MODEL}"/>
						<property section="IPCommon" key="RunTimeMode" value="${RUN_TIME}"/>
						<property section="ConfigServer" key="Host" value="${CFGSERV_HOST}"/>
						<property section="ConfigServer" key="Port" value="${CFGSERV_APPPORT}"/>
						<property section="ServerConfiguration" key="ServerPort" value="${CSPROXY_APPPORT}"/>
						<property section="ServerConfiguration" key="ManagementPort" value="${CSPROXY_MANPORT}"/>
						<property section="ProxyConfiguration" key="ExternalAuthentication" value="${EXT_AUTH}"/>
						<property section="License" key="UseLicense" value="${LICENSE_USE}"/>
						<property section="License" key="AccessType" value="${LICENSE_TYPE}"/>
						<property section="License" key="Port" value="${LICENSE_PORT}"/>
						<property section="License" key="Host" value="${LICENSE_HOST.name}"/>
					</list>
				</os:installPackage>
				<cfg:updateObject name="${CSPROXY}" type="CfgApplication">
					<parameter name="autorestart" value="${APP_AUTORESTART}"/>
					<list name="options">
						<property section="csproxy" key="proxy-writable" value="${PROXY_WRITABLE}"/>
						<property section="license" key="license-file" value="${LICENSE_PRIM}"/>
						<property section="log" key="verbose" value="${LOGGING_LEVEL}"/>
						<property section="log" key="${NETWORK_LEVEL}" value="${NETWORK_VALUE}"/>
						<property section="log" key="expire" value="${EXPIRE_FILE}"/>
						<property section="log" key="buffering" value="true"/>
						<property section="log" key="segment" value="${SEGMENT_FILE}"/>
						<property section="log" key="all" value="${LOGS_BASE_PATH}ConfigServer${FILE_SEPARATOR}${CSPROXY}"/>
					</list>
					<list name="userproperties">
						<property section="sml" key="autostart" value="${SCS_AUTOSTART}"/>
					</list>
					<list name="appservers">
						<conninfo appserverdbid="${CFGSERV.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
					</list>
				</cfg:updateObject>

				<cfg:readObject name="${CSPROXY}" result="CSPROXY_TMP" type="CfgApplication"/>
				<script>
					var newCmdString = searchAndReplaceIPAddress(SearchString, CSPROXY_TMP.commandlinearguments, ReplaceString);
				</script>
				<cfg:updateObject name="${CSPROXY_TMP.name}" type="CfgApplication">
					<query name="name" value="${CSPROXY_TMP.name}"/>
					<parameter name="commandlinearguments" value="${newCmdString}"/>
				</cfg:updateObject>

				<cfg:readObject name="${CSPROXY.name}" result="CSPROXY" type="CfgApplication"/>
				<if cond="HA == 'true'">
					<cfg:readObject name="${CSPROXY_BK_HOST.name}" type="CfgHost" result="CSPROXY_BK_HOST"/>
					<script>
						log('CSPROXY_BK_HOST.ostype = '  + CSPROXY_BK_HOST.ostype + ' ; CSPROXY_BK_HOST.name = '  + CSPROXY_BK_HOST.name);
						if (/CFGWin/.test(CSPROXY_BK_HOST.ostype)) {
							log('Activating Windows OS demo');
							INSTALL_BASE_PATH = INSTALL_BASE_PATH_WIN ;
							FILE_SEPARATOR = FILE_SEPARATOR_WIN ;
							LOGS_BASE_PATH = LOGS_BASE_PATH_WIN ;
							CMD_STRING = "md " + INSTALL_BASE_PATH;
							log('Command String = '  + CMD_STRING);
							CMD_STRING_LOG = "md " + LOGS_BASE_PATH + "ConfigServer" + FILE_SEPARATOR;
							log('Command String = '  + CMD_STRING_LOG);
						} else {
							log('Activating Linux OS demo');
							INSTALL_BASE_PATH = INSTALL_BASE_PATH_LINUX ;
							FILE_SEPARATOR = FILE_SEPARATOR_LINUX ;
							LOGS_BASE_PATH = LOGS_BASE_PATH_LINUX ;
							CMD_STRING = "mkdir -p " + INSTALL_BASE_PATH;
							log('Command String = '  + CMD_STRING);
							CMD_STRING_LOG = "mkdir -p " + LOGS_BASE_PATH + "ConfigServer" + FILE_SEPARATOR;
							log('Command String = '  + CMD_STRING_LOG);
						}
					</script>
					<os:execShellCmd host="${CSPROXY_BK_HOST.name}" cmd="${CMD_STRING}" ignoreretvalue="true" result="ResultVar"/>
					<notice msg="${ResultVar}"/>
					<os:execShellCmd host="${CSPROXY_BK_HOST.name}" cmd="${CMD_STRING_LOG}" ignoreretvalue="true" result="ResultVar"/>
					<notice msg="${ResultVar}"/>
					<os:installPackage appName="${CSPROXY_BK}" host="${CSPROXY_BK_HOST.name}" folder="${MFW_FOLDER.name}" longName="Singletenant Configuration Server" version="8" tenantdbid="${TENANT.dbid}" overrideTemplate="${CSPROXY_TPL}" skipIfInstalled="${SKIP_INSTALL_PKG}" debug="true" appPort="${CSPROXY_BK_APPPORT}">
						<list name="silentInstall">
							<property section="IPCommon" key="InstallPath" value="${INSTALL_BASE_PATH}ConfigServer${FILE_SEPARATOR}${CSPROXY_BK}"/>
							<property section="IPCommon" key="DataModel" value="${DATA_MODEL}"/>
							<property section="IPCommon" key="RunTimeMode" value="${RUN_TIME}"/>
							<property section="ConfigServer" key="Host" value="${CFGSERV_HOST}"/>
							<property section="ConfigServer" key="Port" value="${CFGSERV_APPPORT}"/>
							<property section="ServerConfiguration" key="ServerPort" value="${CSPROXY_BK_APPPORT}"/>
							<property section="ServerConfiguration" key="ManagementPort" value="${CSPROXY_BK_MANPORT}"/>
							<property section="ProxyConfiguration" key="ExternalAuthentication" value="${EXT_AUTH}"/>
							<property section="License" key="UseLicense" value="${LICENSE_USE}"/>
							<property section="License" key="AccessType" value="${LICENSE_TYPE}"/>
							<property section="License" key="Port" value="${LICENSE_BK_PORT}"/>
							<property section="License" key="Host" value="${LICENSE_BK_HOST.name}"/>
						</list>
					</os:installPackage>
					<cfg:updateObject name="${CSPROXY_BK}" type="CfgApplication">
						<parameter name="autorestart" value="${APP_AUTORESTART}"/>
						<list name="options">
						<property section="csproxy" key="proxy-writable" value="${PROXY_WRITABLE}"/>
						<property section="license" key="license-file" value="${LICENSE_BACK}"/>
							<property section="log" key="verbose" value="${LOGGING_LEVEL}"/>
							<property section="log" key="${NETWORK_LEVEL}" value="${NETWORK_VALUE}"/>
							<property section="log" key="expire" value="${EXPIRE_FILE}"/>
							<property section="log" key="buffering" value="true"/>
							<property section="log" key="segment" value="${SEGMENT_FILE}"/>
							<property section="log" key="all" value="${LOGS_BASE_PATH}ConfigServer${FILE_SEPARATOR}${CSPROXY_BK}"/>
						</list>
						<list name="userproperties">
							<property section="sml" key="autostart" value="${SCS_AUTOSTART}"/>
						</list>
					</cfg:updateObject>

					<cfg:readObject name="${CSPROXY_BK}" result="CSPROXY_BK_TMP" type="CfgApplication"/>
					<script>
						var newCmdString = searchAndReplaceIPAddress(SearchString, CSPROXY_BK_TMP.commandlinearguments, ReplaceString);
					</script>
					<cfg:updateObject name="${CSPROXY_BK_TMP.name}" type="CfgApplication">
						<query name="name" value="${CSPROXY_BK_TMP.name}"/>
						<parameter name="commandlinearguments" value="${newCmdString}"/>
					</cfg:updateObject>

					<cfg:readObject name="${CSPROXY_BK}" result="CSPROXY_BK" type="CfgApplication"/>
					<cfg:updateObject name="${CSPROXY.name}" type="CfgApplication">
						<parameter name="backupserverdbid" value="${CSPROXY_BK.dbid}"/>
						<parameter name="redundancytype" value="CFGHTWarmStanby"/>
					</cfg:updateObject>
				</if>
			</if>
			<if cond="PROXYCS == 'exicsp'">
				<cfg:readObject name="${CSPROXY.name}" result="CSPROXY" type="CfgApplication"/>
			</if>
			<!-- ## MessageServer ## -->
			<if cond="MESSSRV == 'true'">
				<cfg:readObject name="${MESS_SERV_HOST.name}" type="CfgHost" result="MESS_SERV_HOST"/>
				<script>
					log('MESS_SERV_HOST.ostype = '  + MESS_SERV_HOST.ostype + ' ; MESS_SERV_HOST.name = '  + MESS_SERV_HOST.name);
					if (/CFGWin/.test(MESS_SERV_HOST.ostype)) {
						log('Activating Windows OS demo');
						INSTALL_BASE_PATH = INSTALL_BASE_PATH_WIN ;
						FILE_SEPARATOR = FILE_SEPARATOR_WIN ;
						LOGS_BASE_PATH = LOGS_BASE_PATH_WIN ;
						CMD_STRING = "md " + INSTALL_BASE_PATH;
						log('Command String = '  + CMD_STRING);
						CMD_STRING_LOG = "md " + LOGS_BASE_PATH + "MessageServer" + FILE_SEPARATOR;
						log('Command String = '  + CMD_STRING_LOG);
					} else {
						log('Activating Linux OS demo');
						INSTALL_BASE_PATH = INSTALL_BASE_PATH_LINUX ;
						FILE_SEPARATOR = FILE_SEPARATOR_LINUX ;
						LOGS_BASE_PATH = LOGS_BASE_PATH_LINUX ;
						CMD_STRING = "mkdir -p " + INSTALL_BASE_PATH;
						log('Command String = '  + CMD_STRING);
						CMD_STRING_LOG = "mkdir -p " + LOGS_BASE_PATH + "MessageServer" + FILE_SEPARATOR;
						log('Command String = '  + CMD_STRING_LOG);
					}
				</script>
				<os:execShellCmd host="${MESS_SERV_HOST.name}" cmd="${CMD_STRING}" ignoreretvalue="true" result="ResultVar"/>
				<notice msg="${ResultVar}"/>
				<os:execShellCmd host="${MESS_SERV_HOST.name}" cmd="${CMD_STRING_LOG}" ignoreretvalue="true" result="ResultVar"/>
				<notice msg="${ResultVar}"/>
				<os:installPackage appName="${MESS_SERV}" host="${MESS_SERV_HOST.name}" folder="${MFW_FOLDER.name}" longName="Message Server" version="8" tenantdbid="${TENANT.dbid}" overrideTemplate="${MESS_SERV_TPL}" skipIfInstalled="${SKIP_INSTALL_PKG}" debug="true" appPort="${MESS_SERV_APPPORT}">
					<list name="silentInstall">
						<property section="IPCommon" key="InstallPath" value="${INSTALL_BASE_PATH}MessageServer${FILE_SEPARATOR}${MESS_SERV}"/>
						<property section="IPCommon" key="DataModel" value="${DATA_MODEL}"/>
						<property section="IPCommon" key="RunTimeMode" value="${RUN_TIME}"/>
						<property section="ConfigServer" key="Host" value="${CFGSERV_HOST}"/>
						<property section="ConfigServer" key="Port" value="${CFGSERV_APPPORT}"/>
					</list>
				</os:installPackage>
				<cfg:readObject name="${DAP_LOG}" result="DAP_LOG" type="CfgApplication"/>

				<cfg:updateObject name="${MESS_SERV}" type="CfgApplication">
					<parameter name="autorestart" value="${APP_AUTORESTART}"/>
					<list name="options">
							<property section="messages" key="db_storage" value="${db_storage_value}"/>
							<property section="MessageServer" key="signature" value="log"/>
							<property section="log" key="verbose" value="${LOGGING_LEVEL}"/>
							<property section="log" key="${NETWORK_LEVEL}" value="${NETWORK_VALUE}"/>
							<property section="log" key="expire" value="${EXPIRE_FILE}"/>
							<property section="log" key="buffering" value="true"/>
							<property section="log" key="segment" value="${SEGMENT_FILE}"/>
						<property section="log" key="all" value="${LOGS_BASE_PATH}MessageServer${FILE_SEPARATOR}${MESS_SERV}"/>
					</list>
					<list name="userproperties">
						<property section="sml" key="autostart" value="${SCS_AUTOSTART}"/>
					</list>
					<list name="appservers">
						<conninfo appserverdbid="${DAP_LOG.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
					</list>
				</cfg:updateObject>
				<if cond="PROXYCS == 'newcsp' || PROXYCS == 'exicsp'">			
				<cfg:updateObject name="${MESS_SERV}" type="CfgApplication">
					<list name="appservers">
						<conninfo appserverdbid="${CSPROXY.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
					</list>
				</cfg:updateObject>
				</if>
				<if cond="PROXYCS == 'exiconf'">			
				<cfg:updateObject name="${MESS_SERV}" type="CfgApplication">
					<list name="appservers">
						<conninfo appserverdbid="${CFGSERV.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
					</list>
				</cfg:updateObject>
				</if>

				<cfg:readObject name="${MESS_SERV}" result="MESS_SERV_TMP" type="CfgApplication"/>
				<script>
					var newCmdString = searchAndReplaceIPAddress(SearchString, MESS_SERV_TMP.commandlinearguments, ReplaceString);
				</script>
				<cfg:updateObject name="${MESS_SERV_TMP.name}" type="CfgApplication">
					<query name="name" value="${MESS_SERV_TMP.name}"/>
					<parameter name="commandlinearguments" value="${newCmdString}"/>
				</cfg:updateObject>

				<cfg:readObject name="${MESS_SERV}" result="MESS_SERV" type="CfgApplication"/>
				<if cond="HA == 'true'">
					<cfg:readObject name="${MESS_SERV_BK_HOST.name}" type="CfgHost" result="MESS_SERV_BK_HOST"/>
					<script>
						log('MESS_SERV_BK_HOST.ostype = '  + MESS_SERV_BK_HOST.ostype + ' ; MESS_SERV_BK_HOST.name = '  + MESS_SERV_BK_HOST.name);
						if (/CFGWin/.test(MESS_SERV_BK_HOST.ostype)) {
							log('Activating Windows OS demo');
							INSTALL_BASE_PATH = INSTALL_BASE_PATH_WIN ;
							FILE_SEPARATOR = FILE_SEPARATOR_WIN ;
							LOGS_BASE_PATH = LOGS_BASE_PATH_WIN ;
							CMD_STRING = "md " + INSTALL_BASE_PATH;
							log('Command String = '  + CMD_STRING);
							CMD_STRING_LOG = "md " + LOGS_BASE_PATH + "MessageServer" + FILE_SEPARATOR;
							log('Command String = '  + CMD_STRING_LOG);
						} else {
							log('Activating Linux OS demo');
							INSTALL_BASE_PATH = INSTALL_BASE_PATH_LINUX ;
							FILE_SEPARATOR = FILE_SEPARATOR_LINUX ;
							LOGS_BASE_PATH = LOGS_BASE_PATH_LINUX ;
							CMD_STRING = "mkdir -p " + INSTALL_BASE_PATH;
							log('Command String = '  + CMD_STRING);
							CMD_STRING_LOG = "mkdir -p " + LOGS_BASE_PATH + "MessageServer" + FILE_SEPARATOR;
							log('Command String = '  + CMD_STRING_LOG);
						}
					</script>
					<os:execShellCmd host="${MESS_SERV_BK_HOST.name}" cmd="${CMD_STRING}" ignoreretvalue="true" result="ResultVar"/>
					<notice msg="${ResultVar}"/>
					<os:execShellCmd host="${MESS_SERV_BK_HOST.name}" cmd="${CMD_STRING_LOG}" ignoreretvalue="true" result="ResultVar"/>
					<notice msg="${ResultVar}"/>
					<os:installPackage appName="${MESS_SERV_BK}" host="${MESS_SERV_BK_HOST.name}" folder="${MFW_FOLDER.name}" longName="Message Server" version="8" tenantdbid="${TENANT.dbid}" overrideTemplate="${MESS_SERV_TPL}" skipIfInstalled="${SKIP_INSTALL_PKG}" debug="true" appPort="${MESS_SERV_BK_APPPORT}">
						<list name="silentInstall">
							<property section="IPCommon" key="InstallPath" value="${INSTALL_BASE_PATH}MessageServer${FILE_SEPARATOR}${MESS_SERV_BK}"/>
							<property section="IPCommon" key="DataModel" value="${DATA_MODEL}"/>
							<property section="IPCommon" key="RunTimeMode" value="${RUN_TIME}"/>
							<property section="ConfigServer" key="Host" value="${CFGSERV_HOST}"/>
							<property section="ConfigServer" key="Port" value="${CFGSERV_APPPORT}"/>
						</list>
					</os:installPackage>
					<cfg:updateObject name="${MESS_SERV_BK}" type="CfgApplication">
						<parameter name="autorestart" value="${APP_AUTORESTART}"/>
						<list name="options">
							<property section="messages" key="db_storage" value="${db_storage_value}"/>
							<property section="MessageServer" key="signature" value="log"/>
							<property section="log" key="verbose" value="${LOGGING_LEVEL}"/>
							<property section="log" key="${NETWORK_LEVEL}" value="${NETWORK_VALUE}"/>
							<property section="log" key="expire" value="${EXPIRE_FILE}"/>
							<property section="log" key="buffering" value="true"/>
							<property section="log" key="segment" value="${SEGMENT_FILE}"/>
							<property section="log" key="all" value="${LOGS_BASE_PATH}MessageServer${FILE_SEPARATOR}${MESS_SERV_BK}"/>
						</list>
						<list name="userproperties">
							<property section="sml" key="autostart" value="${SCS_AUTOSTART}"/>
						</list>
					</cfg:updateObject>

					<cfg:readObject name="${MESS_SERV_BK}" result="MESS_SERV_BK_TMP" type="CfgApplication"/>
					<script>
						var newCmdString = searchAndReplaceIPAddress(SearchString, MESS_SERV_BK_TMP.commandlinearguments, ReplaceString);
					</script>
					<cfg:updateObject name="${MESS_SERV_BK_TMP.name}" type="CfgApplication">
						<query name="name" value="${MESS_SERV_BK_TMP.name}"/>
						<parameter name="commandlinearguments" value="${newCmdString}"/>
					</cfg:updateObject>

					<cfg:readObject name="${MESS_SERV_BK}" result="MESS_SERV_BK" type="CfgApplication"/>
					<cfg:updateObject name="${MESS_SERV.name}" type="CfgApplication">
						<parameter name="backupserverdbid" value="${MESS_SERV_BK.dbid}"/>
						<parameter name="redundancytype" value="CFGHTWarmStanby"/>
					</cfg:updateObject>
				</if>

				<!-- Add MESS_SERV to CSProxy application-->
				<if cond="PROXYCS == 'newcsp'">
					<cfg:updateObject name="${CSPROXY.name}" type="CfgApplication">
						<list name="appservers">
							<conninfo appserverdbid="${MESS_SERV.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
						</list>
					</cfg:updateObject>
				</if>
			</if>
			<if cond="MESSSRV == 'false'">
				<cfg:readObject name="${MESS_SERV.name}" result="MESS_SERV" type="CfgApplication"/>
			</if>

			<!-- ## License Manager ## -->
			<if cond="Licensing == 'true'">	
				<cfg:updateObject createonupdate="true" name="ThirdParty" type="CfgAppPrototype" subtype="CFGThirdPartyServer" result="ThirdPartyTemplate">
					<parameter name="version" value="1.0.0"/>
					<parameter name="state" value="CFGEnabled"/>
				</cfg:updateObject>
				<cfg:readObject name="${LICENSE_HOST.name}" type="CfgHost" result="LICENSE_HOST"/>
				<script>
					log('LICENSE_HOST.ostype = '  + LICENSE_HOST.ostype + ' ; LICENSE_HOST.name = '  + LICENSE_HOST.name);			
					if (/CFGWin/.test(LICENSE_HOST.ostype)) {
						log('Activating Windows OS demo');
						INSTALL_BASE_PATH = INSTALL_BASE_PATH_WIN ;
						FILE_SEPARATOR = FILE_SEPARATOR_WIN ;
						LOGS_BASE_PATH = LOGS_BASE_PATH_WIN ;
						CMD_STRING = "md " + INSTALL_BASE_PATH;
						log('Command String = '  + CMD_STRING);
						CMD_STRING_LOG = "md " + LOGS_BASE_PATH + "LicenseManager" + FILE_SEPARATOR;
						log('Command String = '  + CMD_STRING_LOG);
					} else {
						log('Activating Linux OS demo');
						INSTALL_BASE_PATH = INSTALL_BASE_PATH_LINUX ;
						FILE_SEPARATOR = FILE_SEPARATOR_LINUX ;
						LOGS_BASE_PATH = LOGS_BASE_PATH_LINUX ;
						CMD_STRING = "mkdir -p " + INSTALL_BASE_PATH;
						log('Command String = '  + CMD_STRING);
						CMD_STRING_LOG = "mkdir -p " + LOGS_BASE_PATH + "LicenseManager" + FILE_SEPARATOR;
						log('Command String = '  + CMD_STRING_LOG);
					}
				</script>
				<os:execShellCmd host="${LICENSE_HOST.name}" cmd="${CMD_STRING}" ignoreretvalue="true" result="ResultVar"/>
				<notice msg="${ResultVar}"/>
				<os:execShellCmd host="${LICENSE_HOST.name}" cmd="${CMD_STRING_LOG}" ignoreretvalue="true" result="ResultVar"/>
				<notice msg="${ResultVar}"/>
				<cfg:updateObject createonupdate="true" name="${LICENSE_1}" type="CfgApplication" subtype="CFGThirdPartyServer" result="LICENSE_1">
					<query name="name" value="${LICENSE_1}"/>
					<parameter name="appprototypedbid" value="${ThirdPartyTemplate.dbid}"/>
					<parameter name="workdirectory" value="${INSTALL_BASE_PATH}LicenseManager${FILE_SEPARATOR}${LICENSE_1}"/>
					<parameter name="commandline" value="lmgrd.exe"/>
					<parameter name="hostdbid" value="${LICENSE_HOST.dbid}"/>
					<parameter name="port" value="${LICENSE_PORT}"/>
					<parameter name="folderid" value="${MFW_FOLDER.dbid}"/>
					<parameter name="autorestart" value="${APP_AUTORESTART}"/>
					<list name="userproperties">
						<property section="start_stop" key="start_command" value="net start Flexlm Service 1"/>
						<property section="start_stop" key="stop_command" value="net stop Flexlm Service 1"/>
					</list>
				</cfg:updateObject>

				<if cond="HA == 'true'">
					<cfg:readObject name="${LICENSE_BK_HOST.name}" type="CfgHost" result="LICENSE_BK_HOST"/>
					<script>
						log('LICENSE_BK_HOST.ostype = '  + LICENSE_HOST.ostype + ' ; LICENSE_BK_HOST.name = '  + LICENSE_BK_HOST.name);			
						if (/CFGWin/.test(LICENSE_BK_HOST.ostype)) {
							log('Activating Windows OS demo');
							INSTALL_BASE_PATH = INSTALL_BASE_PATH_WIN ;
							FILE_SEPARATOR = FILE_SEPARATOR_WIN ;
							LOGS_BASE_PATH = LOGS_BASE_PATH_WIN ;
							CMD_STRING = "md " + INSTALL_BASE_PATH;
							log('Command String = '  + CMD_STRING);
							CMD_STRING_LOG = "md " + LOGS_BASE_PATH + "LicenseManager" + FILE_SEPARATOR;
							log('Command String = '  + CMD_STRING_LOG);
						} else {
							log('Activating Linux OS demo');
							INSTALL_BASE_PATH = INSTALL_BASE_PATH_LINUX ;
							FILE_SEPARATOR = FILE_SEPARATOR_LINUX ;
							LOGS_BASE_PATH = LOGS_BASE_PATH_LINUX ;
							CMD_STRING = "mkdir -p " + INSTALL_BASE_PATH;
							log('Command String = '  + CMD_STRING);
							CMD_STRING_LOG = "mkdir -p " + LOGS_BASE_PATH + "LicenseManager" + FILE_SEPARATOR;
							log('Command String = '  + CMD_STRING_LOG);
						}
					</script>
					<os:execShellCmd host="${LICENSE_HOST.name}" cmd="${CMD_STRING}" ignoreretvalue="true" result="ResultVar"/>
					<notice msg="${ResultVar}"/>
					<os:execShellCmd host="${LICENSE_HOST.name}" cmd="${CMD_STRING_LOG}" ignoreretvalue="true" result="ResultVar"/>
					<notice msg="${ResultVar}"/>
					<cfg:updateObject createonupdate="true" name="${LICENSE_2}" type="CfgApplication" subtype="CFGThirdPartyServer" result="LICENSE_2">
						<query name="name" value="${LICENSE_2}"/>
						<parameter name="appprototypedbid" value="${ThirdPartyTemplate.dbid}"/>
						<parameter name="workdirectory" value="${INSTALL_BASE_PATH}LicenseManager${FILE_SEPARATOR}${LICENSE_2}"/>
						<parameter name="commandline" value="lmgrd.exe"/>
						<parameter name="hostdbid" value="${LICENSE_BK_HOST.dbid}"/>
						<parameter name="port" value="${LICENSE_BK_PORT}"/>
						<parameter name="folderid" value="${MFW_FOLDER.dbid}"/>
						<parameter name="autorestart" value="${APP_AUTORESTART}"/>
						<list name="userproperties">
							<property section="start_stop" key="start_command" value="net start Flexlm Service 1"/>
							<property section="start_stop" key="stop_command" value="net stop Flexlm Service 1"/>
						</list>
					</cfg:updateObject>
				</if>
			</if>
			<!-- SIP_Switching_office -->
			<cfg:updateObject createonupdate="true" type="CfgPhysicalSwitch" subtype="CFGSIPSwitch" result="SWITCH_OFFICE">
				<parameter name="name" value="SIP_Switching_Office"/>
				<parameter name="state" value="CFGEnabled"/>
			</cfg:updateObject>
			<cfg:updateObject createonupdate="true" name="${SIP_SWITCH}" type="CfgSwitch" tenantdbid="${TENANT.dbid}">
				<query name="name" value="${SIP_SWITCH}"/>
				<query name="tenantdbid" value="${TENANT.dbid}"/>
				<parameter name="physswitchdbid" value="${SWITCH_OFFICE.dbid}"/>
			</cfg:updateObject>

			<!-- ## SIPServer ## -->
			<cfg:readObject type="CfgSwitch" name="${SIP_SWITCH}" tenantdbid="${TENANT.dbid}" result="SIP_SWITCH"/>
			<cfg:readObject name="${SIP_SERV_HOST.name}" type="CfgHost" result="SIP_SERV_HOST"/>
			<script>
				log('SIP_SERV_HOST.ostype = '  + SIP_SERV_HOST.ostype + ' ; SIP_SERV_HOST.name = '  + SIP_SERV_HOST.name);
				
				if (/CFGWin/.test(SIP_SERV_HOST.ostype)) {
					log('Activating Windows OS demo');
					INSTALL_BASE_PATH = INSTALL_BASE_PATH_WIN ;
					FILE_SEPARATOR = FILE_SEPARATOR_WIN ;
					LOGS_BASE_PATH = LOGS_BASE_PATH_WIN ;
					CMD_STRING = "md " + INSTALL_BASE_PATH;
					log('Command String = '  + CMD_STRING);
					CMD_STRING_HA = "md " + INSTALL_BASE_PATH + "SIP" + FILE_SEPARATOR + "HA_Scripts" + FILE_SEPARATOR;
					log('Command String = '  + CMD_STRING_HA);
					CMD_STRING_LOG = "md " + LOGS_BASE_PATH + "SIPServer" + FILE_SEPARATOR;
					log('Command String = '  + CMD_STRING_LOG);
					PR_VIP_UP = "HA_IP_ON.bat";
					PR_VIP_DOWN = "HA_IP_DOWN.bat"; 
				} else {
					log('Activating Linux OS demo');
					INSTALL_BASE_PATH = INSTALL_BASE_PATH_LINUX ;
					FILE_SEPARATOR = FILE_SEPARATOR_LINUX ;
					LOGS_BASE_PATH = LOGS_BASE_PATH_LINUX ;
					CMD_STRING = "mkdir -p " + INSTALL_BASE_PATH;
					log('Command String = '  + CMD_STRING);
					CMD_STRING_HA = "mkdir -p " + INSTALL_BASE_PATH + "SIP" + FILE_SEPARATOR + "HA_Scripts" + FILE_SEPARATOR;
					log('Command String = '  + CMD_STRING_HA);
					CMD_STRING_LOG = "mkdir -p " + LOGS_BASE_PATH + "SIPServer" + FILE_SEPARATOR;
					log('Command String = '  + CMD_STRING_LOG);
					PR_VIP_UP = "set_ip_up.sh";
					PR_VIP_DOWN = "set_ip_down.sh"; 
				}
			</script>
			<os:execShellCmd host="${SIP_SERV_HOST.name}" cmd="${CMD_STRING}" ignoreretvalue="true" result="ResultVar"/>
			<notice msg="${ResultVar}"/>
			<os:execShellCmd host="${SIP_SERV_HOST.name}" cmd="${CMD_STRING_HA}" ignoreretvalue="true" result="ResultVar"/>
			<notice msg="${ResultVar}"/>
			<os:execShellCmd host="${SIP_SERV_HOST.name}" cmd="${CMD_STRING_LOG}" ignoreretvalue="true" result="ResultVar"/>
			<notice msg="${ResultVar}"/>
			<os:installPackage appName="${SIP_SERV}" host="${SIP_SERV_HOST.name}" folder="${SIP_FOLDER.name}" skipIfInstalled="${SKIP_INSTALL_PKG}" longName="SIP Server" version="8" tenantdbid="${TENANT.dbid}" debug="true" appPort="${SIP_SERV_APPPORT}" overrideTemplate="${SIP_SERV_TPL}">
				<list name="silentInstall">
					<property section="IPCommon" key="InstallPath" value="${INSTALL_BASE_PATH}SIP${FILE_SEPARATOR}${SIP_SERV}"/>
					<property section="IPCommon" key="DataModel" value="${DATA_MODEL}"/>
					<property section="License" key="AccessType" value="${LICENSE_TYPE}"/>
					<property section="License" key="Host" value="${LICENSE_HOST.name}"/>
					<property section="License" key="Port" value="${LICENSE_PORT}"/>
				</list>
			</os:installPackage>

			<cfg:updateObject name="${SIP_SERV}" type="CfgApplication">
				<parameter name="autorestart" value="${APP_AUTORESTART}"/>
				<list name="options">
					<property section="Log" key="verbose" value="${LOGGING_LEVEL}"/>
					<property section="Log" key="${NETWORK_LEVEL}" value="${NETWORK_VALUE}"/>
					<property section="Log" key="expire" value="${EXPIRE_FILE}"/>
					<property section="Log" key="buffering" value="true"/>
					<property section="Log" key="segment" value="${SEGMENT_FILE}"/>
					<property section="Log" key="all" value="${LOGS_BASE_PATH}SIPServer${FILE_SEPARATOR}${SIP_SERV}"/>
					<property section="license" key="license-file" value="${LICENSE_PRIM}"/>
					<property section="license" key="num-of-licenses" value="max"/>
					<property section="license" key="num-sdn-licenses" value="${LICENSE_NUMBER}"/>
					<property section="TServer" key="agent-logout-on-unreg" value="true"/>
					<property section="TServer" key="agent-no-answer-action" value="notready"/>
					<property section="TServer" key="agent-no-answer-overflow" value="recall"/>
					<property section="TServer" key="agent-no-answer-timeout" value="15"/>
					<property section="TServer" key="agent-strict-id" value="true"/>
					<property section="TServer" key="consult-user-data" value="joint"/>
					<property section="TServer" key="emergency-recording-filename" value="$DATE$/$TIME$-$ANI$-$DNIS$-$CONNID$-$UUID$-$AGENTID$-$AGENTDN$"/>
					<property section="TServer" key="emulated-login-state" value="not-ready"/>
					<property section="TServer" key="inbound-bsns-calls" value="true"/>
					<property section="TServer" key="inherit-bsns-type" value="true"/>
					<property section="TServer" key="internal-registrar-enabled" value="true"/>
					<property section="TServer" key="internal-registrar-persistent" value="false"/>
					<property section="TServer" key="logout-on-out-of-service" value="true"/>
					<property section="TServer" key="management-port" value="${SIP_SERV_MANPORT}"/>
					<property section="TServer" key="msml-support" value="true"/>
					<property section="TServer" key="msml-record-support" value="true"/>
					<property section="TServer" key="outbound-bsns-calls" value="true"/>
					<property section="TServer" key="recording-filename" value="$DATE$/$TIME$-$ANI$-$DNIS$-$CONNID$-$UUID$-$AGENTID$-$AGENTDN$"/>
					<property section="TServer" key="releasing-party-report" value="true"/>
					<property section="TServer" key="sip-link-type" value="${SIP_THREAD}"/>
					<property section="TServer" key="sip-port" value="${SIP_PORT}"/>
					<property section="TServer" key="sip-address" value=""/>
					<property section="TServer" key="sip-enable-moh" value="true"/>
					<property section="TServer" key="userdata-map-trans-prefix" value="X-Genesys-"/>
				</list>
				<list name="appservers">
					<conninfo appserverdbid="${MESS_SERV.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
				</list>
				<list name="userproperties">
					<property section="sml" key="autostart" value="${SCS_AUTOSTART}"/>
				</list>
			</cfg:updateObject>
			<if cond="PROXYCS == 'newcsp' || PROXYCS == 'exicsp'">
				<cfg:updateObject name="${SIP_SERV}" type="CfgApplication">
					<list name="appservers">
						<conninfo appserverdbid="${CSPROXY.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
					</list>
				</cfg:updateObject>
			</if>
			<if cond="PROXYCS == 'exiconf'">			
			<cfg:updateObject name="${SIP_SERV}" type="CfgApplication">
				<list name="appservers">
					<conninfo appserverdbid="${CFGSERV.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
				</list>
			</cfg:updateObject>
			</if>

			<cfg:readObject name="${SIP_SERV}" result="SIP_SERV_TMP" type="CfgApplication"/>
			<script>
				var newCmdString = searchAndReplaceIPAddress(SearchString, SIP_SERV_TMP.commandlinearguments, ReplaceString);
			</script>
			<cfg:updateObject name="${SIP_SERV_TMP.name}" type="CfgApplication">
				<query name="name" value="${SIP_SERV_TMP.name}"/>
				<parameter name="commandlinearguments" value="${newCmdString}"/>
			</cfg:updateObject>

			<cfg:readObject name="${SIP_SERV}" result="SIP_SERV" type="CfgApplication"/>
			<if cond="HA == 'true'">
				<cfg:readObject name="${SIP_SERV_BK_HOST.name}" type="CfgHost" result="SIP_SERV_BK_HOST"/>
				<script>
					log('SIP_SERV_BK_HOST.ostype = '  + SIP_SERV_BK_HOST.ostype + ' ; SIP_SERV_BK_HOST.name = '  + SIP_SERV_BK_HOST.name);								
				if (/CFGWin/.test(SIP_SERV_BK_HOST.ostype)) {
					log('Activating Windows OS demo');
					INSTALL_BASE_PATH = INSTALL_BASE_PATH_WIN ;
					FILE_SEPARATOR = FILE_SEPARATOR_WIN ;
					LOGS_BASE_PATH = LOGS_BASE_PATH_WIN ;
					CMD_STRING = "md " + INSTALL_BASE_PATH;
					log('Command String = '  + CMD_STRING);
					CMD_STRING_HA = "md " + INSTALL_BASE_PATH + "SIP" + FILE_SEPARATOR + "HA_Scripts" + FILE_SEPARATOR;
					log('Command String = '  + CMD_STRING_HA);
					CMD_STRING_LOG = "md " + LOGS_BASE_PATH + "SIPServer" + FILE_SEPARATOR;
					log('Command String = '  + CMD_STRING_LOG);
					BK_VIP_UP = "HA_IP_ON.bat";
					BK_VIP_DOWN = "HA_IP_DOWN.bat"; 
				} else {
					log('Activating Linux OS demo');
					INSTALL_BASE_PATH = INSTALL_BASE_PATH_LINUX ;
					FILE_SEPARATOR = FILE_SEPARATOR_LINUX ;
					LOGS_BASE_PATH = LOGS_BASE_PATH_LINUX ;
					CMD_STRING = "mkdir -p " + INSTALL_BASE_PATH;
					log('Command String = '  + CMD_STRING);
					CMD_STRING_HA = "mkdir -p " + INSTALL_BASE_PATH + "SIP" + FILE_SEPARATOR + "HA_Scripts" + FILE_SEPARATOR;
					log('Command String = '  + CMD_STRING_HA);
					CMD_STRING_LOG = "mkdir -p " + LOGS_BASE_PATH + "SIPServer" + FILE_SEPARATOR;
					log('Command String = '  + CMD_STRING_LOG);
					BK_VIP_UP = "set_ip_up.sh";
					BK_VIP_DOWN = "set_ip_down.sh"; 
				}
				</script>
				<os:execShellCmd host="${SIP_SERV_BK_HOST.name}" cmd="${CMD_STRING}" ignoreretvalue="true" result="ResultVar"/>
				<notice msg="${ResultVar}"/>
				<os:execShellCmd host="${SIP_SERV_BK_HOST.name}" cmd="${CMD_STRING_HA}" ignoreretvalue="true" result="ResultVar"/>
				<notice msg="${ResultVar}"/>
				<os:execShellCmd host="${SIP_SERV_BK_HOST.name}" cmd="${CMD_STRING_LOG}" ignoreretvalue="true" result="ResultVar"/>
				<notice msg="${ResultVar}"/>
				<os:installPackage appName="${SIP_SERV_BK}" host="${SIP_SERV_BK_HOST.name}" folder="${SIP_FOLDER.name}" skipIfInstalled="${SKIP_INSTALL_PKG}" longName="SIP Server" version="8" tenantdbid="${TENANT.dbid}" debug="true" appPort="${SIP_SERV_BK_APPPORT}" overrideTemplate="${SIP_SERV_TPL}">
					<list name="silentInstall">
						<property section="IPCommon" key="InstallPath" value="${INSTALL_BASE_PATH}SIP${FILE_SEPARATOR}${SIP_SERV_BK}"/>
						<property section="IPCommon" key="DataModel" value="${DATA_MODEL}"/>
						<property section="License" key="AccessType" value="${LICENSE_TYPE}"/>
						<property section="License" key="Host" value="${LICENSE_BK_HOST.name}"/>
						<property section="License" key="Port" value="${LICENSE_BK_PORT}"/>
					</list>
				</os:installPackage>
				<cfg:updateObject name="${SIP_SERV_BK}" type="CfgApplication">
					<parameter name="autorestart" value="${APP_AUTORESTART}"/>
					<list name="options">
						<property section="Log" key="verbose" value="${LOGGING_LEVEL}"/>
						<property section="Log" key="${NETWORK_LEVEL}" value="${NETWORK_VALUE}"/>
						<property section="Log" key="expire" value="${EXPIRE_FILE}"/>
						<property section="Log" key="buffering" value="true"/>
						<property section="Log" key="segment" value="${SEGMENT_FILE}"/>
						<property section="Log" key="all" value="${LOGS_BASE_PATH}SIPServer${FILE_SEPARATOR}${SIP_SERV_BK}"/>
						<property section="backup-sync" key="addp-remote-timeout" value="10"/>
						<property section="backup-sync" key="addp-timeout" value="10"/>
						<property section="backup-sync" key="addp-trace" value="off"/>
						<property section="backup-sync" key="protocol" value="addp"/>
						<property section="backup-sync" key="sync-reconnect-tout" value="20 sec"/>
						<property section="license" key="license-file" value="${LICENSE_PRIM}"/>
						<property section="license" key="num-of-licenses" value="max"/>
						<property section="license" key="num-sdn-licenses" value="${LICENSE_NUMBER}"/>
						<property section="TServer" key="agent-logout-on-unreg" value="true"/>
						<property section="TServer" key="agent-no-answer-action" value="notready"/>
						<property section="TServer" key="agent-no-answer-overflow" value="recall"/>
						<property section="TServer" key="agent-no-answer-timeout" value="15"/>
						<property section="TServer" key="agent-strict-id" value="true"/>
						<property section="TServer" key="consult-user-data" value="joint"/>
						<property section="TServer" key="control-remote-vip-scripts" value="true"/>
						<property section="TServer" key="control-vip-scripts" value="true"/>
						<property section="TServer" key="emergency-recording-filename" value="$DATE$/$TIME$-$ANI$-$DNIS$-$CONNID$-$UUID$-$AGENTID$-$AGENTDN$"/>
						<property section="TServer" key="emulated-login-state" value="not-ready"/>
						<property section="TServer" key="inbound-bsns-calls" value="true"/>
						<property section="TServer" key="inherit-bsns-type" value="true"/>
						<property section="TServer" key="internal-registrar-enabled" value="true"/>
						<property section="TServer" key="internal-registrar-persistent" value="false"/>
						<property section="TServer" key="logout-on-out-of-service" value="true"/>
						<property section="TServer" key="management-port" value="${SIP_SERV_BK_MANPORT}"/>
						<property section="TServer" key="msml-support" value="true"/>
						<property section="TServer" key="msml-record-support" value="true"/>
						<property section="TServer" key="network-monitoring-timeout" value="1"/>
						<property section="TServer" key="outbound-bsns-calls" value="true"/>
						<property section="TServer" key="recording-filename" value="$DATE$/$TIME$-$ANI$-$DNIS$-$CONNID$-$UUID$-$AGENTID$-$AGENTDN$"/>
						<property section="TServer" key="releasing-party-report" value="true"/>
						<property section="TServer" key="sip-link-type" value="${SIP_THREAD}"/>
						<property section="TServer" key="sip-port" value="${SIP_PORT}"/>
						<property section="TServer" key="sip-address" value="${SIP_VIRTUAL_IP}"/>
						<property section="TServer" key="sip-enable-moh" value="true"/>
						<property section="TServer" key="sip-iptakeover-monitoring" value="true"/>
						<property section="TServer" key="sip-nic-address" value="${SIPB_NIC_IP}"/>
						<property section="TServer" key="sip-nic-monitoring" value="${SIP_NIC_ENABLED}"/>
						<property section="TServer" key="sip-vip-script-down" value="${SIPB_SCRIPT_DOWN}"/>
						<property section="TServer" key="sip-vip-script-up" value="${SIPB_SCRIPT_UP}"/>
						<property section="TServer" key="tlib-nic-monitoring" value="${TLIB_NIC_ENABLED}"/>
						<property section="TServer" key="userdata-map-trans-prefix" value="X-Genesys-"/>
						<property section="TServer" key="vip-state-change-timeout" value="10"/>
					</list>
					<list  name="portinfos">
						<portinfo id="HA" appparams="hasync=1" port="${SIP_SERV_BK_HAPORT}"/>
					</list>
					<list name="userproperties">
						<property section="sml" key="autostart" value="${SCS_AUTOSTART}"/>
					</list>
				</cfg:updateObject>

				<cfg:updateObject name="${SIP_SERV.name}" type="CfgApplication">
					<list  name="portinfos">
						<portinfo id="HA" appparams="hasync=1" port="${SIP_SERV_HAPORT}"/>
					</list>
					<list name="options">
						<property section="TServer" key="sip-address" value="${SIP_VIRTUAL_IP}"/>
						<property section="backup-sync" key="addp-remote-timeout" value="10"/>
						<property section="backup-sync" key="addp-timeout" value="10"/>
						<property section="backup-sync" key="addp-trace" value="off"/>
						<property section="backup-sync" key="protocol" value="addp"/>
						<property section="backup-sync" key="sync-reconnect-tout" value="20 sec"/>
						<property section="TServer" key="control-remote-vip-scripts" value="true"/>
						<property section="TServer" key="control-vip-scripts" value="true"/>
						<property section="TServer" key="network-monitoring-timeout" value="1"/>
						<property section="TServer" key="sip-iptakeover-monitoring" value="true"/>
						<property section="TServer" key="sip-nic-address" value="${SIPP_NIC_IP}"/>
						<property section="TServer" key="sip-nic-monitoring" value="${SIP_NIC_ENABLED}"/>
						<property section="TServer" key="sip-vip-script-down" value="${SIPP_SCRIPT_DOWN}"/>
						<property section="TServer" key="sip-vip-script-up" value="${SIPP_SCRIPT_UP}"/>
						<property section="TServer" key="tlib-nic-monitoring" value="${TLIB_NIC_ENABLED}"/>
						<property section="TServer" key="vip-state-change-timeout" value="10"/>
					</list>
				</cfg:updateObject>

				<cfg:readObject name="${SIP_SERV_BK}" result="SIP_SERV_BK_TMP" type="CfgApplication"/>
				<script>
					var newCmdString = searchAndReplaceIPAddress(SearchString, SIP_SERV_BK_TMP.commandlinearguments, ReplaceString);
				</script>
				<cfg:updateObject name="${SIP_SERV_BK_TMP.name}" type="CfgApplication">
					<query name="name" value="${SIP_SERV_BK_TMP.name}"/>
					<parameter name="commandlinearguments" value="${newCmdString}"/>
				</cfg:updateObject>

				<cfg:readObject name="${SIP_SERV_BK}" result="SIP_SERV_BK" type="CfgApplication"/>
				<cfg:updateObject name="${SIP_SERV.name}" type="CfgApplication">
					<parameter name="backupserverdbid" value="${SIP_SERV_BK.dbid}"/>
					<parameter name="redundancytype" value="CFGHTHotStanby"/>
				</cfg:updateObject>
				<cfg:updateObject createonupdate="true" name="SIP_VIP_Scripts" type="CfgAppPrototype" subtype="CFGThirdPartyServer" result="SIPThirdPartyTemplate">
					<parameter name="version" value="8.1.0"/>
					<parameter name="state" value="CFGEnabled"/>
				</cfg:updateObject>

				<cfg:updateObject createonupdate="true" name="${SIP_SERVER_PR_VIP_UP}" type="CfgApplication" subtype="CFGThirdPartyServer" result="SIP_SERVER_PR_VIP_UP">
					<query name="name" value="${SIP_SERVER_PR_VIP_UP}"/>
					<parameter name="appprototypedbid" value="${SIPThirdPartyTemplate.dbid}"/>
					<parameter name="workdirectory" value="${INSTALL_BASE_PATH}SIP${FILE_SEPARATOR}HA_Scripts"/>
					<parameter name="commandline" value="${PR_VIP_UP}"/>
					<parameter name="hostdbid" value="${SIP_SERV_HOST.dbid}"/>
					<parameter name="folderid" value="${SIP_FOLDER.dbid}"/>
					<parameter name="startuptimeout" value="8"/>
					<parameter name="port" value="7000"/>
					<list name="appservers">
						<conninfo appserverdbid="${MESS_SERV.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
					</list>
				</cfg:updateObject>
				<cfg:updateObject createonupdate="true" name="${SIP_SERVER_PR_VIP_DOWN}" type="CfgApplication" subtype="CFGThirdPartyServer" result="SIP_SERVER_PR_VIP_DOWN">
					<query name="name" value="${SIP_SERVER_PR_VIP_DOWN}"/>
					<parameter name="appprototypedbid" value="${SIPThirdPartyTemplate.dbid}"/>
					<parameter name="workdirectory" value="${INSTALL_BASE_PATH}SIP${FILE_SEPARATOR}HA_Scripts"/>														   
					<parameter name="commandline" value="${PR_VIP_DOWN}"/>
					<parameter name="hostdbid" value="${SIP_SERV_HOST.dbid}"/>
					<parameter name="folderid" value="${SIP_FOLDER.dbid}"/>
					<parameter name="startuptimeout" value="8"/>
					<parameter name="port" value="7001"/>
					<list name="appservers">
						<conninfo appserverdbid="${MESS_SERV.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
					</list>
				</cfg:updateObject>
				<cfg:updateObject createonupdate="true" name="${SIP_SERVER_BK_VIP_UP}" type="CfgApplication" subtype="CFGThirdPartyServer" result="SIP_SERVER_BK_VIP_UP">
					<query name="name" value="${SIP_SERVER_BK_VIP_UP}"/>
					<parameter name="appprototypedbid" value="${SIPThirdPartyTemplate.dbid}"/>
					<parameter name="workdirectory" value="${INSTALL_BASE_PATH}SIP${FILE_SEPARATOR}HA_Scripts"/>
					<parameter name="commandline" value="${BK_VIP_UP}"/>
					<parameter name="hostdbid" value="${SIP_SERV_BK_HOST.dbid}"/>
					<parameter name="folderid" value="${SIP_FOLDER.dbid}"/>
					<parameter name="startuptimeout" value="8"/>
					<parameter name="port" value="7000"/>
					<list name="appservers">
						<conninfo appserverdbid="${MESS_SERV.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
					</list>
				</cfg:updateObject>
				<cfg:updateObject createonupdate="true" name="${SIP_SERVER_BK_VIP_DOWN}" type="CfgApplication" subtype="CFGThirdPartyServer" result="SIP_SERVER_BK_VIP_DOWN">
					<query name="name" value="${SIP_SERVER_BK_VIP_DOWN}"/>
					<parameter name="appprototypedbid" value="${SIPThirdPartyTemplate.dbid}"/>
					<parameter name="workdirectory" value="${INSTALL_BASE_PATH}SIP${FILE_SEPARATOR}HA_Scripts"/>
					<parameter name="commandline" value="${BK_VIP_DOWN}"/>
					<parameter name="hostdbid" value="${SIP_SERV_BK_HOST.dbid}"/>
					<parameter name="folderid" value="${SIP_FOLDER.dbid}"/>
					<parameter name="startuptimeout" value="8"/>
					<parameter name="port" value="7001"/>
					<list name="appservers">
						<conninfo appserverdbid="${MESS_SERV.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
					</list>
				</cfg:updateObject>
			</if>
			<cfg:readObject name="${SIP_SERV.name}" result="SIP_SERV" type="CfgApplication"/>
			<cfg:updateObject name="${SIP_SWITCH.name}" type="CfgSwitch" tenantdbid="${TENANT.dbid}">
				<query name="name" value="${SIP_SWITCH.name}"/>
				<query name="tenantdbid" value="${TENANT.dbid}"/>
				<parameter name="tserverdbid" value="${SIP_SERV.dbid}"/>
			</cfg:updateObject>

			<!-- Create SIP VIP Scripts -->
			<if cond="HA == 'true'">
				<script>
					if (/CFGWin/.test(SIP_SERV_HOST.ostype)) {
						log('Activating Windows OS demo');
						var sip_pr_vipup = "@set VirtualIP=" + SIP_VIRTUAL_IP + "\n@set vipMask=255.255.255.0\n@set VirtualInterface=\&quot;Local Area Connection\&quot;\n@echo ********************* HA_IP_ON ********************** >> Takeover.log\n@echo %time% >> Takeover.log\n@rem check if Virtual IP released on Backup host\n@cscript.exe ping.vbs %VirtualIP% //Nologo >> Takeover.log\n@if not errorlevel 1 goto ready\n@cscript.exe ping.vbs %VirtualIP% //Nologo >> Takeover.log\n@if not errorlevel 1 goto ready\n@cscript.exe ping.vbs %VirtualIP% //Nologo >> Takeover.log\n:ready\n@rem Add VirtualIP\n@netsh interface ip delete arpcache\nnetsh interface ip add address name=%VirtualInterface% addr=%VirtualIP% mask=%vipMask% store=active >> Takeover.log\n@rem check if VirtualIP added succesefully if not do it again\n@cscript.exe check_ip.vbs localhost %VirtualIP% //Nologo >> Takeover.log\n@if errorlevel 1 goto done\nnetsh interface ip delete address name=%VirtualInterface% addr=%VirtualIP% >> Takeover.log\nnetsh interface ip add address name=%VirtualInterface% addr=%VirtualIP% mask=%vipMask% store=active >> Takeover.log\n@if errorlevel 1 ( \n@echo %VirtualIP% not added to %VirtualInterface% >> Takeover.log\n@goto done\n)\n:done\n@echo %time% >> Takeover.log\n" ;
						
						var sip_pr_vipdown = "@set VirtualIP=" + SIP_VIRTUAL_IP + "\n@set VirtualInterface=\&quot;Local Area Connection\&quot;\n@echo ********************* HA_IP_OFF ********************** >> Takeover.log\n@echo %time% >> Takeover.log\nnetsh interface ip delete address name=%VirtualInterface% addr=%VirtualIP% >> Takeover.log\n@netsh interface ip delete arpcache\n@cscript.exe ping.vbs %VirtualIP% //Nologo >> Takeover.log\n@echo %time% >> Takeover.log\n" ;

 						var ping_vbs_pr = "rem ping host and return 1 if ping successful 0 if not\nOn Error Resume Next\nif WScript.Arguments.Count > 0 then\n  strTarget = WScript.Arguments(0)\n  Set objShell = CreateObject(\&quot; WScript.Shell\&quot;)\n  Set objExec = objShell.Exec(\&quot;ping -n 2 -w 1000 \&quot; &amp; strTarget)\n  strPingResults = LCase(objExec.StdOut.ReadAll)\n" + "  If InStr(strPingResults, \&quot;reply from\&quot;)  And Not InStr(strPingResults, \&quot;unreachable\&quot;) Then\n    WScript.Echo strTarget &amp; " + "\&quot;responded to ping.\&quot;\n    wscript.Quit 1\n  Else\n    WScript.Echo strTarget &amp; \&quot;did not respond to ping.\&quot;\n    wscript.Quit 0\n  End If\nElse\n  WScript.Echo \&quot;target is not specified.\&quot;\n  wscript.Quit -1\nEnd If\n";
						
						var check_ip_vbs_pr = "rem check if IP address (arg0 ) can be found on host (arg1 )\nOn Error Resume Next\nif WScript.Arguments.Count > 0 then\n  strComputer = WScript.Arguments(0)\n  targetIPAddress = WScript.Arguments(1)\n  Set objWMIService = GetObject(\"winmgmts:\" _\n   &amp; \"{impersonationLevel=impersonate}!&#92;&#92;" + "&#92;&#92;\" &amp; strComputer &amp; \"\\root\\cimv2\")\n  Set colNicConfigs = objWMIService.ExecQuery _\n   (\"SELECT * FROM Win32_NetworkAdapterConfiguration WHERE IPEnabled = True\")\n  WScript.Echo \"Computer Name: \" &amp; strComputer &amp; \" ip \" &amp; targetIPAddress\n  For Each objNicConfig In colNicConfigs\n    For Each strIPAddress In objNicConfig.IPAddress\n      If InStr(strIPAddress, targetIPAddress) Then\n        WScript.Echo targetIPAddress &amp; \" is found on \" &amp; objNicConfig.Description\n        wscript.Quit 1\n      End If\n    Next\n  Next\n  WScript.Echo targetIPAddress &amp; \" not found.\"\n  wscript.Quit 0\nElse\n    WScript.Echo \"target not specified.\"\n    wscript.Quit -1\nEnd If\n";
						var SIP_PR_OSTYPE = "Windows";

					} else {
						log('Activating Linux OS demo');
						var sip_pr_vipup = "ifconfig eth0:1 " + SIP_VIRTUAL_IP + " up" ; 

						var sip_pr_vipdown = "ifconfig eth0:1 down" ; 
						var SIP_PR_OSTYPE = "Linux";
					}

					if (/CFGWin/.test(SIP_SERV_BK_HOST.ostype)) {
						log('Activating Windows OS demo');				
						var sip_bk_vipup = "@set VirtualIP=" + SIP_VIRTUAL_IP + "\n@set vipMask=255.255.255.0\n@set VirtualInterface=\&quot;Local Area Connection\&quot;\n@echo ********************* HA_IP_ON ********************** >> Takeover.log\n@echo %time% >> Takeover.log\n@rem check if Virtual IP released on Backup host\n@cscript.exe ping.vbs %VirtualIP% //Nologo >> Takeover.log\n@if not errorlevel 1 goto ready\n@cscript.exe ping.vbs %VirtualIP% //Nologo >> Takeover.log\n@if not errorlevel 1 goto ready\n@cscript.exe ping.vbs %VirtualIP% //Nologo >> Takeover.log\n:ready\n@rem Add VirtualIP\n@netsh interface ip delete arpcache\nnetsh interface ip add address name=%VirtualInterface% addr=%VirtualIP% mask=%vipMask% store=active >> Takeover.log\n@rem check if VirtualIP added succesefully if not do it again\n@cscript.exe check_ip.vbs localhost %VirtualIP% //Nologo >> Takeover.log\n@if errorlevel 1 goto done\nnetsh interface ip delete address name=%VirtualInterface% addr=%VirtualIP% >> Takeover.log\nnetsh interface ip add address name=%VirtualInterface% addr=%VirtualIP% mask=%vipMask% store=active >> Takeover.log\n@if errorlevel 1 ( \n@echo %VirtualIP% not added to %VirtualInterface% >> Takeover.log\n@goto done\n)\n:done\n@echo %time% >> Takeover.log\n" ;						
						var sip_bk_vipdown = "@set VirtualIP=" + SIP_VIRTUAL_IP + "\n@set VirtualInterface=\&quot;Local Area Connection\&quot;\n@echo ********************* HA_IP_OFF ********************** >> Takeover.log\n@echo %time% >> Takeover.log\nnetsh interface ip delete address name=%VirtualInterface% addr=%VirtualIP% >> Takeover.log\n@netsh interface ip delete arpcache\n@cscript.exe ping.vbs %VirtualIP% //Nologo >> Takeover.log\n@echo %time% >> Takeover.log\n";

 						var ping_vbs_bk = "rem ping host and return 1 if ping successful 0 if not\nOn Error Resume Next\nif WScript.Arguments.Count > 0 then\n  strTarget = WScript.Arguments(0)\n  Set objShell = CreateObject(\&quot; WScript.Shell\&quot;)\n  Set objExec = objShell.Exec(\&quot;ping -n 2 -w 1000 \&quot; &amp; strTarget)\n  strPingResults = LCase(objExec.StdOut.ReadAll)\n" + "  If InStr(strPingResults, \&quot;reply from\&quot;)  And Not InStr(strPingResults, \&quot;unreachable\&quot;) Then\n    WScript.Echo strTarget &amp; " + "\&quot;responded to ping.\&quot;\n    wscript.Quit 1\n  Else\n    WScript.Echo strTarget &amp; \&quot;did not respond to ping.\&quot;\n    wscript.Quit 0\n  End If\nElse\n  WScript.Echo \&quot;target is not specified.\&quot;\n  wscript.Quit -1\nEnd If\n";
												
						var check_ip_vbs_bk = "rem check if IP address (arg0 ) can be found on host (arg1 )\nOn Error Resume Next\nif WScript.Arguments.Count > 0 then\n  strComputer = WScript.Arguments(0)\n  targetIPAddress = WScript.Arguments(1)\n  Set objWMIService = GetObject(\"winmgmts:\" _\n   &amp; \"{impersonationLevel=impersonate}!&#92;&#92;" + "&#92;&#92;\" &amp; strComputer &amp; \"\\root\\cimv2\")\n  Set colNicConfigs = objWMIService.ExecQuery _\n   (\"SELECT * FROM Win32_NetworkAdapterConfiguration WHERE IPEnabled = True\")\n  WScript.Echo \"Computer Name: \" &amp; strComputer &amp; \" ip \" &amp; targetIPAddress\n  For Each objNicConfig In colNicConfigs\n    For Each strIPAddress In objNicConfig.IPAddress\n      If InStr(strIPAddress, targetIPAddress) Then\n        WScript.Echo targetIPAddress &amp; \" is found on \" &amp; objNicConfig.Description\n        wscript.Quit 1\n      End If\n    Next\n  Next\n  WScript.Echo targetIPAddress &amp; \" not found.\"\n  wscript.Quit 0\nElse\n    WScript.Echo \"target not specified.\"\n    wscript.Quit -1\nEnd If\n";
						
						var SIP_BK_OSTYPE = "Windows";

					} else {
						log('Activating Linux OS demo');
						var sip_bk_vipup = "ifconfig eth0:1 " + SIP_VIRTUAL_IP + " up" ; 

						var sip_bk_vipdown = "ifconfig eth0:1 down" ; 
						var SIP_BK_OSTYPE = "Linux";
					}
				</script>

				<fileio:write host="${SIP_SERV_HOST.name}" filename="${INSTALL_BASE_PATH}SIP${FILE_SEPARATOR}HA_Scripts${FILE_SEPARATOR}${PR_VIP_UP}">
					<content>${sip_pr_vipup}</content>
				</fileio:write>
				<fileio:write host="${SIP_SERV_HOST.name}" filename="${INSTALL_BASE_PATH}SIP${FILE_SEPARATOR}HA_Scripts${FILE_SEPARATOR}${PR_VIP_DOWN}">
					<content>${sip_pr_vipdown}</content>
				</fileio:write>
				<fileio:write host="${SIP_SERV_BK_HOST.name}" filename="${INSTALL_BASE_PATH}SIP${FILE_SEPARATOR}HA_Scripts${FILE_SEPARATOR}${BK_VIP_UP}">
					<content>${sip_bk_vipup}</content>
				</fileio:write>
				<fileio:write host="${SIP_SERV_BK_HOST.name}" filename="${INSTALL_BASE_PATH}SIP${FILE_SEPARATOR}HA_Scripts${FILE_SEPARATOR}${BK_VIP_DOWN}">
					<content>${sip_bk_vipdown}</content>
				</fileio:write>

				<if cond="SIP_PR_OSTYPE == 'Windows'">
					<fileio:write host="${SIP_SERV_HOST.name}" filename="${INSTALL_BASE_PATH}SIP${FILE_SEPARATOR}HA_Scripts${FILE_SEPARATOR}ping.vbs">
						<content>${ping_vbs_pr}</content>
					</fileio:write>
					<fileio:write host="${SIP_SERV_HOST.name}" filename="${INSTALL_BASE_PATH}SIP${FILE_SEPARATOR}HA_Scripts${FILE_SEPARATOR}check_ip.vbs">
						<content>${check_ip_vbs_pr}</content>
					</fileio:write>
				</if>
				<if cond="SIP_BK_OSTYPE == 'Windows'">
					<fileio:write host="${SIP_SERV_BK_HOST.name}" filename="${INSTALL_BASE_PATH}SIP${FILE_SEPARATOR}HA_Scripts${FILE_SEPARATOR}ping.vbs">
						<content>${ping_vbs_bk}</content>
					</fileio:write>
					<fileio:write host="${SIP_SERV_BK_HOST.name}" filename="${INSTALL_BASE_PATH}SIP${FILE_SEPARATOR}HA_Scripts${FILE_SEPARATOR}check_ip.vbs">
						<content>${check_ip_vbs_bk}</content>
					</fileio:write>
				</if>

			</if>

			<!-- Add SIP_Switch Subfolders -->
			<!-- ACDQueues, Extensions, Routing Points, Trunks, Virtual Queues, VoIP -->
			<cfg:readObject name="Switches" type="CfgFolder" tenantdbid="${TENANT.dbid}" result="Switches"/>
			<cfg:readObject name="DNs" type="CfgFolder" result="DNFOLDER" tenantdbid="${TENANT.dbid}">
				<query name="name" value="DNs"/>
				<query name="ownerdbid" value="${SIP_SWITCH.dbid}"/>
				<query name="ownertype" value="CFGSwitch"/>
			</cfg:readObject>

			<cfg:updateObject name="ACDQueues" createonupdate="true" type="CfgFolder" subtype="CFGDN" result="ACDQFOLDER">
				<query name="name" value="ACDQueues"/>
				<query name="ownerdbid" value="${SIP_SWITCH.dbid}"/>
				<query name="ownertype" value="CFGSwitch"/>
				<query name="folderid" value="${DNFOLDER.dbid}"/>
				<parameter name="folderid" value="${DNFOLDER.dbid}"/>
				<parameter name="ownerdbid" value="${SIP_SWITCH.dbid}"/>
				<parameter name="ownertype" value="CFGSwitch"/>
			</cfg:updateObject>

			<cfg:updateObject name="Extensions" createonupdate="true" type="CfgFolder" subtype="CFGDN" result="EXTDNFOLDER">
				<query name="name" value="Extensions"/>
				<query name="ownerdbid" value="${SIP_SWITCH.dbid}"/>
				<query name="ownertype" value="CFGSwitch"/>
				<query name="folderid" value="${DNFOLDER.dbid}"/>
				<parameter name="folderid" value="${DNFOLDER.dbid}"/>
				<parameter name="ownerdbid" value="${SIP_SWITCH.dbid}"/>
				<parameter name="ownertype" value="CFGSwitch"/>
			</cfg:updateObject>

			<cfg:updateObject name="Routing Points" createonupdate="true" type="CfgFolder" subtype="CFGDN" result="RPFOLDER">
				<query name="name" value="Routing Points"/>
				<query name="ownerdbid" value="${SIP_SWITCH.dbid}"/>
				<query name="ownertype" value="CFGSwitch"/>
				<query name="folderid" value="${DNFOLDER.dbid}"/>
				<parameter name="folderid" value="${DNFOLDER.dbid}"/>
				<parameter name="ownerdbid" value="${SIP_SWITCH.dbid}"/>
				<parameter name="ownertype" value="CFGSwitch"/>
			</cfg:updateObject>

			<cfg:updateObject name="Trunks" createonupdate="true" type="CfgFolder" subtype="CFGDN" result="TRUNKFOLDER">
				<query name="name" value="Trunks"/>
				<query name="ownerdbid" value="${SIP_SWITCH.dbid}"/>
				<query name="ownertype" value="CFGSwitch"/>
				<query name="folderid" value="${DNFOLDER.dbid}"/>
				<parameter name="folderid" value="${DNFOLDER.dbid}"/>
				<parameter name="ownerdbid" value="${SIP_SWITCH.dbid}"/>
				<parameter name="ownertype" value="CFGSwitch"/>
			</cfg:updateObject>

			<cfg:updateObject name="Virtual Queues" createonupdate="true" type="CfgFolder" subtype="CFGDN" result="VQFOLDER">
				<query name="name" value="Virtual Queues"/>
				<query name="ownerdbid" value="${SIP_SWITCH.dbid}"/>
				<query name="ownertype" value="CFGSwitch"/>
				<query name="folderid" value="${DNFOLDER.dbid}"/>
				<parameter name="folderid" value="${DNFOLDER.dbid}"/>
				<parameter name="ownerdbid" value="${SIP_SWITCH.dbid}"/>
				<parameter name="ownertype" value="CFGSwitch"/>
			</cfg:updateObject>

			<cfg:updateObject name="VoIP" createonupdate="true" type="CfgFolder" subtype="CFGDN" result="VOIPFOLDER">
				<query name="name" value="VoIP"/>
				<query name="ownerdbid" value="${SIP_SWITCH.dbid}"/>
				<query name="ownertype" value="CFGSwitch"/>
				<query name="folderid" value="${DNFOLDER.dbid}"/>
				<parameter name="folderid" value="${DNFOLDER.dbid}"/>
				<parameter name="ownerdbid" value="${SIP_SWITCH.dbid}"/>
				<parameter name="ownertype" value="CFGSwitch"/>
			</cfg:updateObject>

			<if cond="HA == 'false'">
				<!-- MediaServer VoIP Service -->
				<cfg:updateObject createonupdate="true" name="${MSML_NAME}" tenantdbid="${TENANT.dbid}" type="CfgDN" subtype="CFGVoIPService">
					<query name="number" value="${MSML_NAME}"/>
					<query name="tenantdbid" value="${TENANT.dbid}"/>
					<query name="switchdbid" value="${SIP_SWITCH.dbid}"/>
					<parameter name="folderid" value="${VOIPFOLDER.dbid}"/>
					<parameter name="number" value="${MSML_NAME}"/>
					<parameter name="switchdbid" value="${SIP_SWITCH.dbid}"/>
					<parameter name="routetype" value="CFGDefault"/>
					<parameter name="switchspecifictype" value="1"/>
					<parameter name="state" value="CFGEnabled"/>
					<list name="userproperties">
						<property section="TServer" key="contact" value="sip:${MCP_TRANSPORT}"/>
						<property section="TServer" key="make-call-rfc3725-flow" value="1"/>
						<property section="TServer" key="prefix" value="msml="/>
						<property section="TServer" key="refer-enabled" value="false"/>
						<property section="TServer" key="ring-tone-on-make-call" value="false"/>
						<property section="TServer" key="service-type" value="msml"/>
						<property section="TServer" key="subscription-id" value="${TENANT.name}"/>
					</list>
				</cfg:updateObject>
				<cfg:updateObject createonupdate="true" name="record" tenantdbid="${TENANT.dbid}" type="CfgDN" subtype="CFGVoIPService">
					<query name="number" value="record"/>
					<query name="tenantdbid" value="${TENANT.dbid}"/>
					<query name="switchdbid" value="${SIP_SWITCH.dbid}"/>
					<parameter name="folderid" value="${VOIPFOLDER.dbid}"/>
					<parameter name="number" value="record"/>
					<parameter name="switchdbid" value="${SIP_SWITCH.dbid}"/>
					<parameter name="routetype" value="CFGDefault"/>
					<parameter name="switchspecifictype" value="1"/>
					<parameter name="state" value="CFGEnabled"/>
					<list name="userproperties">
						<property section="TServer" key="contact" value="sip:${MCP_TRANSPORT}"/>
						<property section="TServer" key="service-type" value="recorder"/>
						<property section="TServer" key="request-uri" value="sip:msml@${MCP_SIP_IP}:${MCP_SIP};record="/>
					</list>					
				</cfg:updateObject>
			</if>

			<if cond="HA == 'true'">
				<!-- Resource Manager MSML -->
				<cfg:updateObject createonupdate="true" name="${MSML_NAME}" tenantdbid="${TENANT.dbid}" type="CfgDN" subtype="CFGVoIPService">
					<query name="number" value="${MSML_NAME}"/>
					<query name="tenantdbid" value="${TENANT.dbid}"/>
					<query name="switchdbid" value="${SIP_SWITCH.dbid}"/>
					<parameter name="folderid" value="${VOIPFOLDER.dbid}"/>
					<parameter name="number" value="${MSML_NAME}"/>
					<parameter name="switchdbid" value="${SIP_SWITCH.dbid}"/>
					<parameter name="routetype" value="CFGDefault"/>
					<parameter name="switchspecifictype" value="1"/>
					<parameter name="state" value="CFGEnabled"/>
					<list name="userproperties">
						<property section="TServer" key="contact-list" value="sip:${RMP_TRANSPORT},sip:${RMP_BK_TRANSPORT}"/>
						<property section="TServer" key="make-call-rfc3725-flow" value="1"/>
						<property section="TServer" key="prefix" value="msml="/>
						<property section="TServer" key="refer-enabled" value="false"/>
						<property section="TServer" key="ring-tone-on-make-call" value="false"/>
						<property section="TServer" key="service-type" value="msml"/>
						<property section="TServer" key="subscription-id" value="${TENANT.name}"/>
					</list>
				</cfg:updateObject>
				<cfg:updateObject createonupdate="true" name="record" tenantdbid="${TENANT.dbid}" type="CfgDN" subtype="CFGVoIPService">
					<query name="number" value="record"/>
					<query name="tenantdbid" value="${TENANT.dbid}"/>
					<query name="switchdbid" value="${SIP_SWITCH.dbid}"/>
					<parameter name="folderid" value="${VOIPFOLDER.dbid}"/>
					<parameter name="number" value="record"/>
					<parameter name="switchdbid" value="${SIP_SWITCH.dbid}"/>
					<parameter name="routetype" value="CFGDefault"/>
					<parameter name="switchspecifictype" value="1"/>
					<parameter name="state" value="CFGEnabled"/>
					<list name="userproperties">
						<property section="TServer" key="contact" value="sip:${RMP_TRANSPORT}"/>
						<property section="TServer" key="service-type" value="recorder"/>
						<property section="TServer" key="request-uri" value="sip:msml@${RMP_TRANSPORT};record="/>
					</list>
				</cfg:updateObject>
			</if>

			<!-- Add VoIP Service DN -->
			<cfg:readObject name="VoIP" type="CfgFolder" result="VOIPFOLDER">
				<query name="name" value="VoIP"/>
				<query name="ownerdbid" value="${SIP_SWITCH.dbid}"/>
				<query name="subtype" value="CFGDN"/>
			</cfg:readObject>

			<!-- ## ROUTING StatServer ## -->
			<cfg:readObject name="${ROUTING_STATSERV_HOST.name}" type="CfgHost" result="ROUTING_STATSERV_HOST"/>
			<os:getEnvVar host="${ROUTING_STATSERV_HOST.name}" name="JAVA_HOME" result="JAVA_HOME"/>
			<if cond="CLIENT_SIDE == 'true'">
				<script>
					var ROUTING_STATSERV_TRANS_HOST = ROUTING_STATSERV_HOST.ipaddress;
					log (' Trans Host= ' + ROUTING_STATSERV_TRANS_HOST);
				</script>
			</if>
			<script>			
				log('ROUTING_STATSERV_HOST.ostype = '  + ROUTING_STATSERV_HOST.ostype + ' ; ROUTING_STATSERV_HOST.name = '  + ROUTING_STATSERV_HOST.name);								
				if (/CFGWin/.test(ROUTING_STATSERV_HOST.ostype)) {
					log('Activating Windows OS demo');
					INSTALL_BASE_PATH = INSTALL_BASE_PATH_WIN ;
					FILE_SEPARATOR = FILE_SEPARATOR_WIN ;
					LOGS_BASE_PATH = LOGS_BASE_PATH_WIN ;
					CMD_STRING = "md " + INSTALL_BASE_PATH;
					log('Command String = '  + CMD_STRING);
					CMD_STRING_LOG = "md " + LOGS_BASE_PATH + "StatServer" + FILE_SEPARATOR;
					log('Command String = '  + CMD_STRING_LOG);
				} else {
					log('Activating Linux OS demo');
					INSTALL_BASE_PATH = INSTALL_BASE_PATH_LINUX ;
					FILE_SEPARATOR = FILE_SEPARATOR_LINUX ;
					LOGS_BASE_PATH = LOGS_BASE_PATH_LINUX ;
					CMD_STRING = "mkdir -p " + INSTALL_BASE_PATH;
					log('Command String = '  + CMD_STRING);
					CMD_STRING_LOG = "mkdir -p " + LOGS_BASE_PATH + "StatServer" + FILE_SEPARATOR;
					log('Command String = '  + CMD_STRING_LOG);
				}
		   </script>
			<os:execShellCmd host="${ROUTING_STATSERV_HOST.name}" cmd="${CMD_STRING}" ignoreretvalue="true" result="ResultVar"/>
			<notice msg="${ResultVar}"/>
			<os:execShellCmd host="${ROUTING_STATSERV_HOST.name}" cmd="${CMD_STRING_LOG}" ignoreretvalue="true" result="ResultVar"/>
			<notice msg="${ResultVar}"/>
			<os:installPackage appName="${ROUTING_STATSERV}" host="${ROUTING_STATSERV_HOST.name}" folder="${ROUTING_FOLDER.name}" longName="Stat Server" version="8" tenantdbid="${TENANT.dbid}" overrideTemplate="${ROUTING_STATSERV_TPL}" skipIfInstalled="${SKIP_INSTALL_PKG}" debug="true" appPort="${ROUTING_STATSERV_APPPORT}">
				<list name="silentInstall">
					<property section="IPCommon" key="InstallPath" value="${INSTALL_BASE_PATH}StatServer${FILE_SEPARATOR}${ROUTING_STATSERV}"/>
					<property section="IPCommon" key="DataModel" value="${DATA_MODEL}"/>
					<property section="ConfigServer" key="transport-port" value="${ROUTING_STATSERV_TRANS_PORT}"/>
					<property section="ConfigServer" key="transport-address" value="${ROUTING_STATSERV_TRANS_HOST}"/>
				</list>
			</os:installPackage>
			<cfg:updateObject name="${ROUTING_STATSERV}" type="CfgApplication">
				<parameter name="autorestart" value="${APP_AUTORESTART}"/>
				<list name="options">
					<property section="log" key="Verbose" value="${LOGGING_LEVEL}"/>
					<property section="log" key="${NETWORK_LEVEL}" value="${NETWORK_VALUE}"/>
					<property section="log" key="Expire" value="${EXPIRE_FILE}"/>
					<property section="log" key="Buffering" value="true"/>
					<property section="log" key="Segment" value="${SEGMENT_FILE}"/>
					<property section="log" key="All" value="${LOGS_BASE_PATH}StatServer${FILE_SEPARATOR}${ROUTING_STATSERV}"/>
					<property section="statserver" key="backup-file-name" value="ssbackup_URS.000"/>
					<property section="statserver" key="check-stuck-calls" value="yes"/>
					<property section="statserver" key="filters-allow-wildcards-in-values" value="yes"/>
					<property section="statserver" key="ignore-disabled-objects-in-group-statistics" value="yes"/>
					<property section="statserver" key="management-port" value="${ROUTING_STATSERV_MANPORT}"/>
					<property section="statserver" key="rp-handle-queueing-events" value="yes"/>
					<property section="java-config" key="jvm-path" value="${JVM_PATH}"/>
					<property section="statserver" key="enable-java" value="${ENABLE_JAVA}"/>			
					<property section="java-extensions" key="eServiceContactStat.jar" value="${ESERVICES_JAVA}"/>
					<property section="java-extensions" key="eServiceInteractionStat.jar" value="${ESERVICES_JAVA}"/>
					<property section="java-extensions" key="OCCStatExtension.jar" value="${OUTBOUND_JAVA}"/>
					<property section="java-extensions" key="VCBStatExtension.jar" value="${VOICECB_JAVA}"/>
					<property section="java-extensions" key="BPR_iWD_Extension.jar" value="${IWD_JAVA}"/>
					<property section="java-extensions" key="print-level" value="standard"/>
				</list>
				<list name="appservers">
					<conninfo appserverdbid="${MESS_SERV.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
					<conninfo appserverdbid="${SIP_SERV.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
				</list>
				<list name="userproperties">
					<property section="sml" key="autostart" value="${SCS_AUTOSTART}"/>
				</list>
			</cfg:updateObject>
			<if cond="PROXYCS == 'newcsp' || PROXYCS == 'exicsp'">
				<cfg:updateObject name="${ROUTING_STATSERV}" type="CfgApplication">
					<list name="appservers">
						<conninfo appserverdbid="${CSPROXY.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
					</list>
				</cfg:updateObject>
			</if>

			<if cond="PROXYCS == 'exiconf'">			
			<cfg:updateObject name="${ROUTING_STATSERV}" type="CfgApplication">
				<list name="appservers">
					<conninfo appserverdbid="${CFGSERV.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
				</list>
			</cfg:updateObject>
			</if>

			<cfg:readObject name="${ROUTING_STATSERV}" result="ROUTING_STATSERV_TMP" type="CfgApplication"/>
			<script>
				var newCmdString = searchAndReplaceIPAddress(SearchString, ROUTING_STATSERV_TMP.commandlinearguments, ReplaceString);
			</script>
			<cfg:updateObject name="${ROUTING_STATSERV_TMP.name}" type="CfgApplication">
				<query name="name" value="${ROUTING_STATSERV_TMP.name}"/>
				<parameter name="commandlinearguments" value="${newCmdString}"/>
			</cfg:updateObject>

			<cfg:readObject name="${ROUTING_STATSERV}" result="ROUTING_STATSERV" type="CfgApplication"/>
			<if cond="HA == 'true'">
				<cfg:readObject name="${ROUTING_STATSERV_BK_HOST.name}" type="CfgHost" result="ROUTING_STATSERV_BK_HOST"/>
				<if cond="CLIENT_SIDE == 'true'">
					<script>
						var ROUTING_STATSERV_BK_TRANS_HOST = ROUTING_STATSERV_BK_HOST.ipaddress;
					</script>
				</if>
				<os:getEnvVar host="${ROUTING_STATSERV_BK_HOST.name}" name="JAVA_HOME" result="JAVA_HOME"/>
				<script>			
					log('ROUTING_STATSERV_BK_HOST.ostype = '  + ROUTING_STATSERV_BK_HOST.ostype + ' ; ROUTING_STATSERV_BK_HOST.name = '  + ROUTING_STATSERV_BK_HOST.name);
									
					if (/CFGWin/.test(ROUTING_STATSERV_BK_HOST.ostype)) {
						log('Activating Windows OS demo');
						INSTALL_BASE_PATH = INSTALL_BASE_PATH_WIN ;
						FILE_SEPARATOR = FILE_SEPARATOR_WIN ;
						LOGS_BASE_PATH = LOGS_BASE_PATH_WIN ;
						CMD_STRING = "md " + INSTALL_BASE_PATH;
						log('Command String = '  + CMD_STRING);
						CMD_STRING_LOG = "md " + LOGS_BASE_PATH + "StatServer" + FILE_SEPARATOR;
						log('Command String = '  + CMD_STRING_LOG);
					} else {
						log('Activating Linux OS demo');
						INSTALL_BASE_PATH = INSTALL_BASE_PATH_LINUX ;
						FILE_SEPARATOR = FILE_SEPARATOR_LINUX ;
						LOGS_BASE_PATH = LOGS_BASE_PATH_LINUX ;
						CMD_STRING = "mkdir -p " + INSTALL_BASE_PATH;
						log('Command String = '  + CMD_STRING);
						CMD_STRING_LOG = "mkdir -p " + LOGS_BASE_PATH + "StatServer" + FILE_SEPARATOR;
						log('Command String = '  + CMD_STRING_LOG);
					}
			   </script>
				<os:execShellCmd host="${ROUTING_STATSERV_BK_HOST.name}" cmd="${CMD_STRING}" ignoreretvalue="true" result="ResultVar"/>
				<notice msg="${ResultVar}"/>
				<os:execShellCmd host="${ROUTING_STATSERV_BK_HOST.name}" cmd="${CMD_STRING_LOG}" ignoreretvalue="true" result="ResultVar"/>
				<notice msg="${ResultVar}"/>
				<os:installPackage appName="${ROUTING_STATSERV_BK}" host="${ROUTING_STATSERV_BK_HOST.name}" folder="${ROUTING_FOLDER.name}" longName="Stat Server" version="8" tenantdbid="${TENANT.dbid}" overrideTemplate="${ROUTING_STATSERV_TPL}" skipIfInstalled="${SKIP_INSTALL_PKG}" debug="true" appPort="${ROUTING_STATSERV_BK_APPPORT}">
					<list name="silentInstall">
						<property section="IPCommon" key="InstallPath" value="${INSTALL_BASE_PATH}StatServer${FILE_SEPARATOR}${ROUTING_STATSERV_BK}"/>
						<property section="IPCommon" key="DataModel" value="${DATA_MODEL}"/>
						<property section="ConfigServer" key="transport-port" value="${ROUTING_STATSERV_BK_TRANS_PORT}"/>
						<property section="ConfigServer" key="transport-address" value="${ROUTING_STATSERV_BK_TRANS_HOST}"/>
					</list>
				</os:installPackage>
				<cfg:updateObject name="${ROUTING_STATSERV_BK}" type="CfgApplication">
					<parameter name="autorestart" value="${APP_AUTORESTART}"/>
					<list name="options">
						<property section="log" key="Verbose" value="${LOGGING_LEVEL}"/>
						<property section="log" key="${NETWORK_LEVEL}" value="${NETWORK_VALUE}"/>
						<property section="log" key="Expire" value="${EXPIRE_FILE}"/>
						<property section="log" key="Buffering" value="true"/>
						<property section="log" key="Segment" value="${SEGMENT_FILE}"/>
						<property section="log" key="All" value="${LOGS_BASE_PATH}StatServer${FILE_SEPARATOR}${ROUTING_STATSERV_BK}"/>
						<property section="statserver" key="backup-file-name" value="ssbackup_URS_BK.000"/>
						<property section="statserver" key="check-stuck-calls" value="yes"/>
						<property section="statserver" key="filters-allow-wildcards-in-values" value="yes"/>
						<property section="statserver" key="ignore-disabled-objects-in-group-statistics" value="yes"/>
						<property section="statserver" key="management-port" value="${ROUTING_STATSERV_MANPORT}"/>
						<property section="statserver" key="rp-handle-queueing-events" value="yes"/>
						<property section="java-config" key="jvm-path" value="${JVM_PATH}"/>
						<property section="statserver" key="enable-java" value="${ENABLE_JAVA}"/>			
						<property section="java-extensions" key="eServiceContactStat.jar" value="${ESERVICES_JAVA}"/>
						<property section="java-extensions" key="eServiceInteractionStat.jar" value="${ESERVICES_JAVA}"/>
						<property section="java-extensions" key="OCCStatExtension.jar" value="${OUTBOUND_JAVA}"/>
						<property section="java-extensions" key="VCBStatExtension.jar" value="${VOICECB_JAVA}"/>
						<property section="java-extensions" key="BPR_iWD_Extension.jar" value="${IWD_JAVA}"/>
						<property section="java-extensions" key="print-level" value="standard"/>
					</list>
					<list name="userproperties">
						<property section="sml" key="autostart" value="${SCS_AUTOSTART}"/>
					</list>
				</cfg:updateObject>

				<cfg:readObject name="${ROUTING_STATSERV_BK}" result="ROUTING_STATSERV_BK_TMP" type="CfgApplication"/>
				<script>
					var newCmdString = searchAndReplaceIPAddress(SearchString, ROUTING_STATSERV_BK_TMP.commandlinearguments, ReplaceString);
				</script>
				<cfg:updateObject name="${ROUTING_STATSERV_BK_TMP.name}" type="CfgApplication">
					<query name="name" value="${ROUTING_STATSERV_BK_TMP.name}"/>
					<parameter name="commandlinearguments" value="${newCmdString}"/>
				</cfg:updateObject>

				<cfg:readObject name="${ROUTING_STATSERV_BK}" result="ROUTING_STATSERV_BK" type="CfgApplication"/>
				<cfg:updateObject name="${ROUTING_STATSERV.name}" type="CfgApplication">
					<parameter name="backupserverdbid" value="${ROUTING_STATSERV_BK.dbid}"/>
					<parameter name="redundancytype" value="CFGHTWarmStanby"/>
				</cfg:updateObject>
			</if>

			<!-- ## URS ## -->
			<cfg:readObject name="${URS_HOST.name}" type="CfgHost" result="URS_HOST"/>
			<script>
				log('URS_HOST.ostype = '  + URS_HOST.ostype + ' ; URS_HOST.name = '  + URS_HOST.name);								
				if (/CFGWin/.test(URS_HOST.ostype)) {
					log('Activating Windows OS demo');
					INSTALL_BASE_PATH = INSTALL_BASE_PATH_WIN ;
					FILE_SEPARATOR = FILE_SEPARATOR_WIN ;
					LOGS_BASE_PATH = LOGS_BASE_PATH_WIN ;
					CMD_STRING = "md " + INSTALL_BASE_PATH;
					log('Command String = '  + CMD_STRING);
					CMD_STRING_LOG = "md " + LOGS_BASE_PATH + "URServer" + FILE_SEPARATOR;
					log('Command String = '  + CMD_STRING_LOG);
				} else {
					log('Activating Linux OS demo');
					INSTALL_BASE_PATH = INSTALL_BASE_PATH_LINUX ;
					FILE_SEPARATOR = FILE_SEPARATOR_LINUX ;
					LOGS_BASE_PATH = LOGS_BASE_PATH_LINUX ;
					CMD_STRING = "mkdir -p " + INSTALL_BASE_PATH;
					log('Command String = '  + CMD_STRING);
					CMD_STRING_LOG = "mkdir -p " + LOGS_BASE_PATH + "URServer" + FILE_SEPARATOR;
					log('Command String = '  + CMD_STRING_LOG);
				}
			</script>
			<os:execShellCmd host="${URS_HOST.name}" cmd="${CMD_STRING}" ignoreretvalue="true" result="ResultVar"/>
			<notice msg="${ResultVar}"/>
			<os:execShellCmd host="${URS_HOST.name}" cmd="${CMD_STRING_LOG}" ignoreretvalue="true" result="ResultVar"/>
			<notice msg="${ResultVar}"/>
			<if cond="CLIENT_SIDE == 'true'">
				<script>
					var URS_TRANS_HOST = URS_HOST.ipaddress;
				</script>
				<os:installPackage appName="${URS}" host="${URS_HOST.name}" folder="${ROUTING_FOLDER.name}" skipIfInstalled="${SKIP_INSTALL_PKG}" longName="Universal Routing Server" version="8" tenantdbid="${TENANT.dbid}" debug="true" appPort="${URS_APPPORT}" overrideTemplate="${URS_TPL}">
					<list name="silentInstall">
						<property section="License" key="Port" value="${LICENSE_PORT}"/>
						<property section="License" key="Host" value="${LICENSE_HOST.name}"/>
						<property section="IPCommon" key="InstallPath" value="${INSTALL_BASE_PATH}URS${FILE_SEPARATOR}${URS}"/>
						<property section="ConfigServer" key="transport-port" value="${URS_TRANS_PORT}"/>
						<property section="ConfigServer" key="transport-address" value="${URS_TRANS_HOST}"/>
					</list>
				</os:installPackage>
			</if>
			<!-- ## URS Cannot accept transport-port and transport-host with empty value ## -->
			<if cond="CLIENT_SIDE == 'false'">
				<script>
					var URS_TRANS_HOST = URS_HOST.ipaddress;
					var URS_TRANS_PORT = '0';
				</script>
				<os:installPackage appName="${URS}" host="${URS_HOST.name}" folder="${ROUTING_FOLDER.name}" skipIfInstalled="${SKIP_INSTALL_PKG}" longName="Universal Routing Server" version="8" tenantdbid="${TENANT.dbid}" debug="true" appPort="${URS_APPPORT}" overrideTemplate="${URS_TPL}">
					<list name="silentInstall">
						<property section="License" key="Port" value="${LICENSE_PORT}"/>
						<property section="License" key="Host" value="${LICENSE_HOST.name}"/>
						<property section="IPCommon" key="InstallPath" value="${INSTALL_BASE_PATH}URS${FILE_SEPARATOR}${URS}"/>
						<property section="IPCommon" key="DataModel" value="${DATA_MODEL}"/>
					</list> 
					<list name="silentInstallRemove"> 
						<property section="ConfigServer" key="transport-port" value="${URS_TRANS_PORT}"/>
						<property section="ConfigServer" key="transport-address" value="${URS_TRANS_HOST}"/>
					</list>
				</os:installPackage>
			</if>
			<cfg:updateObject name="${URS}" type="CfgApplication">
				<parameter name="autorestart" value="${APP_AUTORESTART}"/>
				<list  name="portinfos">
					<portinfo id="HTTP" connprotocol= "http" port="${URS_HTTPPORT}"/>
				</list>
				<list name="options">
					<property section="log" key="verbose" value="${LOGGING_LEVEL}"/>
					<property section="log" key="${NETWORK_LEVEL}" value="${NETWORK_VALUE}"/>
					<property section="log" key="expire" value="${EXPIRE_FILE}"/>
					<property section="log" key="buffering" value="true"/>
					<property section="log" key="segment" value="${SEGMENT_FILE}"/>
					<property section="log" key="all" value="${LOGS_BASE_PATH}URServer${FILE_SEPARATOR}${URS}"/>
					<property section="default" key="route_consult_call" value="true"/>
					<property section="default" key="default_stat_server" value="${ROUTING_STATSERV.name}"/>
					<property section="default" key="management-port" value="${URS_MANPORT}"/>
					<property section="default" key="function_compatibility" value="8.0"/>
				</list>
				<list name="appservers">
					<conninfo appserverdbid="${MESS_SERV.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
					<conninfo appserverdbid="${SIP_SERV.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
					<conninfo appserverdbid="${ROUTING_STATSERV.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
				</list>
				<list name="userproperties">
					<property section="sml" key="autostart" value="${SCS_AUTOSTART}"/>
				</list>
			</cfg:updateObject>
			<if cond="PROXYCS == 'newcsp' || PROXYCS == 'exicsp'">
				<cfg:updateObject name="${URS}" type="CfgApplication">
					<list name="appservers">
						<conninfo appserverdbid="${CSPROXY.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
					</list>
				</cfg:updateObject>
			</if>

			<if cond="PROXYCS == 'exiconf'">			
				<cfg:updateObject name="${URS}" type="CfgApplication">
					<list name="appservers">
						<conninfo appserverdbid="${CFGSERV.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
					</list>
				</cfg:updateObject>
			</if>

			<cfg:readObject name="${URS}" result="URS_TMP" type="CfgApplication"/>
			<script>
				var newCmdString = searchAndReplaceIPAddress(SearchString, URS_TMP.commandlinearguments, ReplaceString);
			</script>
			<cfg:updateObject name="${URS_TMP.name}" type="CfgApplication">
				<query name="name" value="${URS_TMP.name}"/>
				<parameter name="commandlinearguments" value="${newCmdString}"/>
			</cfg:updateObject>

			<cfg:readObject name="${URS}" type="CfgApplication" result="URS"/>
			<if cond="HA == 'true'">
				<cfg:readObject name="${URS_BK_HOST.name}" type="CfgHost" result="URS_BK_HOST"/>
				<script>
					log('URS_BK_HOST.ostype = '  + URS_BK_HOST.ostype + ' ; URS_BK_HOST.name = '  + URS_BK_HOST.name);					
					if (/CFGWin/.test(URS_BK_HOST.ostype)) {
						log('Activating Windows OS demo');
						INSTALL_BASE_PATH = INSTALL_BASE_PATH_WIN ;
						FILE_SEPARATOR = FILE_SEPARATOR_WIN ;
						LOGS_BASE_PATH = LOGS_BASE_PATH_WIN ;
						CMD_STRING = "md " + INSTALL_BASE_PATH;
						log('Command String = '  + CMD_STRING);
						CMD_STRING_LOG = "md " + LOGS_BASE_PATH + "URServer" + FILE_SEPARATOR;
						log('Command String = '  + CMD_STRING_LOG);
					} else {
						log('Activating Linux OS demo');
						INSTALL_BASE_PATH = INSTALL_BASE_PATH_LINUX ;
						FILE_SEPARATOR = FILE_SEPARATOR_LINUX ;
						LOGS_BASE_PATH = LOGS_BASE_PATH_LINUX ;
						CMD_STRING = "mkdir -p " + INSTALL_BASE_PATH;
						log('Command String = '  + CMD_STRING);
						CMD_STRING_LOG = "mkdir -p " + LOGS_BASE_PATH + "URServer" + FILE_SEPARATOR;
						log('Command String = '  + CMD_STRING_LOG);
					}
				</script>
				<os:execShellCmd host="${URS_BK_HOST.name}" cmd="${CMD_STRING}" ignoreretvalue="true" result="ResultVar"/>
				<notice msg="${ResultVar}"/>
				<os:execShellCmd host="${URS_BK_HOST.name}" cmd="${CMD_STRING_LOG}" ignoreretvalue="true" result="ResultVar"/>
				<notice msg="${ResultVar}"/>
				<if cond="CLIENT_SIDE == 'true'">
					<script>
						var URS_BK_TRANS_HOST = URS_BK_HOST.ipaddress;
					</script>
					<os:installPackage appName="${URS_BK}" host="${URS_BK_HOST.name}" folder="${ROUTING_FOLDER.name}" skipIfInstalled="${SKIP_INSTALL_PKG}" longName="Universal Routing Server" version="8" tenantdbid="${TENANT.dbid}" debug="true" appPort="${URS_BK_APPPORT}" overrideTemplate="${URS_TPL}">
						<list name="silentInstall">
							<property section="License" key="Port" value="${LICENSE_BK_PORT}"/>
							<property section="License" key="Host" value="${LICENSE_BK_HOST.name}"/>
							<property section="IPCommon" key="InstallPath" value="${INSTALL_BASE_PATH}URS${FILE_SEPARATOR}${URS_BK}"/>
							<property section="ConfigServer" key="transport-port" value="${URS_BK_TRANS_PORT}"/>
							<property section="ConfigServer" key="transport-address" value="${URS_BK_TRANS_HOST}"/>
						</list>
					</os:installPackage>
				</if>
				<!-- ## URS Cannot accept transport-port and transport-host with empty value ## -->
				<if cond="CLIENT_SIDE == 'false'">
					<script>
						var URS_BK_TRANS_HOST = URS_BK_HOST.ipaddress;
						var URS_BK_TRANS_PORT = '0';
					</script>
					<os:installPackage appName="${URS_BK}" host="${URS_BK_HOST.name}" folder="${ROUTING_FOLDER.name}" skipIfInstalled="${SKIP_INSTALL_PKG}" longName="Universal Routing Server" version="8" tenantdbid="${TENANT.dbid}" debug="true" appPort="${URS_BK_APPPORT}" overrideTemplate="${URS_TPL}">
						<list name="silentInstall">
							<property section="License" key="Port" value="${LICENSE_BK_PORT}"/>
							<property section="License" key="Host" value="${LICENSE_BK_HOST.name}"/>
							<property section="IPCommon" key="InstallPath" value="${INSTALL_BASE_PATH}URS${FILE_SEPARATOR}${URS_BK}"/>
							<property section="IPCommon" key="DataModel" value="${DATA_MODEL}"/>
						</list>
						<list name="silentInstallRemove"> 
							<property section="ConfigServer" key="transport-port" value="${URS_BK_TRANS_PORT}"/>
							<property section="ConfigServer" key="transport-address" value="${URS_BK_TRANS_HOST}"/>
						</list> 
					</os:installPackage>
				</if>
				<cfg:updateObject name="${URS_BK}" type="CfgApplication">
					<list  name="portinfos">
						<portinfo id="HTTP" connprotocol= "http" port="${URS_BK_HTTPPORT}"/>
					</list>
					<parameter name="autorestart" value="${APP_AUTORESTART}"/>
					<list name="options">
						<property section="log" key="verbose" value="${LOGGING_LEVEL}"/>
						<property section="log" key="${NETWORK_LEVEL}" value="${NETWORK_VALUE}"/>
						<property section="log" key="expire" value="${EXPIRE_FILE}"/>
						<property section="log" key="buffering" value="true"/>
						<property section="log" key="segment" value="${SEGMENT_FILE}"/>
						<property section="log" key="all" value="${LOGS_BASE_PATH}URServer${FILE_SEPARATOR}${URS_BK}"/>
						<property section="default" key="route_consult_call" value="true"/>
						<property section="default" key="default_stat_server" value="${ROUTING_STATSERV.name}"/>
						<property section="default" key="management-port" value="${URS_BK_MANPORT}"/>
						<property section="default" key="function_compatibility" value="8.0"/>
					</list>
					<list name="userproperties">
						<property section="sml" key="autostart" value="${SCS_AUTOSTART}"/>
					</list>
				</cfg:updateObject>

				<cfg:readObject name="${URS_BK}" result="URS_BK_TMP" type="CfgApplication"/>
				<script>
					var newCmdString = searchAndReplaceIPAddress(SearchString, URS_BK_TMP.commandlinearguments, ReplaceString);
				</script>
				<cfg:updateObject name="${URS_BK_TMP.name}" type="CfgApplication">
					<query name="name" value="${URS_BK_TMP.name}"/>
					<parameter name="commandlinearguments" value="${newCmdString}"/>
				</cfg:updateObject>

				<cfg:readObject name="${URS_BK}" result="URS_BK" type="CfgApplication"/>
				<cfg:updateObject name="${URS.name}" type="CfgApplication">
					<parameter name="backupserverdbid" value="${URS_BK.dbid}"/>
					<parameter name="redundancytype" value="CFGHTHotStanby"/>
				</cfg:updateObject>
			</if>
			<!-- ## ORS ## -->
			<cfg:readObject name="${ORS_HOST.name}" type="CfgHost" result="ORS_HOST"/>
			<script>
				log('ORS_HOST.ostype = '  + ORS_HOST.ostype + ' ; ORS_HOST.name = '  + ORS_HOST.name);								
				if (/CFGWin/.test(ORS_HOST.ostype)) {
					log('Activating Windows OS demo');
					INSTALL_BASE_PATH = INSTALL_BASE_PATH_WIN ;
					FILE_SEPARATOR = FILE_SEPARATOR_WIN ;
					LOGS_BASE_PATH = LOGS_BASE_PATH_WIN ;
					CMD_STRING = "md " + INSTALL_BASE_PATH;
					log('Command String = '  + CMD_STRING);
					CMD_STRING_LOG = "md " + LOGS_BASE_PATH + "ORServer" + FILE_SEPARATOR;
					log('Command String = '  + CMD_STRING_LOG);
				} else {
					log('Activating Linux OS demo');
					INSTALL_BASE_PATH = INSTALL_BASE_PATH_LINUX ;
					FILE_SEPARATOR = FILE_SEPARATOR_LINUX ;
					LOGS_BASE_PATH = LOGS_BASE_PATH_LINUX ;
					CMD_STRING = "mkdir -p " + INSTALL_BASE_PATH;
					log('Command String = '  + CMD_STRING);
					CMD_STRING_LOG = "mkdir -p " + LOGS_BASE_PATH + "ORServer" + FILE_SEPARATOR;
					log('Command String = '  + CMD_STRING_LOG);
				}
			</script>
			<os:execShellCmd host="${ORS_HOST.name}" cmd="${CMD_STRING}" ignoreretvalue="true" result="ResultVar"/>
			<notice msg="${ResultVar}"/>
			<os:execShellCmd host="${ORS_HOST.name}" cmd="${CMD_STRING_LOG}" ignoreretvalue="true" result="ResultVar"/>
			<notice msg="${ResultVar}"/>
			<if cond="CLIENT_SIDE == 'true' || ORS_RESTful == 'true'">
				<script>
					var ORS_TRANS_HOST = ORS_HOST.ipaddress;
				</script>
				<os:installPackage appName="${ORS}" host="${ORS_HOST.name}" folder="${ROUTING_FOLDER.name}" skipIfInstalled="${SKIP_INSTALL_PKG}" longName="Orchestration Server" version="8" tenantdbid="${TENANT.dbid}" debug="true" appPort="${ORS_APPPORT}" overrideTemplate="${ORS_TPL}">
					<list name="silentInstall">
						<property section="IPCommon" key="InstallPath" value="${INSTALL_BASE_PATH}ORS${FILE_SEPARATOR}${ORS}"/>
						<property section="IPCommon" key="DataModel" value="${DATA_MODEL}"/>
						<property section="ConfigServer" key="transport-port" value="${ORS_TRANS_PORT}"/>
						<property section="ConfigServer" key="transport-address" value="${ORS_TRANS_HOST}"/>
					</list>
				</os:installPackage>
			</if>
			<!-- ## ORS Cannot accept transport-port and transport-host with empty value ## -->
			<if cond="CLIENT_SIDE == 'false'">
				<script>
					var ORS_TRANS_HOST = ORS_HOST.ipaddress;
					var ORS_TRANS_PORT = '0';
				</script>
				<os:installPackage appName="${ORS}" host="${ORS_HOST.name}" folder="${ROUTING_FOLDER.name}" skipIfInstalled="${SKIP_INSTALL_PKG}" longName="Orchestration Server" version="8" tenantdbid="${TENANT.dbid}" debug="true" appPort="${ORS_APPPORT}" overrideTemplate="${ORS_TPL}">
					<list name="silentInstall">
						<property section="IPCommon" key="InstallPath" value="${INSTALL_BASE_PATH}ORS${FILE_SEPARATOR}${ORS}"/>
						<property section="IPCommon" key="DataModel" value="${DATA_MODEL}"/>
					</list>
					<list name="silentInstallRemove"> 
						<property section="ConfigServer" key="transport-port" value="${ORS_TRANS_PORT}"/>
						<property section="ConfigServer" key="transport-address" value="${ORS_TRANS_HOST}"/>
					</list> 
				</os:installPackage>
			</if>
			<cfg:updateObject name="${ORS}" type="CfgApplication">
				<parameter name="autorestart" value="${APP_AUTORESTART}"/>
				<list name="options">
					<property section="log" key="verbose" value="${LOGGING_LEVEL}"/>
					<property section="log" key="${NETWORK_LEVEL}" value="${NETWORK_VALUE}"/>
					<property section="log" key="expire" value="${EXPIRE_FILE}"/>
					<property section="log" key="buffering" value="true"/>
					<property section="log" key="segment" value="${SEGMENT_FILE}"/>
					<property section="log" key="all" value="${LOGS_BASE_PATH}ORServer${FILE_SEPARATOR}${ORS}"/>
					<property section="web_services" key="hostname" value="${ORS_HOST.name}"/>
					<property section="web_services" key="port" value="${ORS_WEB_PORT}"/>
					<property section="persistence" key="cassandra-listenport" value="${CASSANDRA_PORT}"/>
					<property section="persistence" key="cassandra-nodes" value="${ORS_HOST.name}"/>
					<property section="persistence" key="type" value="cassandra"/>
				</list>
				<list name="appservers">
					<conninfo appserverdbid="${MESS_SERV.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
					<conninfo appserverdbid="${SIP_SERV.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
					<conninfo appserverdbid="${URS.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
				</list>
				<list name="userproperties">
					<property section="sml" key="autostart" value="${SCS_AUTOSTART}"/>
				</list>
			</cfg:updateObject>
			<if cond="PROXYCS == 'newcsp' || PROXYCS == 'exicsp'">
				<cfg:updateObject name="${ORS}" type="CfgApplication">
					<list name="appservers">
						<conninfo appserverdbid="${CSPROXY.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
					</list>
				</cfg:updateObject>
			</if>

			<if cond="PROXYCS == 'exiconf'">			
			<cfg:updateObject name="${ORS}" type="CfgApplication">
				<list name="appservers">
					<conninfo appserverdbid="${CFGSERV.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
				</list>
			</cfg:updateObject>
			</if>

			<cfg:readObject name="${ORS}" result="ORS_TMP" type="CfgApplication"/>
			<script>
				var newCmdString = searchAndReplaceIPAddress(SearchString, ORS_TMP.commandlinearguments, ReplaceString);
			</script>
			<cfg:updateObject name="${ORS_TMP.name}" type="CfgApplication">
				<query name="name" value="${ORS_TMP.name}"/>
				<parameter name="commandlinearguments" value="${newCmdString}"/>
			</cfg:updateObject>

			<cfg:readObject name="${ORS}" result="ORS" type="CfgApplication"/>
			<cfg:updateObject name="${ORS_TRANSACTION_NAME}" tenantdbid="${TENANT.dbid}" subtype="CFGTRTList" type="CfgTransaction">
				<query name="name" value="${ORS_TRANSACTION_NAME}"/>
				<query name="tenantdbid" value="${TENANT.dbid}"/>
				<parameter name="alias" value="${ORS_TRANSACTION_NAME}"/>
				<parameter name="description" value="ORS Cluster Transaction Object"/>
				<list name="userproperties">
					<property section="${ORS_CLUSTER_NAME}" key="${ORS.name}" value=""/>
				</list>
			</cfg:updateObject>

			<if cond="HA == 'true'">
				<cfg:readObject name="${ORS_BK_HOST.name}" type="CfgHost" result="ORS_BK_HOST"/>
				<script>
					log('ORS_BK_HOST.ostype = '  + ORS_BK_HOST.ostype + ' ; ORS_BK_HOST.name = '  + ORS_BK_HOST.name);
					if (/CFGWin/.test(ORS_BK_HOST.ostype)) {
						log('Activating Windows OS demo');
						INSTALL_BASE_PATH = INSTALL_BASE_PATH_WIN ;
						FILE_SEPARATOR = FILE_SEPARATOR_WIN ;
						LOGS_BASE_PATH = LOGS_BASE_PATH_WIN ;
						CMD_STRING = "md " + INSTALL_BASE_PATH;
						log('Command String = '  + CMD_STRING);
						CMD_STRING_LOG = "md " + LOGS_BASE_PATH + "ORServer" + FILE_SEPARATOR;
						log('Command String = '  + CMD_STRING_LOG);
					} else {
						log('Activating Linux OS demo');
						INSTALL_BASE_PATH = INSTALL_BASE_PATH_LINUX ;
						FILE_SEPARATOR = FILE_SEPARATOR_LINUX ;
						LOGS_BASE_PATH = LOGS_BASE_PATH_LINUX ;
						CMD_STRING = "mkdir -p " + INSTALL_BASE_PATH;
						log('Command String = '  + CMD_STRING);
						CMD_STRING_LOG = "mkdir -p " + LOGS_BASE_PATH + "ORServer" + FILE_SEPARATOR;
						log('Command String = '  + CMD_STRING_LOG);
					}
				</script>
				<os:execShellCmd host="${ORS_BK_HOST.name}" cmd="${CMD_STRING}" ignoreretvalue="true" result="ResultVar"/>
				<notice msg="${ResultVar}"/>
				<os:execShellCmd host="${ORS_BK_HOST.name}" cmd="${CMD_STRING_LOG}" ignoreretvalue="true" result="ResultVar"/>
				<notice msg="${ResultVar}"/>
				<if cond="CLIENT_SIDE == 'true' || ORS_RESTful == 'true'">
					<script>
						var ORS_BK_TRANS_HOST = ORS_BK_HOST.ipaddress;
					</script>
					<os:installPackage appName="${ORS_BK}" host="${ORS_BK_HOST.name}" folder="${ROUTING_FOLDER.name}" skipIfInstalled="${SKIP_INSTALL_PKG}" longName="Orchestration Server" version="8" tenantdbid="${TENANT.dbid}" debug="true" appPort="${ORS_BK_APPPORT}" overrideTemplate="${ORS_TPL}">
						<list name="silentInstall">
							<property section="IPCommon" key="InstallPath" value="${INSTALL_BASE_PATH}ORS${FILE_SEPARATOR}${ORS_BK}"/>
							<property section="IPCommon" key="DataModel" value="${DATA_MODEL}"/>
							<property section="ConfigServer" key="transport-port" value="${ORS_BK_TRANS_PORT}"/>
							<property section="ConfigServer" key="transport-address" value="${ORS_BK_TRANS_HOST}"/>
						</list>
					</os:installPackage>
				</if>
				<!-- ## ORS Cannot accept transport-port and transport-host with empty value ## -->
				<if cond="CLIENT_SIDE == 'false'">
					<script>
						var ORS_BK_TRANS_HOST = ORS_BK_HOST.ipaddress;
						var ORS_BK_TRANS_PORT = '0';
					</script>
					<os:installPackage appName="${ORS_BK}" host="${ORS_BK_HOST.name}" folder="${ROUTING_FOLDER.name}" skipIfInstalled="${SKIP_INSTALL_PKG}" longName="Orchestration Server" version="8" tenantdbid="${TENANT.dbid}" debug="true" appPort="${ORS_BK_APPPORT}" overrideTemplate="${ORS_TPL}">
						<list name="silentInstall">
							<property section="IPCommon" key="InstallPath" value="${INSTALL_BASE_PATH}ORS${FILE_SEPARATOR}${ORS_BK}"/>
							<property section="IPCommon" key="DataModel" value="${DATA_MODEL}"/>
						</list>
						<list name="silentInstallRemove"> 
							<property section="ConfigServer" key="transport-port" value="${ORS_BK_TRANS_PORT}"/>
							<property section="ConfigServer" key="transport-address" value="${ORS_BK_TRANS_HOST}"/>
						</list> 
					</os:installPackage>
				</if>
				<if cond="ORS_RESTful == 'true'">
					<script>
						var ORS_BK_TRANS_HOST = ORS_BK_HOST.ipaddress;
					</script>
					<os:installPackage appName="${ORS_BK}" host="${ORS_BK_HOST.name}" folder="${ROUTING_FOLDER.name}" skipIfInstalled="${SKIP_INSTALL_PKG}" longName="Orchestration Server" version="8" tenantdbid="${TENANT.dbid}" debug="true" appPort="${ORS_BK_APPPORT}" overrideTemplate="${ORS_TPL}">
						<list name="silentInstall">
							<property section="IPCommon" key="InstallPath" value="${INSTALL_BASE_PATH}ORS${FILE_SEPARATOR}${ORS_BK}"/>
							<property section="IPCommon" key="DataModel" value="${DATA_MODEL}"/>
							<property section="ConfigServer" key="transport-port" value="${ORS_BK_TRANS_PORT}"/>
							<property section="ConfigServer" key="transport-address" value="${ORS_BK_TRANS_HOST}"/>
						</list>
					</os:installPackage>
				</if>
				<cfg:updateObject name="${ORS_BK}" type="CfgApplication">
					<parameter name="autorestart" value="${APP_AUTORESTART}"/>
					<list name="options">
						<property section="log" key="verbose" value="${LOGGING_LEVEL}"/>
						<property section="log" key="${NETWORK_LEVEL}" value="${NETWORK_VALUE}"/>
						<property section="log" key="expire" value="${EXPIRE_FILE}"/>
						<property section="log" key="buffering" value="true"/>
						<property section="log" key="segment" value="${SEGMENT_FILE}"/>
						<property section="log" key="all" value="${LOGS_BASE_PATH}ORServer${FILE_SEPARATOR}${ORS_BK}"/>
						<property section="web_services" key="hostname" value="${ORS_BK_HOST.name}"/>
						<property section="web_services" key="port" value="${ORS_WEB_PORT}"/>
						<property section="persistence" key="cassandra-listenport" value="${CASSANDRA_PORT}"/>
						<property section="persistence" key="cassandra-nodes" value="${ORS_HOST.name};${ORS_BK_HOST.name}"/>
						<property section="persistence" key="enabled" value="true"/>
						<property section="persistence" key="type" value="cassandra"/>
						<property section="scxml" key="persistence-default" value="true"/>
					</list>
					<list name="appservers">
						<conninfo appserverdbid="${MESS_SERV.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
						<conninfo appserverdbid="${SIP_SERV.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
						<conninfo appserverdbid="${URS.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
					</list>
					<list name="userproperties">
						<property section="sml" key="autostart" value="${SCS_AUTOSTART}"/>
					</list>
				</cfg:updateObject>

				<cfg:readObject name="${ORS_BK}" result="ORS_BK_TMP" type="CfgApplication"/>
				<script>
					var newCmdString = searchAndReplaceIPAddress(SearchString, ORS_BK_TMP.commandlinearguments, ReplaceString);
				</script>
				<cfg:updateObject name="${ORS_BK_TMP.name}" type="CfgApplication">
					<query name="name" value="${ORS_BK_TMP.name}"/>
					<parameter name="commandlinearguments" value="${newCmdString}"/>
				</cfg:updateObject>

				<cfg:readObject name="${ORS_BK}" result="ORS_BK" type="CfgApplication"/>
				<cfg:updateObject name="${ORS.name}" type="CfgApplication">
					<parameter name="backupserverdbid" value="${ORS_BK.dbid}"/>
					<parameter name="redundancytype" value="CFGHTWarmStanby"/>
				</cfg:updateObject>

				<cfg:updateObject name="${ORS_TRANSACTION_NAME}" tenantdbid="${TENANT.dbid}" subtype="CFGTRTList" type="CfgTransaction">
					<query name="name" value="${ORS_TRANSACTION_NAME}"/>
					<query name="tenantdbid" value="${TENANT.dbid}"/>
					<list name="userproperties">
						<property section="${ORS_CLUSTER_NAME}" key="${ORS_BK.name}" value=""/>
					</list>
				</cfg:updateObject>

				<cfg:updateObject name="${ORS.name}" type="CfgApplication">
					<list name="options">
						<property section="persistence" key="cassandra-nodes" value="${ORS_HOST.name};${ORS_BK_HOST.name}"/>
						<property section="persistence" key="enabled" value="true"/>
						<property section="persistence" key="type" value="cassandra"/>
						<property section="scxml" key="persistence-default" value="true"/>
					</list>
				</cfg:updateObject>

			</if>

			<!-- ## MCP ## -->
			<cfg:readObject name="${MCP_HOST.name}" type="CfgHost" result="MCP_HOST"/>
			<if cond="CLIENT_SIDE == 'true'">
				<script>
					var MCP_TRANS_HOST = MCP_HOST.ipaddress;
				</script>
			</if>
			<script>
				log('MCP_HOST.ostype = '  + MCP_HOST.ostype + ' ; MCP_HOST.name = '  + MCP_HOST.name);
				if (/CFGWin/.test(MCP_HOST.ostype)) {
					log('Activating Windows OS demo');
					INSTALL_BASE_PATH = INSTALL_BASE_PATH_WIN ;
					FILE_SEPARATOR = FILE_SEPARATOR_WIN ;
					LOGS_BASE_PATH = LOGS_BASE_PATH_WIN ;
					CMD_STRING = "md " + INSTALL_BASE_PATH;
					log('Command String = '  + CMD_STRING);
					CMD_STRING_LOG = "md " + LOGS_BASE_PATH + "GVP_MCP" + FILE_SEPARATOR;
					log('Command String = '  + CMD_STRING_LOG);
				} else {
					log('Activating Linux OS demo');
					INSTALL_BASE_PATH = INSTALL_BASE_PATH_LINUX ;
					FILE_SEPARATOR = FILE_SEPARATOR_LINUX ;
					LOGS_BASE_PATH = LOGS_BASE_PATH_LINUX ;
					CMD_STRING = "mkdir -p " + INSTALL_BASE_PATH;
					log('Command String = '  + CMD_STRING);
					CMD_STRING_LOG = "mkdir -p " + LOGS_BASE_PATH + "GVP_MCP" + FILE_SEPARATOR;
					log('Command String = '  + CMD_STRING_LOG);
					if (MCP_VOICE_XML = 'Enable') {
						MCP_VOICE_XML = 'yes';
					} else {
						MCP_VOICE_XML = 'no';
					}
					MCP_SEC_1 = 'vpMediaControl';
					MCP_SEC_1_OPT_1 = 'AudioFormat';
					MCP_SEC_2 = 'vpMediaControl';
					if (MCP_INSTALL_MODE = 'alaw') {
						MCP_INSTALL_MODE = 'Alaw';
					} else {
						MCP_INSTALL_MODE = 'Mulaw';
					}
			}
			</script>
			<os:execShellCmd host="${MCP_HOST.name}" cmd="${CMD_STRING}" ignoreretvalue="true" result="ResultVar"/>
			<notice msg="${ResultVar}"/>
			<os:execShellCmd host="${MCP_HOST.name}" cmd="${CMD_STRING_LOG}" ignoreretvalue="true" result="ResultVar"/>
			<notice msg="${ResultVar}"/>
			<os:installPackage appName="${MCP}" host="${MCP_HOST.name}" folder="${GVP_FOLDER.name}" skipIfInstalled="${SKIP_INSTALL_PKG}" longName="VP Media Control Platform" version="8" tenantdbid="${TENANT.dbid}" debug="true" appPort="${MCP_APPPORT}" overrideTemplate="${MCP_TPL}">
				<list name="silentInstall">
					<property section="IPCommon" key="InstallPath" value="${INSTALL_BASE_PATH}GVP${FILE_SEPARATOR}${MCP}"/>
					<property section="IPCommon" key="DataModel" value="${DATA_MODEL}"/>
					<property section="${MCP_SEC_1}" key="${MCP_SEC_1_OPT_1}" value="${MCP_INSTALL_MODE}"/>
					<property section="${MCP_SEC_2}" key="HTTPProxy" value="${MCP_HTTP_PROXY}"/>
					<property section="${MCP_SEC_2}" key="ProxyHost" value="${MCP_HTTP_PROXY_HOST}"/>
					<property section="${MCP_SEC_2}" key="ProxyPort" value="${MCP_HTTP_PROXY_PORT}"/>
					<property section="${MCP_SEC_2}" key="VoiceXML" value="${MCP_VOICE_XML}"/>
					<property section="ConfigServer" key="transport-port" value="${MCP_TRANS_PORT}"/>
					<property section="ConfigServer" key="transport-address" value="${MCP_TRANS_HOST}"/>
				</list>
			</os:installPackage>
			<cfg:updateObject name="${MCP}" type="CfgApplication">
				<parameter name="autorestart" value="${APP_AUTORESTART}"/>
				<list name="options">
					<property section="log" key="verbose" value="${LOGGING_LEVEL}"/>
					<property section="log" key="${NETWORK_LEVEL}" value="${NETWORK_VALUE}"/>
					<property section="log" key="expire" value="${EXPIRE_FILE}"/>
					<property section="log" key="buffering" value="true"/>
					<property section="log" key="segment" value="${SEGMENT_FILE}"/>
					<property section="log" key="all" value="${LOGS_BASE_PATH}GVP_MCP${FILE_SEPARATOR}${MCP}"/>
					<property section="sip" key="defaulthost" value="${MCP_HOST.name}"/>
					<property section="sip" key="localport" value="${MCP_SIP}"/>
					<property section="sip" key="routeset" value="${MCPROUTESET}"/>
					<property section="sip" key="transport.0" value="transport0 udp:${MCP_TRANSPORT}"/>
					<property section="sip" key="transport.1" value="transport1 tcp:${MCP_TRANSPORT}"/>
					<property section="sip" key="transport.2" value=""/>
					<property section="sip" key="transport.staticroutelist" value="${MCP_STATICROUTELIST}"/>
					<property section="sip" key="key" value=""/>
					<property section="sip" key="voipmetrics.localhost" value=""/>
					<property section="gvp.rm" key="aor" value="sip:${MCP_TRANSPORT};sips:${MCP_TRANSPORT_TLS}"/>
					<property section="gvp.rm" key="port-capacity" value="${MCP_PORTS}"/>
					<property section="gvp.rm" key="redundancy-type" value="active"/>
				</list>
				<list name="appservers">
					<conninfo appserverdbid="${MESS_SERV.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
					<conninfo appserverdbid="${SIP_SERV.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
				</list>
				<list name="userproperties">
					<property section="sml" key="autostart" value="${SCS_AUTOSTART}"/>
				</list>
			</cfg:updateObject>
			<if cond="MCP_GAX_ARM == 'true'">
				<cfg:updateObject name="${MCP}" type="CfgApplication">
					<list name="options">
						<property section="msml" key="play.basepath" value="http://${HOST_GAX.name}"/>
						<property section="msml" key="play.musicbasepath" value="http://${HOST_GAX.name}"/>
						<property section="Netann" key="annc.basepath" value="http://${HOST_GAX.name}"/>
						<property section="Netann" key="annc.musicbasepath" value="http://${HOST_GAX.name}"/>
					</list>
				</cfg:updateObject>
			</if>
			<if cond="PROXYCS == 'newcsp' || PROXYCS == 'exicsp'">
				<cfg:updateObject name="${MCP}" type="CfgApplication">
					<list name="appservers">
						<conninfo appserverdbid="${CSPROXY.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
					</list>
				</cfg:updateObject>
			</if>

			<if cond="PROXYCS == 'exiconf'">			
			<cfg:updateObject name="${MCP}" type="CfgApplication">
				<list name="appservers">
					<conninfo appserverdbid="${CFGSERV.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
				</list>
			</cfg:updateObject>
			</if>

			<cfg:readObject name="${MCP}" result="MCP_TMP" type="CfgApplication"/>
			<script>
				var newCmdString = searchAndReplaceIPAddress(SearchString, MCP_TMP.commandlinearguments, ReplaceString);
			</script>
			<cfg:updateObject name="${MCP_TMP.name}" type="CfgApplication">
				<query name="name" value="${MCP_TMP.name}"/>
				<parameter name="commandlinearguments" value="${newCmdString}"/>
			</cfg:updateObject>

			<cfg:readObject name="${MCP}" result="MCP" type="CfgApplication"/>
			<if cond="HA == 'true'">
				<cfg:readObject name="${MCP_BK_HOST.name}" type="CfgHost" result="MCP_BK_HOST"/>
				<if cond="CLIENT_SIDE == 'true'">
					<script>
						var MCP_BK_TRANS_HOST = MCP_BK_HOST.ipaddress;
					</script>
				</if>
				<script>
					log('MCP_BK_HOST.ostype = '  + MCP_BK_HOST.ostype + ' ; MCP_BK_HOST.name = '  + MCP_BK_HOST.name);					
					if (/CFGWin/.test(MCP_BK_HOST.ostype)) {
						log('Activating Windows OS demo');
						INSTALL_BASE_PATH = INSTALL_BASE_PATH_WIN ;
						FILE_SEPARATOR = FILE_SEPARATOR_WIN ;
						LOGS_BASE_PATH = LOGS_BASE_PATH_WIN ;
						CMD_STRING = "md " + INSTALL_BASE_PATH;
						log('Command String = '  + CMD_STRING);
						CMD_STRING_LOG = "md " + LOGS_BASE_PATH + "GVP_MCP" + FILE_SEPARATOR;
						log('Command String = '  + CMD_STRING_LOG);
					} else {
						log('Activating Linux OS demo');
						INSTALL_BASE_PATH = INSTALL_BASE_PATH_LINUX ;
						FILE_SEPARATOR = FILE_SEPARATOR_LINUX ;
						LOGS_BASE_PATH = LOGS_BASE_PATH_LINUX ;
						CMD_STRING = "mkdir -p " + INSTALL_BASE_PATH;
						log('Command String = '  + CMD_STRING);
						CMD_STRING_LOG = "mkdir -p " + LOGS_BASE_PATH + "GVP_MCP" + FILE_SEPARATOR;
						log('Command String = '  + CMD_STRING_LOG);
						if (MCP_VOICE_XML = 'Enable') {
							MCP_VOICE_XML = 'yes';
						} else {
							MCP_VOICE_XML = 'no';
						}
						MCP_SEC_1 = 'vpMediaControl';
						MCP_SEC_1_OPT_1 = 'AudioFormat';
						MCP_SEC_2 = 'vpMediaControl';
						if (MCP_INSTALL_MODE = 'alaw') {
							MCP_INSTALL_MODE = 'Alaw';
						} else {
							MCP_INSTALL_MODE = 'Mulaw';
						}
					}
				</script>
				<os:execShellCmd host="${MCP_BK_HOST.name}" cmd="${CMD_STRING}" ignoreretvalue="true" result="ResultVar"/>
				<notice msg="${ResultVar}"/>
				<os:execShellCmd host="${MCP_BK_HOST.name}" cmd="${CMD_STRING_LOG}" ignoreretvalue="true" result="ResultVar"/>
				<notice msg="${ResultVar}"/>
				<os:installPackage appName="${MCP_BK}" host="${MCP_BK_HOST.name}" folder="${GVP_FOLDER.name}" skipIfInstalled="${SKIP_INSTALL_PKG}" longName="VP Media Control Platform" version="8" tenantdbid="${TENANT.dbid}" debug="true" appPort="${MCP_BK_APPPORT}" overrideTemplate="${MCP_TPL}">
					<list name="silentInstall">
						<property section="IPCommon" key="InstallPath" value="${INSTALL_BASE_PATH}GVP${FILE_SEPARATOR}${MCP_BK}"/>
						<property section="IPCommon" key="DataModel" value="${DATA_MODEL}"/>
						<property section="ConfigServer" key="transport-port" value="${MCP_BK_TRANS_PORT}"/>
						<property section="ConfigServer" key="transport-address" value="${MCP_BK_TRANS_HOST}"/>
						<property section="${MCP_SEC_1}" key="${MCP_SEC_1_OPT_1}" value="${MCP_INSTALL_MODE}"/>
						<property section="${MCP_SEC_2}" key="HTTPProxy" value="${MCP_HTTP_PROXY}"/>
						<property section="${MCP_SEC_2}" key="ProxyHost" value="${MCP_HTTP_PROXY_HOST}"/>
						<property section="${MCP_SEC_2}" key="ProxyPort" value="${MCP_HTTP_PROXY_PORT}"/>
						<property section="${MCP_SEC_2}" key="VoiceXML" value="${MCP_VOICE_XML}"/>
					</list>
				</os:installPackage>
				<cfg:updateObject name="${MCP_BK}" type="CfgApplication">
					<parameter name="autorestart" value="${APP_AUTORESTART}"/>
					<list name="options">
						<property section="log" key="verbose" value="${LOGGING_LEVEL}"/>
						<property section="log" key="${NETWORK_LEVEL}" value="${NETWORK_VALUE}"/>
						<property section="log" key="expire" value="${EXPIRE_FILE}"/>
						<property section="log" key="buffering" value="true"/>
						<property section="log" key="segment" value="${SEGMENT_FILE}"/>
						<property section="log" key="all" value="${LOGS_BASE_PATH}GVP_MCP${FILE_SEPARATOR}${MCP_BK}"/>
						<property section="sip" key="defaulthost" value="${MCP_BK_HOST.name}"/>
						<property section="sip" key="localport" value="${MCP_SIP}"/>
						<property section="sip" key="routeset" value="${MCP_BK_ROUTESET}"/>
						<property section="sip" key="transport.0" value="transport0 udp:${MCP_BK_TRANSPORT}"/>
						<property section="sip" key="transport.1" value="transport1 tcp:${MCP_BK_TRANSPORT}"/>
						<property section="sip" key="transport.2" value=""/>
						<property section="sip" key="transport.staticroutelist" value="${MCP_BK_STATICROUTELIST}"/>
						<property section="sip" key="key" value=""/>
						<property section="sip" key="voipmetrics.localhost" value=""/>
						<property section="gvp.rm" key="aor" value="sip:${MCP_BK_TRANSPORT};sips:${MCP_BK_TRANSPORT_TLS}"/>
						<property section="gvp.rm" key="port-capacity" value="${MCP_PORTS}"/>
						<property section="gvp.rm" key="redundancy-type" value="active"/>
					</list>
					<list name="appservers">
						<conninfo appserverdbid="${MESS_SERV.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
						<conninfo appserverdbid="${SIP_SERV.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
					</list>
					<list name="userproperties">
						<property section="sml" key="autostart" value="${SCS_AUTOSTART}"/>
					</list>
				</cfg:updateObject>
				<if cond="MCP_GAX_ARM == 'true'">
					<cfg:updateObject name="${MCP_BK}" type="CfgApplication">
						<list name="options">
							<property section="msml" key="play.basepath" value="http://${HOST_GAX.name}"/>
							<property section="msml" key="play.musicbasepath" value="http://${HOST_GAX.name}"/>
							<property section="Netann" key="annc.basepath" value="http://${HOST_GAX.name}"/>
							<property section="Netann" key="annc.musicbasepath" value="http://${HOST_GAX.name}"/>
						</list>
					</cfg:updateObject>
				</if>
				<if cond="PROXYCS == 'newcsp' || PROXYCS == 'exicsp'">
					<cfg:updateObject name="${MCP_BK}" type="CfgApplication">
						<list name="appservers">
							<conninfo appserverdbid="${CSPROXY.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
						</list>
					</cfg:updateObject>
				</if>

				<if cond="PROXYCS == 'exiconf'">			
				<cfg:updateObject name="${MCP_BK}" type="CfgApplication">
					<list name="appservers">
						<conninfo appserverdbid="${CFGSERV.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
					</list>
				</cfg:updateObject>
				</if>

				<cfg:readObject name="${MCP_BK}" result="MCP_BK_TMP" type="CfgApplication"/>
				<script>
					var newCmdString = searchAndReplaceIPAddress(SearchString, MCP_BK_TMP.commandlinearguments, ReplaceString);
				</script>
				<cfg:updateObject name="${MCP_BK_TMP.name}" type="CfgApplication">
					<query name="name" value="${MCP_BK_TMP.name}"/>
					<parameter name="commandlinearguments" value="${newCmdString}"/>
				</cfg:updateObject>

				<cfg:readObject name="${MCP_BK}" result="MCP_BK" type="CfgApplication"/>
			</if>

			<!-- ## Resource Manager ## -->
			<cfg:readObject name="${RESMAN_HOST.name}" type="CfgHost" result="RESMAN_HOST"/>
			<if cond="CLIENT_SIDE == 'true'">
				<script>
					var RESMAN_TRANS_HOST = RESMAN_HOST.ipaddress;
				</script>
			</if>
			<script>
				log('RESMAN_HOST.ostype = '  + RESMAN_HOST.ostype + ' ; RESMAN_HOST.name = '  + RESMAN_HOST.name);				
				if (/CFGWin/.test(RESMAN_HOST.ostype)) {
					log('Activating Windows OS demo');
					INSTALL_BASE_PATH = INSTALL_BASE_PATH_WIN ;
					FILE_SEPARATOR = FILE_SEPARATOR_WIN ;
					LOGS_BASE_PATH = LOGS_BASE_PATH_WIN ;
					CMD_STRING = "md " + INSTALL_BASE_PATH;
					log('Command String = '  + CMD_STRING);
					CMD_STRING_LOG = "md " + LOGS_BASE_PATH + "GVP_RM" + FILE_SEPARATOR;
					log('Command String = '  + CMD_STRING_LOG);
				} else {
					log('Activating Linux OS demo');
					INSTALL_BASE_PATH = INSTALL_BASE_PATH_LINUX ;
					FILE_SEPARATOR = FILE_SEPARATOR_LINUX ;
					LOGS_BASE_PATH = LOGS_BASE_PATH_LINUX ;
					CMD_STRING = "mkdir -p " + INSTALL_BASE_PATH;
					log('Command String = '  + CMD_STRING);
					CMD_STRING_LOG = "mkdir -p " + LOGS_BASE_PATH + "GVP_RM" + FILE_SEPARATOR;
					log('Command String = '  + CMD_STRING_LOG);
				}
			</script>
			<os:execShellCmd host="${RESMAN_HOST.name}" cmd="${CMD_STRING}" ignoreretvalue="true" result="ResultVar"/>
			<notice msg="${ResultVar}"/>
			<os:execShellCmd host="${RESMAN_HOST.name}" cmd="${CMD_STRING_LOG}" ignoreretvalue="true" result="ResultVar"/>
			<notice msg="${ResultVar}"/>
			<os:installPackage appName="${RESMAN}" host="${RESMAN_HOST.name}" folder="${GVP_FOLDER.name}" skipIfInstalled="${SKIP_INSTALL_PKG}" longName="VP Resource Manager" version="8" tenantdbid="${TENANT.dbid}" debug="true" appPort="${RESMAN_APPPORT}" overrideTemplate="${RESMAN_TPL}">
				<list name="silentInstall">
					<property section="IPCommon" key="InstallPath" value="${INSTALL_BASE_PATH}GVP${FILE_SEPARATOR}${RESMAN}"/>
					<property section="IPCommon" key="DataModel" value="${DATA_MODEL}"/>
					<property section="ConfigServer" key="transport-port" value="${RESMAN_TRANS_PORT}"/>
					<property section="ConfigServer" key="transport-address" value="${RESMAN_TRANS_HOST}"/>
				</list>
			</os:installPackage>
			<cfg:updateObject name="${RESMAN}" type="CfgApplication">
				<parameter name="autorestart" value="${APP_AUTORESTART}"/>
				<list name="options">
					<property section="log" key="verbose" value="${LOGGING_LEVEL}"/>
					<property section="log" key="${NETWORK_LEVEL}" value="${NETWORK_VALUE}"/>
					<property section="log" key="expire" value="${EXPIRE_FILE}"/>
					<property section="log" key="buffering" value="true"/>
					<property section="log" key="segment" value="${SEGMENT_FILE}"/>
					<property section="log" key="all" value="${LOGS_BASE_PATH}GVP_RM${FILE_SEPARATOR}${RESMAN}"/>
					<property section="monitor" key="sip.transport.0" value="transport0 udp:${RMM_TRANSPORT}"/>
					<property section="monitor" key="sip.transport.1" value="transport1 tcp:${RMM_TRANSPORT}"/>
					<property section="monitor" key="sip.transport.2" value=""/>
					<property section="monitor" key="key" value=""/>
					<property section="proxy" key="sip.transport.0" value="transport0 udp:${RMP_TRANSPORT}"/>
					<property section="proxy" key="sip.transport.1" value="transport1 tcp:${RMP_TRANSPORT}"/>
					<property section="proxy" key="sip.transport.2" value=""/>
					<property section="proxy" key="key" value=""/>
					<property section="registrar" key="sip.transport.0" value="transport0 udp:${RMR_TRANSPORT}"/>
					<property section="registrar" key="sip.transport.1" value="transport1 tcp:${RMR_TRANSPORT}"/>
					<property section="registrar" key="sip.transport.2" value=""/>
					<property section="registrar" key="key" value=""/>
					<property section="subscription" key="sip.transport.0" value="transport0 udp:${RMS_TRANSPORT}"/>
					<property section="subscription" key="sip.transport.1" value="transport1 tcp:${RMS_TRANSPORT}"/>
					<property section="subscription" key="sip.transport.2" value=""/>
					<property section="subscription" key="key" value=""/>
				</list>
				<list name="appservers">
					<conninfo appserverdbid="${MESS_SERV.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
					<conninfo appserverdbid="${SIP_SERV.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
				</list>
				<list name="userproperties">
					<property section="sml" key="autostart" value="${SCS_AUTOSTART}"/>
				</list>
			</cfg:updateObject>
			<if cond="PROXYCS == 'newcsp' || PROXYCS == 'exicsp'">
				<cfg:updateObject name="${RESMAN}" type="CfgApplication">
					<list name="appservers">
						<conninfo appserverdbid="${CSPROXY.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
					</list>
				</cfg:updateObject>
			</if>

			<if cond="PROXYCS == 'exiconf'">			
			<cfg:updateObject name="${RESMAN}" type="CfgApplication">
				<list name="appservers">
					<conninfo appserverdbid="${CFGSERV.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
				</list>
			</cfg:updateObject>
			</if>

			<cfg:readObject name="${RESMAN}" result="RESMAN_TMP" type="CfgApplication"/>
			<script>
				var newCmdString = searchAndReplaceIPAddress(SearchString, RESMAN_TMP.commandlinearguments, ReplaceString);
			</script>
			<cfg:updateObject name="${RESMAN_TMP.name}" type="CfgApplication">
				<query name="name" value="${RESMAN_TMP.name}"/>
				<parameter name="commandlinearguments" value="${newCmdString}"/>
			</cfg:updateObject>

			<cfg:readObject name="${RESMAN}" result="RESMAN" type="CfgApplication"/>
			<if cond="HA == 'true'">
				<cfg:readObject name="${RESMAN_BK_HOST.name}" type="CfgHost" result="RESMAN_BK_HOST"/>
				<if cond="CLIENT_SIDE == 'true'">
					<script>
						var RESMAN_BK_TRANS_HOST = RESMAN_BK_HOST.ipaddress;
					</script>
				</if>
				<script>
					log('RESMAN_BK_HOST.ostype = '  + RESMAN_BK_HOST.ostype + ' ; RESMAN_BK_HOST.name = '  + RESMAN_BK_HOST.name);					
					if (/CFGWin/.test(RESMAN_BK_HOST.ostype)) {
						log('Activating Windows OS demo');
						INSTALL_BASE_PATH = INSTALL_BASE_PATH_WIN ;
						FILE_SEPARATOR = FILE_SEPARATOR_WIN ;
						LOGS_BASE_PATH = LOGS_BASE_PATH_WIN ;
						CMD_STRING = "md " + INSTALL_BASE_PATH;
						log('Command String = '  + CMD_STRING);
						CMD_STRING_LOG = "md " + LOGS_BASE_PATH + "GVP_RM" + FILE_SEPARATOR;
						log('Command String = '  + CMD_STRING_LOG);
					} else {
						log('Activating Linux OS demo');
						INSTALL_BASE_PATH = INSTALL_BASE_PATH_LINUX ;
						FILE_SEPARATOR = FILE_SEPARATOR_LINUX ;
						LOGS_BASE_PATH = LOGS_BASE_PATH_LINUX ;
						CMD_STRING = "mkdir -p " + INSTALL_BASE_PATH;
						log('Command String = '  + CMD_STRING);
						CMD_STRING_LOG = "mkdir -p " + LOGS_BASE_PATH + "GVP_RM" + FILE_SEPARATOR;
						log('Command String = '  + CMD_STRING_LOG);
					}
				</script>
				<os:execShellCmd host="${RESMAN_BK_HOST.name}" cmd="${CMD_STRING}" ignoreretvalue="true" result="ResultVar"/>
				<notice msg="${ResultVar}"/>
				<os:execShellCmd host="${RESMAN_BK_HOST.name}" cmd="${CMD_STRING_LOG}" ignoreretvalue="true" result="ResultVar"/>
				<notice msg="${ResultVar}"/>
				<os:installPackage appName="${RESMAN_BK}" host="${RESMAN_BK_HOST.name}" folder="${GVP_FOLDER.name}" skipIfInstalled="${SKIP_INSTALL_PKG}" longName="VP Resource Manager" version="8" tenantdbid="${TENANT.dbid}" debug="true" appPort="${RESMAN_BK_APPPORT}" overrideTemplate="${RESMAN_TPL}">
					<list name="silentInstall">
						<property section="IPCommon" key="InstallPath" value="${INSTALL_BASE_PATH}GVP${FILE_SEPARATOR}${RESMAN_BK}"/>
						<property section="IPCommon" key="DataModel" value="${DATA_MODEL}"/>
						<property section="ConfigServer" key="transport-port" value="${RESMAN_BK_TRANS_PORT}"/>
						<property section="ConfigServer" key="transport-address" value="${RESMAN_BK_TRANS_HOST}"/>
					</list>
				</os:installPackage>
				<cfg:updateObject name="${RESMAN_BK}" type="CfgApplication">
					<parameter name="autorestart" value="${APP_AUTORESTART}"/>
					<list name="options">
						<property section="log" key="verbose" value="${LOGGING_LEVEL}"/>
						<property section="log" key="${NETWORK_LEVEL}" value="${NETWORK_VALUE}"/>
						<property section="log" key="expire" value="${EXPIRE_FILE}"/>
						<property section="log" key="buffering" value="true"/>
						<property section="log" key="segment" value="${SEGMENT_FILE}"/>
						<property section="log" key="all" value="${LOGS_BASE_PATH}GVP_RM${FILE_SEPARATOR}${RESMAN_BK}"/>
						<property section="cluster" key="ha-mode" value="active-active"/>
						<property section="cluster" key="member.1" value="${RESMAN_HOST.ipaddress}:${RESMAN_HAPORT}"/>
						<property section="cluster" key="member.2" value="${RESMAN_BK_HOST.ipaddress}:${RESMAN_HAPORT}"/>
						<property section="cluster" key="members" value="1 2"/>
						<property section="cluster" key="mymemberid" value="2"/>
						<property section="cluster" key="electiontimer" value="3000"/>
						<property section="cluster" key="heartbeattimer" value="3000"/>
						<property section="cluster" key="hotstandby" value="true"/>
						<property section="cluster" key="initial-electiontimer" value="5000"/>
						<property section="cluster" key="networkrecoverytime" value="5000"/>
						<property section="cluster" key="periodic-data-update" value="3000"/>
						<property section="monitor" key="sip.transport.0" value="transport0 udp:${RMM_BK_TRANSPORT}"/>
						<property section="monitor" key="sip.transport.1" value="transport1 tcp:${RMM_BK_TRANSPORT}"/>
						<property section="monitor" key="sip.transport.2" value=""/>
						<property section="monitor" key="key" value=""/>
						<property section="proxy" key="sip.transport.0" value="transport0 udp:${RMP_BK_TRANSPORT}"/>
						<property section="proxy" key="sip.transport.1" value="transport1 tcp:${RMP_BK_TRANSPORT}"/>
						<property section="proxy" key="sip.transport.2" value=""/>
						<property section="proxy" key="key" value=""/>
						<property section="registrar" key="sip.transport.0" value="transport0 udp:${RMR_BK_TRANSPORT}"/>
						<property section="registrar" key="sip.transport.1" value="transport1 tcp:${RMR_BK_TRANSPORT}"/>
						<property section="registrar" key="sip.transport.2" value=""/>
						<property section="registrar" key="key" value=""/>
						<property section="subscription" key="sip.transport.0" value="transport0 udp:${RMS_BK_TRANSPORT}"/>
						<property section="subscription" key="sip.transport.1" value="transport1 tcp:${RMS_BK_TRANSPORT}"/>
						<property section="subscription" key="sip.transport.2" value=""/>
						<property section="subscription" key="key" value=""/>
					</list>
					<list name="appservers">
						<conninfo appserverdbid="${MESS_SERV.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
						<conninfo appserverdbid="${SIP_SERV.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
					</list>
					<list name="userproperties">
						<property section="sml" key="autostart" value="${SCS_AUTOSTART}"/>
					</list>
				</cfg:updateObject>
				<if cond="PROXYCS == 'newcsp' || PROXYCS == 'exicsp'">
					<cfg:updateObject name="${RESMAN_BK}" type="CfgApplication">
						<list name="appservers">
							<conninfo appserverdbid="${CSPROXY.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
						</list>
					</cfg:updateObject>
				</if>
				<if cond="PROXYCS == 'exiconf'">			
				<cfg:updateObject name="${RESMAN_BK}" type="CfgApplication">
					<list name="appservers">
						<conninfo appserverdbid="${CFGSERV.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
					</list>
				</cfg:updateObject>
				</if>
				<cfg:updateObject name="${RESMAN.name}" type="CfgApplication">
					<list name="options">
						<property section="cluster" key="ha-mode" value="active-active"/>
						<property section="cluster" key="member.1" value="${RESMAN_HOST.ipaddress}:${RESMAN_HAPORT}"/>
						<property section="cluster" key="member.2" value="${RESMAN_BK_HOST.ipaddress}:${RESMAN_HAPORT}"/>
						<property section="cluster" key="members" value="1 2"/>
						<property section="cluster" key="mymemberid" value="1"/>
						<property section="cluster" key="electiontimer" value="3000"/>
						<property section="cluster" key="heartbeattimer" value="3000"/>
						<property section="cluster" key="hotstandby" value="true"/>
						<property section="cluster" key="initial-electiontimer" value="5000"/>
						<property section="cluster" key="networkrecoverytime" value="5000"/>
						<property section="cluster" key="periodic-data-update" value="3000"/>
					</list>
				</cfg:updateObject>

				<cfg:readObject name="${RESMAN_BK}" result="RESMAN_BK_TMP" type="CfgApplication"/>
				<script>
					var newCmdString = searchAndReplaceIPAddress(SearchString, RESMAN_BK_TMP.commandlinearguments, ReplaceString);
				</script>
				<cfg:updateObject name="${RESMAN_BK_TMP.name}" type="CfgApplication">
					<query name="name" value="${RESMAN_BK_TMP.name}"/>
					<parameter name="commandlinearguments" value="${newCmdString}"/>
				</cfg:updateObject>

				<cfg:readObject name="${RESMAN_BK}" result="RESMAN_BK" type="CfgApplication"/>
			</if>

			<!-- ## Reporting Server ## -->
			<if cond="GVPRS == 'true'">	
				<cfg:readObject name="${RS_HOST.name}" type="CfgHost" result="RS_HOST"/>
				<os:getEnvVar host="${RS_HOST.name}" name="JAVA_HOME" result="JAVA_HOME"/>
				<if cond="CLIENT_SIDE == 'true'">
					<script>
						var RS_TRANS_HOST = RS_HOST.ipaddress;
					</script>
				</if>
				<script>
					log('RS_HOST.ostype = '  + RS_HOST.ostype + ' ; RS_HOST.name = '  + RS_HOST.name);				
					if (/CFGWin/.test(RS_HOST.ostype)) {
						OSTYPE = 'Windows';
						log('Activating Windows OS demo');
						INSTALL_BASE_PATH = INSTALL_BASE_PATH_WIN ;
						FILE_SEPARATOR = FILE_SEPARATOR_WIN ;
						LOGS_BASE_PATH = LOGS_BASE_PATH_WIN ;
						CMD_STRING = "md " + INSTALL_BASE_PATH;
						log('Command String = '  + CMD_STRING);
						CMD_STRING_LOG = "md " + LOGS_BASE_PATH + "GVP_RS" + FILE_SEPARATOR;
						log('Command String = '  + CMD_STRING_LOG);
					} else {
						OSTYPE = 'Linux';
						log('Activating Linux OS demo');
						INSTALL_BASE_PATH = INSTALL_BASE_PATH_LINUX ;
						FILE_SEPARATOR = FILE_SEPARATOR_LINUX ;
						LOGS_BASE_PATH = LOGS_BASE_PATH_LINUX ;
						CMD_STRING = "mkdir -p " + INSTALL_BASE_PATH;
						log('Command String = '  + CMD_STRING);
						CMD_STRING_LOG = "mkdir -p " + LOGS_BASE_PATH + "GVP_RS" + FILE_SEPARATOR;
						log('Command String = '  + CMD_STRING_LOG);
						RS_SEC_1 = 'vpReportServer';
						RS_SEC_1_OPT_1 = 'PortWS';
						if (RS_ENGINE == 'No_database') {
							RS_ENGINE ='None';
						}
					}
				</script>
				<os:execShellCmd host="${RS_HOST.name}" cmd="${CMD_STRING}" ignoreretvalue="true" result="ResultVar"/>
				<notice msg="${ResultVar}"/>
				<os:execShellCmd host="${RS_HOST.name}" cmd="${CMD_STRING_LOG}" ignoreretvalue="true" result="ResultVar"/>
				<notice msg="${ResultVar}"/>
				<os:installPackage appName="${RS}" host="${RS_HOST.name}" folder="${GVP_FOLDER.name}" skipIfInstalled="${SKIP_INSTALL_PKG}" longName="VP Reporting Server" version="8" tenantdbid="${TENANT.dbid}" debug="true" appPort="${RS_APPPORT}" overrideTemplate="${RS_TPL}">
					<list name="silentInstall">
						<property section="IPCommon" key="InstallPath" value="${INSTALL_BASE_PATH}GVP${FILE_SEPARATOR}${RS}"/>
						<property section="IPCommon" key="DataModel" value="${DATA_MODEL}"/>
						<property section="IPCommon" key="JavaPath" value="${JRE_HOME}"/>
						<property section="ConfigServer" key="transport-port" value="${RS_TRANS_PORT}"/>
						<property section="ConfigServer" key="transport-address" value="${RS_TRANS_HOST}"/>
						<property section="Database" key="Engine" value="${RS_ENGINE}"/>
						<property section="Database" key="DatabaseName" value="${RS_DBNAME}"/>
						<property section="Database" key="Host" value="${RS_DBHOST}"/>
						<property section="Database" key="Port" value="${RS_DBPORT}"/>
						<property section="Database" key="User" value="${RS_DBUSER}"/>
						<property section="Database" key="xPassword" value="${RS_DBUSERPWD}"/>
						<property section="Database" key="Password" value="${RS_DBUSERPWD}"/>
						<property section="${RS_SEC_1}" key="${RS_SEC_1_OPT_1}" value="${RSWEB_PORT}"/>
						<property section="${RS_SEC_1}" key="Port" value="${RSAMQ_PORT}"/>
					</list>
				</os:installPackage>
				<cfg:updateObject name="${RS}" type="CfgApplication">
					<parameter name="autorestart" value="${APP_AUTORESTART}"/>
					<list name="options">
						<property section="messaging" key="port" value="${RSAMQ_PORT}"/>
						<property section="reporting" key="port" value="${RSWEB_PORT}"/>
						<property section="log" key="verbose" value="${LOGGING_LEVEL}"/>
						<property section="log" key="${NETWORK_LEVEL}" value="${NETWORK_VALUE}"/>
						<property section="log" key="expire" value="${EXPIRE_FILE}"/>
						<property section="log" key="buffering" value="true"/>
						<property section="log" key="segment" value="${SEGMENT_FILE}"/>
						<property section="log" key="all" value="${LOGS_BASE_PATH}GVP_RS${FILE_SEPARATOR}${RS}"/>
					</list>
					<list name="appservers">
						<conninfo appserverdbid="${MESS_SERV.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
					</list>
					<list name="userproperties">
						<property section="sml" key="autostart" value="${SCS_AUTOSTART}"/>
					</list>
				</cfg:updateObject>
				<if cond="PROXYCS == 'newcsp' || PROXYCS == 'exicsp'">
					<cfg:updateObject name="${RS}" type="CfgApplication">
						<list name="appservers">
							<conninfo appserverdbid="${CSPROXY.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
						</list>
					</cfg:updateObject>
				</if>

				<if cond="PROXYCS == 'exiconf'">			
				<cfg:updateObject name="${RS}" type="CfgApplication">
					<list name="appservers">
						<conninfo appserverdbid="${CFGSERV.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
					</list>
				</cfg:updateObject>
				</if>

				<if cond="OSTYPE == 'Windows'"> 
						<os:execShellCmd host="${RS_BK_HOST.name}" asAdmin="true" cmd="setx JAVA_HOME ${JAVA_HOME} /m" ignoreretvalue="true" result="ResultVar"/>
				</if>
				<if cond="OSTYPE == 'Linux'"> 
					<os:setEnvVar shell="bash" host="${RS_BK_HOST.name}" name="JAVA_HOME" value="${JAVA_HOME}"/>
				</if>

				<cfg:readObject name="${RS}" result="RS_TMP" type="CfgApplication"/>
				<script>
					var newCmdString = searchAndReplaceIPAddress(SearchString, RS_TMP.commandlinearguments, ReplaceString);
				</script>
				<cfg:updateObject name="${RS_TMP.name}" type="CfgApplication">
					<query name="name" value="${RS_TMP.name}"/>
					<parameter name="commandlinearguments" value="${newCmdString}"/>
				</cfg:updateObject>

				<cfg:readObject name="${RS}" result="RS" type="CfgApplication"/>
				<if cond="HA == 'true'">
					<cfg:readObject name="${RS_BK_HOST.name}" type="CfgHost" result="RS_BK_HOST"/>
					<os:getEnvVar host="${RS_BK_HOST.name}" name="JAVA_HOME" result="JAVA_HOME_BK"/>
					<if cond="CLIENT_SIDE == 'true'">
						<script>
							var RS_BK_TRANS_HOST = RS_BK_HOST.ipaddress;
						</script>
					</if>
					<script>
						log('RS_BK_HOST.ostype = '  + RS_BK_HOST.ostype + ' ; RS_BK_HOST.name = '  + RS_BK_HOST.name);					
						if (/CFGWin/.test(RS_BK_HOST.ostype)) {
							OSTYPE = 'Windows';
							log('Activating Windows OS demo');
							INSTALL_BASE_PATH = INSTALL_BASE_PATH_WIN ;
							FILE_SEPARATOR = FILE_SEPARATOR_WIN ;
							LOGS_BASE_PATH = LOGS_BASE_PATH_WIN ;
							CMD_STRING = "md " + INSTALL_BASE_PATH;
							log('Command String = '  + CMD_STRING);
							CMD_STRING_LOG = "md " + LOGS_BASE_PATH + "GVP_RS" + FILE_SEPARATOR;
							log('Command String = '  + CMD_STRING_LOG);
						} else {
							OSTYPE = 'Linux';
							log('Activating Linux OS demo');
							INSTALL_BASE_PATH = INSTALL_BASE_PATH_LINUX ;
							FILE_SEPARATOR = FILE_SEPARATOR_LINUX ;
							LOGS_BASE_PATH = LOGS_BASE_PATH_LINUX ;
							CMD_STRING = "mkdir -p " + INSTALL_BASE_PATH;
							log('Command String = '  + CMD_STRING);
							CMD_STRING_LOG = "mkdir -p " + LOGS_BASE_PATH + "GVP_RS" + FILE_SEPARATOR;
							log('Command String = '  + CMD_STRING_LOG);
							RS_SEC_1 = 'vpReportServer';
							RS_SEC_1_OPT_1 = 'PortWS';
						}
					</script>
					<os:execShellCmd host="${RS_BK_HOST.name}" cmd="${CMD_STRING}" ignoreretvalue="true" result="ResultVar"/>
					<notice msg="${ResultVar}"/>
					<os:execShellCmd host="${RS_BK_HOST.name}" cmd="${CMD_STRING_LOG}" ignoreretvalue="true" result="ResultVar"/>
					<notice msg="${ResultVar}"/>
					<os:installPackage appName="${RS_BK}" host="${RS_BK_HOST.name}" folder="${GVP_FOLDER.name}" skipIfInstalled="${SKIP_INSTALL_PKG}" longName="VP Reporting Server" version="8" tenantdbid="${TENANT.dbid}" debug="true" appPort="${RS_BK_APPPORT}" overrideTemplate="${RS_TPL}">
						<list name="silentInstall">
							<property section="IPCommon" key="InstallPath" value="${INSTALL_BASE_PATH}GVP${FILE_SEPARATOR}${RS_BK}"/>
							<property section="IPCommon" key="DataModel" value="${DATA_MODEL}"/>
							<property section="IPCommon" key="JavaPath" value="${JRE_HOME}"/>
							<property section="ConfigServer" key="transport-port" value="${RS_BK_TRANS_PORT}"/>
							<property section="ConfigServer" key="transport-address" value="${RS_BK_TRANS_HOST}"/>
							<property section="Database" key="Engine" value="${RS_ENGINE}"/>
							<property section="Database" key="DatabaseName" value="${RS_DBNAME}"/>
							<property section="Database" key="Host" value="${RS_DBHOST}"/>
							<property section="Database" key="Port" value="${RS_DBPORT}"/>
							<property section="Database" key="User" value="${RS_DBUSER}"/>
							<property section="Database" key="xPassword" value="${RS_DBUSERPWD}"/>
							<property section="${RS_SEC_1}" key="${RS_SEC_1_OPT_1}" value="${RSWEB_PORT}"/>
							<property section="${RS_SEC_1}" key="Port" value="${RSAMQ_PORT}"/>
						</list>
					</os:installPackage>
					<cfg:updateObject name="${RS_BK}" type="CfgApplication">
						<parameter name="autorestart" value="${APP_AUTORESTART}"/>
						<list name="options">
							<property section="messaging" key="port" value="${RSAMQ_BK_PORT}"/>
							<property section="reporting" key="port" value="${RSWEB_BK_PORT}"/>
							<property section="log" key="verbose" value="${LOGGING_LEVEL}"/>
							<property section="log" key="${NETWORK_LEVEL}" value="${NETWORK_VALUE}"/>
							<property section="log" key="expire" value="${EXPIRE_FILE}"/>
							<property section="log" key="buffering" value="true"/>
							<property section="log" key="segment" value="${SEGMENT_FILE}"/>
							<property section="log" key="all" value="${LOGS_BASE_PATH}GVP_RS${FILE_SEPARATOR}${RS_BK}"/>
						</list>
						<list name="appservers">
							<conninfo appserverdbid="${MESS_SERV.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
						</list>
						<list name="userproperties">
							<property section="sml" key="autostart" value="${SCS_AUTOSTART}"/>
						</list>
					</cfg:updateObject>
					<if cond="PROXYCS == 'newcsp' || PROXYCS == 'exicsp'">
						<cfg:updateObject name="${RS_BK}" type="CfgApplication">
							<list name="appservers">
								<conninfo appserverdbid="${CSPROXY.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
							</list>
						</cfg:updateObject>
					</if>

					<if cond="PROXYCS == 'exiconf'">			
					<cfg:updateObject name="${RS_BK}" type="CfgApplication">
						<list name="appservers">
							<conninfo appserverdbid="${CFGSERV.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
						</list>
					</cfg:updateObject>
					</if>

					<if cond="OSTYPE == 'Windows'"> 
						<os:execShellCmd host="${RS_BK_HOST.name}" asAdmin="true" cmd="setx JAVA_HOME ${JAVA_HOME_BK} /m" ignoreretvalue="true" result="ResultVar"/>
					</if>
					<if cond="OSTYPE == 'Linux'"> 
						<os:setEnvVar shell="bash" host="${RS_BK_HOST.name}" name="JAVA_HOME" value="${JAVA_HOME_BK}"/>
					</if>

					<cfg:readObject name="${RS_BK}" result="RS_BK_TMP" type="CfgApplication"/>
					<script>
						var newCmdString = searchAndReplaceIPAddress(SearchString, RS_BK_TMP.commandlinearguments, ReplaceString);
					</script>
					<cfg:updateObject name="${RS_BK_TMP.name}" type="CfgApplication">
						<query name="name" value="${RS_BK_TMP.name}"/>
						<parameter name="commandlinearguments" value="${newCmdString}"/>
					</cfg:updateObject>

					<cfg:readObject name="${RS_BK}" result="RS_BK" type="CfgApplication"/>
					<cfg:updateObject name="${RS.name}" type="CfgApplication">
						<parameter name="backupserverdbid" value="${RS_BK.dbid}"/>
						<parameter name="redundancytype" value="CFGHTWarmStanby"/>
					</cfg:updateObject>
				</if>

				<!-- ## GAX GVP Reporting Server Plug-In ## -->
				<if cond="GAX_PLUGIN == 'true'">
					<cfg:readObject name="GAX_HOST" result="GAX_HOST" type="CfgHost">
						<query name="dbid" value="${GAX_APPNAME.hostdbid}" />
					</cfg:readObject>
					<cfg:readObject name="${GAX_SERV}" result="GAX_SERVER" type="CfgApplication"/>
					<os:installPackage appName="${GAX_SERVER.name}" host="${GAX_HOST.name}" folder="${MFW_FOLDER.name}" longName="VP Reporting Plugin for GAX" version="8" tenantdbid="${TENANT.dbid}" debug="true" appPort="${GAX_SERVER.port}">
						<list name="silentInstall">
							<property section="IPCommon" key="InstallPath" value="${INSTALL_BASE_PATH}GVP_RS_PlugIn${FILE_SEPARATOR}"/>
							<property section="VPRepPluginGAX" key="GAX_Directory" value="${GAX_SERVER.workdirectory}"/>
						</list>
					</os:installPackage>
					<if cond="HA == 'true'">
					 <!--&& GAX_BK_APPNAME.name != '' -->
						<cfg:readObject name="GAX_BK_HOST" result="GAX_BK_HOST" type="CfgHost">
							<query name="dbid" value="${GAX_BK_APPNAME.hostdbid}" />
						</cfg:readObject>
						<cfg:readObject name="${GAX_BK_SERV}" result="GAX_BK_SERVER" type="CfgApplication"/>
						<os:installPackage appName="${GAX_BK_SERVER.name}" host="${GAX_BK_HOST.name}" folder="${MFW_FOLDER.name}" longName="VP Reporting Plugin for GAX" version="8" tenantdbid="${TENANT.dbid}" debug="true" appPort="${GAX_BK_SERVER.port}">
							<list name="silentInstall">
								<property section="IPCommon" key="InstallPath" value="${INSTALL_BASE_PATH}GVP_RS_PlugIn${FILE_SEPARATOR}"/>
								<property section="VPRepPluginGAX" key="GAX_Directory" value="${GAX_BK_SERVER.workdirectory}"/>
							</list>
						</os:installPackage>
					</if>
				</if>

				<!-- ## Add Connection to GVP Reporting Server for License Manager ## -->
				<if cond="LRMGR == 'true'">
					<cfg:updateObject name="${LRM_APPNAME.name}" type="CfgApplication">
						<list name="appservers">
							<conninfo appserverdbid="${RS.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
						</list>
					</cfg:updateObject>
				</if>

				<!-- ## GVP Reporting Server connection to GVP Resource Manage and MCP ## -->
				<cfg:updateObject name="${RESMAN.name}" type="CfgApplication">
					<list name="appservers">
						<conninfo appserverdbid="${RS.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
					</list>
				</cfg:updateObject>
				<cfg:updateObject name="${MCP.name}" type="CfgApplication">
					<list name="appservers">
						<conninfo appserverdbid="${RS.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
					</list>
				</cfg:updateObject>
				<if cond="HA == 'true'">
					<cfg:updateObject name="${RESMAN_BK.name}" type="CfgApplication">
						<list name="appservers">
							<conninfo appserverdbid="${RS.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
						</list>
					</cfg:updateObject>
					<cfg:updateObject name="${MCP_BK.name}" type="CfgApplication">
						<list name="appservers">
							<conninfo appserverdbid="${RS.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
						</list>
					</cfg:updateObject>
				</if>
			</if>

			<!-- Interaction Workspace -->
			<if cond="InteractionWorkspace == 'false'">
				<cfg:readObject name="${IWS.name}" result="IWS" type="CfgApplication"/>
				<cfg:updateObject createonupdate="true" name="${IWS.name}" type="CfgApplication" subtype="CFGInteractionWorkspace" result="IWS">
					<list name="appservers">
						<conninfo appserverdbid="${SIP_SERV.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
					</list>
				</cfg:updateObject>
			</if>
			<if cond="InteractionWorkspace == 'true'">
				<cfg:updateObject createonupdate="true" name="${IWS}" type="CfgApplication" subtype="CFGInteractionWorkspace" result="IWS">
					<query name="name" value="${IWS}"/>
					<parameter name="version" value="${IWS_TPL.version}"/>
					<parameter name="appprototypedbid" value="${IWS_TPL.dbid}"/>
					<list name="appservers">
						<conninfo appserverdbid="${SIP_SERV.dbid}" connprotocol="${ADDP_PROTOCOL}" transportparams="" appparams="" timoutlocal="${ADDP_LOCAL_TIME}" timoutremote="${ADDP_REMOTE_TIME}" mode="${ADDP_TRACE_LEVEL}"/>
					</list>
				</cfg:updateObject>

				<cfg:readObject name="${IWS_TPL.name}" type="CfgAppPrototype" result="TEMP_IWS_TPL"/>
				<cfg:readObject name="${IWS.name}" type="CfgApplication" result="TEMP_IWS"/>

				<script>
					if(TEMP_IWS_TPL.options &amp;&amp; TEMP_IWS_TPL.options.property) {
						TEMP_IWS.options = TEMP_IWS_TPL.options;
						TEMP_IWS.options.mode = 'clear';
					}                                                                              
				</script>                                                                              
				<cfg:updateObject data="TEMP_IWS"/>			
			</if>

			<!-- ## Add host configuration to enable SCS monitoring ## -->
			<cfg:readObject name="${SCS}" result="SCS" type="CfgApplication"/>
			<foreach index="host_index" array="HOSTARRAY">
				<script> 
					var inc = host_index + 1;
					var tmpHost = HOSTARRAY[host_index];
					log (' Host = ' + tmpHost.name + ' Inc= ' + inc + ' host_index= ' + host_index);
					</script>
				<cfg:updateObject dbid="${tmpHost.dbid}" type="CfgHost">
					<parameter name="scsdbid" value="${SCS.dbid}"/>
					<list name="userproperties">
						<property section="addp" key="addp-timeout" value="${ADDP_HOST_LOCAL_TIME}"/>
						<property section="addp" key="addp-remote-timeout" value="${ADDP_HOST_REMOTE_TIME}"/>
					</list>
				</cfg:updateObject>
			</foreach>
			<if cond="HA == 'true'">
				<foreach index="host_index" array="HOSTARRAY_BK">
					<script> 
						var inc = host_index + 1;
						var tmpHost = HOSTARRAY_BK[host_index];
						log (' Host = ' + tmpHost.name + ' Inc= ' + inc + ' host_index= ' + host_index);
					</script>
					<cfg:updateObject dbid="${tmpHost.dbid}" type="CfgHost">
						<parameter name="scsdbid" value="${SCS.dbid}"/>
						<list name="userproperties">
							<property section="addp" key="addp-timeout" value="${ADDP_HOST_LOCAL_TIME}"/>
							<property section="addp" key="addp-remote-timeout" value="${ADDP_HOST_REMOTE_TIME}"/>
						</list>
					</cfg:updateObject>
				</foreach>
			</if>
			<if cond="PROXYCS == 'newcsp'">			
				<cfg:updateObject dbid="${CSPROXY_HOST.dbid}" type="CfgHost">
					<parameter name="scsdbid" value="${SCS.dbid}"/>
					<list name="userproperties">
						<property section="addp" key="addp-timeout" value="${ADDP_HOST_LOCAL_TIME}"/>
						<property section="addp" key="addp-remote-timeout" value="${ADDP_HOST_REMOTE_TIME}"/>
					</list>
				</cfg:updateObject>
				<if cond="HA == 'true'">
					<cfg:updateObject dbid="${CSPROXY_BK_HOST.dbid}" type="CfgHost">
						<parameter name="scsdbid" value="${SCS.dbid}"/>
						<list name="userproperties">
							<property section="addp" key="addp-timeout" value="${ADDP_HOST_LOCAL_TIME}"/>
							<property section="addp" key="addp-remote-timeout" value="${ADDP_HOST_REMOTE_TIME}"/>
						</list>
					</cfg:updateObject>					
				</if>
			</if>
			<if cond="MESSSRV == 'true'">
				<cfg:updateObject dbid="${MESS_SERV_HOST.dbid}" type="CfgHost">
					<parameter name="scsdbid" value="${SCS.dbid}"/>
					<list name="userproperties">
						<property section="addp" key="addp-timeout" value="${ADDP_HOST_LOCAL_TIME}"/>
						<property section="addp" key="addp-remote-timeout" value="${ADDP_HOST_REMOTE_TIME}"/>
					</list>
				</cfg:updateObject>
				<if cond="HA == 'true'">
					<cfg:updateObject dbid="${MESS_SERV_BK_HOST.dbid}" type="CfgHost">
						<parameter name="scsdbid" value="${SCS.dbid}"/>
						<list name="userproperties">
							<property section="addp" key="addp-timeout" value="${ADDP_HOST_LOCAL_TIME}"/>
							<property section="addp" key="addp-remote-timeout" value="${ADDP_HOST_REMOTE_TIME}"/>
						</list>
					</cfg:updateObject>					
				</if>
			</if>
		</execution>
	</profile>
</solutionDefinition>